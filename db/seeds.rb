Post.create!([
  {title: "音樂  音效", content: "\n[![](http://www.motion-express.com/wp-content/uploads/2011/02/-e1298080911501-1024x571.jpg)](http://www.motion-express.com/wp-content/uploads/2011/02/配音.jpg)\n\n</p>這陣子忙著論文，趕在七月前畢業，卻也很想快點推出新片《河馬走了》。這部短片對我來說有個新的挑戰，就是配音配樂，因為上回《替身謀殺》的音樂音效其實非常陽春，也不難處理，這次使用許多擬真特效例如打鬥、跑步等等。最近在許多網站上尋覓配音工具，看有沒有免錢的可用，但走過一遭發現，幾乎都要錢，冏。在仔細評估考慮之下，最後終於在Video Copilot網站刷下一筆，買了music bundle，也就是買個一套音效素材、一套音樂素材。其實會挑他們網站的產品買，也是因為在他們那裡實在學到太多，不回饋一下實在有點過意不去。\n\n這次配音整個是艱苦之旅，因為設備不夠，所以如果要創造高品質，很多音效都要重配，例如說腳步聲，本來可以在拍攝時使用麥克風收音，但我們團隊並沒有使用指向型麥克風也沒有甚麼防風罩，所以用攝影機錄出來的聲音雜音超多，實在沒辦法直接在影片中使用。所有腳步聲和雜七雜八的音效都要配音，人聲也要專門找地方重錄，這實在要花不少功夫。\n\n最上頭那個圖片是我目前配音的進度，自己看了都覺得有點嚇人，每一格都代表一個音效，是一格一格貼上去的，冏。希望進度能夠快點！只有一個人弄的情況下只能自求多福。\n\n最後來分享一下聲音素材的網站。假如大家有在找這類的素材，記得要找有標記royalty free的素材，代表可隨意使用於商業用途，否則用了以後怎麼被抓的都不知道。\n\n[Soundsnap](http://www.soundsnap.com/)\nSoundsnap這個網站提供音效下載，素材還不少，雖然都要錢，但東西五花八門，可以參考一下有甚麼可用。\n\n[Incompetech](http://incompetech.com/m/c/royalty-free/index.html)\nIncompetech提供免費的音樂下載，雖然要一個一個點，但下載是免費的！其實收錄的專輯超多，一般來說免費資源應該是不會這麼多的，這網站多到讓人起疑到底有沒有違法，冏。不過我四處看了看，應該是沒有違法才對。", slug: "20110219-music-sound", category_id: 1, author_id: nil, display_date: "2011-02-19", is_public: true, video_embed: nil},
  {title: "AE 外掛來源 (CC, Trapcode等等)", content: "\n&nbsp;\n\n[![](http://upload.wikimedia.org/wikipedia/commons/3/34/Adobe_After_Effects_CS3_icon.png)](http://commons.wikimedia.org/wiki/File:Adobe_After_Effects_CS3_icon.png)\n\n(圖片來源：[Wikimedia](http://commons.wikimedia.org/wiki/File:Adobe_After_Effects_CS3_icon.png), CC Licensed)\n\n有不少人問到After Effects裡頭的外掛程式是哪裡來的，例如最受歡迎的Particular和CC系列的外掛。如果是CS3或更以前的版本，CC系列的效果就不會出現，因為該公司是在CS4版本時才和Adobe公司合作，因此CS4才免費提供CC外掛。至於Particular是Redgiant公司所推出的Trapcode系列外掛，其中便以Particular最後歡迎(也最貴...)。在各大教學網站看的幾個最受歡迎外掛都要錢，不過有幾個都有試用版，可以用Google搜尋這些外掛的官方網站，裡頭就有下載。\n\n但好消息是，有些免費資源也相當有用，例如在此介紹兩個還蠻有用的外掛：Sure Target、VC Reflcect，這兩個外掛都是由VideoCopilot免費提供，網站上也有介紹，真的非常屌。個人認為就算沒有教學，摸一會兒也就會了。連結如下：<a onclick=\"window.open(&quot;http://www.videocopilot.net/presets/sure_target_2/&quot;)\">\n</a>\n\n#### Sure Target\n\n#### VC Reflect\n\n當然還有其他的免費資源，不過大多都是小工具，如果真的是要強大有用的外掛，勢必都是要錢的。想要搜尋一些新玩意兒，不妨在Google打上「free after effects plugin」，會有非常多資料。大家參考看看吧~", slug: "20110329-ae-plugin", category_id: 2, author_id: nil, display_date: "2011-03-29", is_public: true, video_embed: nil},
  {title: "轉場效果 Transition", content: "\n最早看到威力導演、Premiere裡頭提供的轉場效果(Transition)，覺得挺酷的，但用久了其實會覺得這些罐頭效果其實真正會用到的沒幾個。除了在學校看同學上課用ppt報告以外，影片裡根本不會出現(但威力導演裡頭確實有提供這些轉場)，這些東西擺在那，就今天的美感標準，實在是多占空間。最近在網路上看到的廣告、電影，大致都是這種模式在走，幾乎沒有影音編輯軟體那種罐頭轉場的影子。目前唯一能看到的地方只有家庭錄影帶(意為純收藏的影片)和綜藝節目(當然只針對低製作成本的綜藝節目)。就我個人看來，目前最有效的轉場效果只有兩種：\n\n#### 一、量身打造\n\n以下提供一個非常典型的例子，是[Video Copilot](http://videocopilot.net/products/evolution/)網站上Evolution這個產品的廣告，所有畫面轉場都是以此方式進行，看起來其實非常順暢，好像是一鏡到底一般。這種轉場方式只能說是要命，因為每個畫面銜接都需要花功夫、時間，不過就這個影片看來，確實有達到非常好的效果！\n\n<iframe src=\"http://www.youtube.com/embed/EWJnEaKV2-4?rel=0&amp;hd=1\" frameborder=\"0\" width=\"480\" height=\"300\"></iframe>\n\n不過有一個小問題：何謂「量身打造」？其實我要說的完全就是針對After Effects、Motion和其他更強大的特效軟體，因為只要打開這些軟體，要處理的絕不只有轉場，而是許許多多特效、合成等等，況且今天一家公司要出廣告、節目，會特別請一位會使用特效軟體的製作人員單純使用特效製作轉場嗎？答案顯而易見。在台灣，負責剪接和負責特效的價碼實在差太多了，要不就是請製作團隊一手包辦。若單純只外包給一位製作人員剪接，轉場勢必只會使用罐頭特效，因此，「量身打造」的部分就不考慮啦！\n\n#### 二、淡出、淡入(fade out, fade in)、直接轉場\n\n簡單、乾淨、漂亮，這種效果雖然常見，但必須說是無懈可擊。淡入淡出常用在需要營造緩慢的氣氛或是沉澱整個畫面的感覺，加上要讓整個影片步調放慢的話，用這種轉場方式也是個好方法，可以把轉場時間拉長，突兀的感覺降到最低(小心拉太常會有讓人覺得「搞屁是要轉場多久」)。至於直接轉場，意思是沒有使用任何轉場效果，等於像傳統線性剪輯那樣，把兩段影片直接放在一起。其實這樣處理有個非常大的意義，就是要觀眾關注在影片內容本身！以下提供一個非常好的例子，是[Blizzard](http://us.blizzard.com/diablo3/index.xml)公司的《Diablo III》廣告，這個遊戲應該還要好幾年以後才會出，不過若將焦點放在廣告影片上，可感覺到氣氛營造很棒(雖然有一大部分要歸功於音樂音效)，影片內容基本上已經非常完美，若再加上多餘的轉場效果只會破壞影片本身。至於影片中有些轉場是使用畫面閃爍、跳動的效果，那就要歸類到量身打造的部分了(雖然許多編輯軟體如Premiere、Vegas、Final Cut能夠做到九分像)。\n\n<iframe src=\"http://www.youtube.com/embed/UhrsIF6ymVE?rel=0\" frameborder=\"0\" width=\"480\" height=\"300\"></iframe>\n\n總而言之，轉場效果再怎樣也只能算是配角，但配角也要有足夠的配合度和力量來支撐這種「花瓶」的角色，有些很莫名的轉場真是讓人看了就生氣！就像是電影裡頭男女主角演得超棒，結果配角演很爛，觀眾一樣會看不下去(雖然導演應該不會允許這樣的是發生)。講這麼多，好像把威力導演和Final Cut等編輯軟體的轉場效果講得一文不值，但說真的，那些效果會用的就是會用，某些情況是用得上，但大部分情況不會用的就晾在那裏，個人認為真正能夠讓人印象深刻的轉場還是上述兩種：要不是量身打造，再不然就把重點放在影片本身，轉場就別想太多了！", slug: "20110501-video-transition", category_id: 2, author_id: nil, display_date: "2011-05-01", is_public: true, video_embed: nil},
  {title: "音樂、音效、影片、視頻素材來源推薦", content: "\n其實這陣子有不少人都問到我的素材都從哪來，想說乾脆來寫一篇推薦的文章。畢竟大家錢都是要花在刀口上，當然越棒、越能重複利用的資源越好，免費資源更是不可或缺。不過在此之前要提一下，在中文網站方面，資源是乏善可陳，我之前有找到幾個台灣網站分享的資源，只能說品質還有待加強。大陸的話則是根本找不太到，不知道是因為盜版實在太猖狂還是怎樣，總之資源很少。幾乎所有東西都還是以英文網站為主，尤其是美國網站，東西五花八門，品質也相當良好。站在一個使用者的角度，不知道到底是為什麼在台灣做不起來，不過就目前看來，要找高品質的資源，還是只能從英文網站下手囉。\n\n\n#### 1\\. <a onclick=\"window.open(&quot;http://www.digitaljuice.com/default.asp&quot;)\">百貨公司Digital Juice</a>\n\n●值得推薦點：像在逛百貨公司一樣，東西五花八門，品質也都不錯\n這個連想都不用想，個人認為最猛的影片、音樂資源網站，特別針對影片製作的使用者設計，幾乎所有類別的影片、音樂、音效都有，甚至在template這個類別下面，還有針對不同軟體所設計的版面，使用者只要把版面套到檔案上，就可以直接使用。當然，價錢相較之下是中高等的，有些東西是中階的價位(大家都知道做這行的人少，這類的資源都很貴)，但有些東西很莫名的貴，不知為啥，大家參考看看吧！ <a onclick=\"window.open(&quot;http://www.sternfx.com/tutorials/78&quot;)\">這個教學片段</a>就是使用Digital Juice的影片，加上特效合成而完成。\n\n#### 2\\. <a onclick=\"window.open(&quot;http://www.videocopilot.net/&quot;)\">小而美Video Copilot</a>\n\n●值得推薦點：東西實際、好用\n不用說，我三天兩頭都在提這個網站，因為他也是個綜合性資源的網站。而且他雖然東西少，但樣樣精華。只要進入<a onclick=\"window.open(&quot;http://www.videocopilot.net/products/&quot;)\">Products</a>頁面，立刻會看到幾樣東西：\n(1) 影片集錦：Action Essentials 2、Evolution、Riot Gear\n(2) 音樂集錦：Sound Design FX、Pro Scores\n光這兩個類別就嚇嚇叫，有興趣可以看一下廣告，都做得很漂亮。而且價錢很合理，可以考慮。像我個人對於他們音樂和音效非常有興趣，先前就有買來玩，裡頭的東西在我製作特效和配樂的時候真的很好用。\n\n#### 3\\. <a onclick=\"window.open(&quot;http://www.footagefirm.com/&quot;)\">雜貨店Footage Firm</a>\n\n●值得推薦點：自然景觀之影片、慢動作、便宜\n號稱免費影片，但根本都騙人的，這個網站的影片素材數量有點驚人，不過能用的其實不太多。左邊的Browse Collections列表可以看一下有啥東西，假如大家有點進去一些使用動畫製作的影片例如這個<a onclick=\"window.open(&quot;http://www.footagefirm.com/hd-game-on.html&quot;)\">Game On</a>，會發現這根本就是騙錢的東西！一看就知道是一些AE和3D的玩意兒拼湊起來的，況且真的有地方會需要這種影片嗎？想也知道根本用不太到！好，吐槽這麼多，既然都放在推薦列表裡了一定有值得推薦的地方，就是實體拍攝的部分，例如之類的城市和自然景觀，個人認為有些畫面很好看，另外還有慢動作的部分，他強調有使用1000fps的攝影機拍攝，雖然有些例如說摔電視的影片看起來會心想：「是有甚麼屁用...」不過他的慢動作真的很慢...例如<a onclick=\"window.open(&quot;http://www.footagefirm.com/free-slow-motion-fire-effects.html&quot;)\">火燒</a>之類的畫面，有需要類似影片的朋友可以參考一下！(不過也有不少影片看起來很像80年代那種攝影機拍的，很弱，要挑)\n\n#### 4\\. <a onclick=\"window.open(&quot;http://incompetech.com/m/c/royalty-free/index.html?feels[]=Somber&quot;)\">配樂寶庫Incompetech</a>\n\n●值得推薦點：免費音樂、分類齊全、搜索簡便！\nIncompetech並非專門提供影片音樂的地方，這個資料庫純粹是這個網站一個附屬的地方。不過對我們這種需要素材的製作人員來說，這裡簡直是寶庫！要找理由不推薦這個網站實在太難了，免費音樂、排版清楚、搜尋簡便、下載流程直接，太扯了！而且強調是Royalty Free，感覺全世界都會來這邊取材。雖然他收錄的音樂並沒有到超級多的地步，不過就一個免費資源的地方來說，這樣的數量已經相當驚人了。右邊的標籤可以打勾搜尋音樂類型，然後接下來就是一首一首聽了，聽滿意的立刻下載。各位朋友，需要音樂的快點來看吧！\n\n#### 5\\. <a onclick=\"window.open(&quot;http://www.soundsnap.com/&quot;)\">音效百科全書Soundsnap</a>\n\n●值得推薦點：種類繁多的音效\n其實音效這種東西，能自己錄就自己錄，誰都不想花錢。不過有很多道具是無法借到的，也有很多音效是我們無法在平常發出來的。這時Soundsnap就非常好用了，只要在搜尋欄位輸入想要的音效，會立刻蹦出來整個類別。因為只有英文搜尋，如果不確定例如說蟬叫聲的英文為何，可以先把「蟬」丟到google翻譯裡頭翻出來，再拿來搜尋，應該是很ok的！這個網站的音效需要付費下載，不過如果量真的很大，付點小錢又有甚麼壞處呢？\n\n#### 6\\. <a onclick=\"window.open(&quot;http://www.mbase.com.tw/?gclid=CMfwrNbb-akCFcIkpAodOFB1aQ/&quot;)\">配樂基地</a>\n\n●值得推薦點：國產！\n最後介紹一個國產的網站，配樂內容也相當豐富，可以從頭到尾試聽，也可以選擇長度。如果有需要自訂長度的製作人員也可以考慮喔！由於是國產的，聯絡溝通方便，就推薦一下啦！\n\n===================================================\n這次介紹的網站一半影像為主、一半音樂為主，不過在這裡有幾個小觀念希望能傳遞給大家。\n\n#### 1\\. 購買正版\n\n購買正版，才知道珍惜。以前大家都知道遊戲機會有台片，那時買台片賣得可兇了，但常常買了以後玩不到兩次就不玩，雖然這跟有沒有試玩制度和售後服務有關係，不過買台片這件事情本身就很有問題。現在我踏入影音製作的領域，知道其實這行做的人不多，願意生產這些素材的人更少，假如說大家都一直使用盜版，不但不知珍惜，對這些願意生產和販售的人來說也是種傷害！\n\n#### 2\\. 記得作品po上網前注意使用的素材有沒有標明Royalty Free\n\n有標明Royalty Free才是可以隨處散播的素材，如果沒有，小心Youtube等網站都會專門來抓這些東西。台灣很多警察也會在各大網站和論壇上抓觸犯著作權的素材，聽說他們業績都不錯，變成常常在抓。因此有在上傳的人小心版權問題。\n\n#### 3\\. 素材都是可以拼湊、剪裁的\n\n由於素材很貴，如果我一直推廣大家去噴錢，那真的有點沒良心。很多東西經過拼湊、剪輯，是可以重複利用的，這也是為什麼會有像 <a onclick=\"window.open(&quot;http://www.videocopilot.net/products/evolution/&quot;)\">Evolution</a>那樣已經都去背完成的素材，因此大家記得盡量在已經買入的素材上面玩一點創意，才能在有限資源的情況下多多使用素材！\n\n往後有機會再來推薦其他網站吧！大家一起加油！", slug: "20110712-material-source", category_id: 2, author_id: nil, display_date: "2011-07-12", is_public: true, video_embed: nil},
  {title: "Premiere Pro CS4 解決預覽lag問題", content: "\n&nbsp;\n\n[![](http://upload.wikimedia.org/wikipedia/commons/a/a0/Adobe_Premiere_Pro_CS4_icon.png)](http://commons.wikimedia.org/wiki/File:Adobe_Premiere_Pro_CS4_icon.png)\n\n(圖片來源：[Wikimedia](http://commons.wikimedia.org/wiki/File:Adobe_Premiere_Pro_CS4_icon.png), CC Licensed)\n\n在網路上看到一篇關於Premiere Pro CS4效率低落的文章，主要是很多人都發現在使用Premiere Pro CS4的時候，預覽畫面非常的緩慢、跳格、Lag，無法正常剪輯。這篇文章點出了六種發生這種情況的可能性，我把這篇文章簡單做個摘要給大家參考看看！畢竟Premiere Pro是市面上數一數二普遍且強大的剪輯軟體(與Final Cut Pro各據一方)，新手在使用的時候應該都會有這種問題。(上圖是目前最新版Premiere Pro CS5的logo)\n\n可能造成預覽畫面lag的幾個原因：\n\n#### 1\\. 降低Frame Rate\n\n在開啟新的Sequence的時候，將每秒格數(Frame Rate)調到較低的數值，大部分來說是29或30，假如調到23的話便能降低系統所需讀取的格數，避免lag的情況發生。\n\n#### 2\\. 確認硬體設備夠力\n\n確認硬體規格有符合Premiere Pro的最低需求，甚至要再高一些。因為Premiere Pro就像一台坦克，不像Movie Maker、iMovie、Sony Vegas等等較輕便的軟體，Premiere Pro較吃資源，如果硬體規格超過得不夠多，在編輯720p或1080p的影片時，就會明顯出現lag現象。<a onclick=\"window.open(&quot;http://www.adobe.com/products/premiere/tech-specs.html&quot;)\">硬體需求規格表</a>\n\n#### 3\\. 調整Scratch Disk的磁碟區\n\n在每次剪輯開始要開啟專案(Project)的時候，會需要調整該專案的暫存區(scratch disk)，預設都是在C槽，但因為C槽是主要開機硬碟槽，Premiere在跑檔案的時候都在C槽中讀取，假如能夠將scratch disk移至D槽或其他非硬碟開機槽，便可以分散系統存取的空間，加速預覽的速度。\n\n#### 4\\. 確認檔案格式\n\nPremiere Pro支援的檔案格式可參見附表，如果不在附表上，便有很大的機率造成lag。其實就我自己的經驗，除了.avi、.mov等最普遍以及相容性最好的格式以外，其他的都有一定機率造成讀取很慢，因為除了編碼方式不同，也有其他潛在原因讓軟體多費工、甚至無法讀取。<a onclick=\"window.open(&quot;http://kb2.adobe.com/cps/405/kb405978.html&quot;)\">支援檔案格式表</a>\n\n#### 5\\. 調整預覽設定\n\n在預覽時，預覽視窗下方會有幾個設定可以調整，首先是正下方的百分比，假如百分比越小，代表輸出的畫面越小，電腦硬體的消耗就也越小，比較容易跑得順。另外是右下方有一個三原色的圖、叫做output的選項，點下去之後下面可以選擇draft quality，會降低畫面品質，但也會降低電腦硬體消耗。\n\n#### 6\\. 確認Premiere Pro是最新版本\n\nPremiere Pro有時會更新，建議在上方工具列的右邊點選Help→Updates，便可查看有無更新。\n\n假如上述方法都無法順利解決，還有一種土法煉鋼的方法是在每次要預覽的時候按下鍵盤上的Enter，他便會開始pre-render，像是AE的RAM Preview，等於先把選取區域內的影片先讀好，再一次播放。耗時間，但對於無法解決預覽問題的人未嘗不是個方法？希望大家都能剪接順利喔！\n\n<a onclick=\"window.open(&quot;http://www.designsbyjonathan.com/blog/for-those-experiencing-lag-in-adobe-premiere-pro-cs4&quot;)\">\n</a>", slug: "20110808-premiere-pro-cs4", category_id: 2, author_id: nil, display_date: "2011-08-08", is_public: true, video_embed: nil},
  {title: "穩定素材、影片 (stabilize footage)", content: "\n拍攝的時候，如果沒有使用腳架，難免影片都會晃到，偏偏有很多情況是必須將攝影機拿在手上拍攝的；就算後製處理，也未必完美。其實大家會想拍電影、短的，很多只是玩票性質，不會花個幾萬塊去承租整套設備，或是找專業人員來拍攝，有錢能使鬼推磨，沒錢就是自己來。我之前在拍攝、後製時也遇到不少這樣的問題，剛好最近有個心得，以下簡單就前製和後製兩個部份來分享一下我認為可行的穩定影片方法：\n\n#### 1\\. 前製：\n\n拍攝的時候，簡單分為定點拍攝和移動拍攝。定點拍攝的部分很簡單，不管是大型腳架、小型腳架，只要能找個地方讓腳架站著，定點拍攝便能做到徹底的使影片穩定不晃動，甚至可以在拍攝時調整焦距、zoom等等。至於移動拍攝，不管是輪子還是人的腳，在移動時難免會因為地板、人的協調性等等因素造成晃動。要解決這個問題，就必須倚靠器材，假如有資金和管道可以弄到35厘米的強大專業攝影機，想必再怎麼專業的器材應該也能弄到手。\n\n一套光是承租就需要不少錢的穩定設備，拍出來的效果當然驚人！如果不信，可參考一下<a onclick=\"window.open(&quot;http://www.youtube.com/watch?v=ZSJQgKaHdZ4&quot;)\">用以上設備拍攝出來的影片</a>，可以看出已經有專業電影的水準，完全穩定不搖晃。低成本則有低成本的做法，假如各位使用的是普通的錄影機(DV)或稍微需要一點資本的數位單眼(DSLR)，那不妨[上網搜尋「肩托架」](https://www.google.com.tw/#q=%E8%82%A9%E6%89%98%E6%9E%B6&amp;oq=%E8%82%A9%E6%89%98%E6%9E%B6&amp;gs_l=serp.3..0.1762.3651.10.3923.5.5.0.0.0.1.130.430.4j1.5.0...0.0.0..1c.4.15.serp.pXKaJ_AyvIU&amp;bav=on.2,or.r_cp.&amp;bvm=bv.47244034,d.aGc&amp;fp=543fd01eff5ed8d6&amp;biw=1280&amp;bih=675)，話說在台灣的設備器材店看過最便宜的是賣500元整，假如有興趣的可千萬別錯過，小巧輕便，雖然不太可能做到像專業器材那樣的威力，但我想70-80分是一定有的。\n\n另外，如果有辦法，也建議大家可以用手邊的材料來製作，或是找五金行的老闆來做。因為只要有點理工常識，是有可能在跟五金行老闆溝通的情況下製作出來的，包括Dolly Shot的軌道、輪軸等等。不過DIY不是本篇重點，就不多討論。假如能夠在前製就將影片穩定好，後製便會輕鬆很多。\n\n#### 2\\. 後製：\n\n後製部分的穩定比前製麻煩一些，分為專門穩定素材的軟體、剪接軟體、特效軟體，剪接軟體包括Premiere Pro、Final Cut Pro、Vegas Pro等等(以下簡稱Premiere、Final Cut、Vegas)。特效軟體當然就是After Effects。專門穩定素材的軟體非常稀少，因為大部分的穩定功能都會設計成外掛，套入剪接軟體或特效軟體中，少數幾個軟體例如<a onclick=\"window.open(&quot;http://www.prodad.com/home/products/videostabilizing/300391667,l-us.xhtml&quot;)\">Mercalli</a>卻又不太便宜。而在沒有使用任何外掛的情況下，能夠穩定素材的軟體並不多，上列中的軟體只有Vegas，在Vegas裡頭操作就非常簡單，在素材拖到時間軸上以後，在該段素材上面點滑鼠右鍵，就會有一個Stabilize Media，點下去，調整數值，按OK，就大功告成。至於其他剪接軟體，只能請各位上網搜尋外掛了，諸位商人為了宣傳自己家的外掛應該是不遺餘力。\n\n最後講到After Effects，裡頭穩定的功能就千變萬化，雖然只有一個Stabilize Motion的功能可選，但可以配合控制碼，做出更多變化，例如在Video Copilot上便有<a onclick=\"window.open(&quot;http://www.videocopilot.net/tutorials/stabilize_shaky_footage/&quot;)\">基礎和進階的穩定素材方法</a>，各位可以參考看看。After Effects麻煩的地方在於，假如我有20段素材需要穩定，總不能一個個丟到After Effects裡頭去穩定，然後再輸出、再丟進去、再輸出。又因為它輸出的檔案極大、又有當機等風險，所以輸出的時候要在電腦旁邊照顧，才會麻煩。至於假如沒有其他方法，必須使用After Effects輸出的朋友，個人建議把所有素材全部丟進去，個別弄成混合圖層(Composition)，穩定以後，個別丟到Render Queue裡頭，然後再全部一次輸出，這樣去睡個午覺起來，就完成了！\n\n當然，這一兩年來64位元的電腦已經越來越普及，意思是說Adobe CS5以後的產品也越來越多人在使用，在Production Premium CS5.5當中，After Effects和Premiere有比較好的整合功能，也內建了一個強大的外掛Warp Stabilizer，這個外掛可以免除先前After Effects裡頭麻煩的Stabilize Motion功能，還要設定幾個追蹤點等等的，這個外掛只需要調整一兩個數值，便會自動穩定影片。更重要的是，就算是在Premiere當中編輯影片，也可以直接在裡頭執行After Effects並套用至當下編輯的影片當中，不需在After Effexts輸出以後再匯入到Premiere。\n(關於Warp Stabilizer的資訊感謝Facebook板友Eason Liu補充)\n\n穩定素材在製作影片方面占有一席之地，希望之後能推出個教學更深入討論，也希望這篇文章對大家有幫助喔！", slug: "20110906-stabilize-footage", category_id: 2, author_id: nil, display_date: "2011-09-06", is_public: true, video_embed: nil},
  {title: "AE外掛(Plug-in)&模組(Presets)安裝常見問題", content: "\n![](http://www.motion-express.com/wp-content/uploads/2011/09/123-0000000.jpg)\n\n雖然After Effects(AE)安裝外掛的方法在各大論壇、教學網站都有說明，但剛好不斷有網站上的朋友來問安裝外掛和模組的方法，乾脆來寫篇完整的安裝介紹，並附上一些常見問題。(肥水不落外人田嘛...(小聲))本文章分四部分，前兩部分介紹安裝方法，後兩部分彙整常見問題。\n</br>\n===================================================================\n\n### 一、外掛(Plug-in)安裝方法\n\n外掛有分兩種，一種是免安裝，一種則需要安裝。免安裝的外掛非常簡單，下載下來以後，會看到一個副檔名為.aex的檔案(例如Twitch.aex或是Particle World.aex)，那個檔案就是外掛本體，直接將它放到After Effects目錄底下的Plug-in裡頭，就ok了！目錄預設應該是安裝在C槽，有更改到D、E、F槽的朋友就去安裝的磁碟找吧。安裝目錄如圖一。\n\n<a onclick=window.open(\"http://www.motion-express.com/wp-content/uploads/2011/09/1.jpg\")>![](http://www.motion-express.com/wp-content/uploads/2011/09/1-300x40.jpg \"外掛安裝目錄\")</a>(圖一：外掛安裝目錄範例，點圖放大)\n\n另一種是需要安裝的外掛，這類型的外掛下載之後，會有一個安裝擋，安裝時通常會需要輸入密碼或驗證金鑰。基本上整個流程應該是非常簡易的，一直按OK或Accept就可以完成。接著再打開After Effects，該外掛就會出現在Effects裡頭了！\n</br>\n=====================================================================\n\n### 二、模組(Presets)安裝方法\n\n模組安裝只有一種，而且方法比安裝外掛更快速簡單。下載了模組以後，如果需要解壓縮的話就解壓縮，接著找到一個副檔名為.ffx的檔案(或是一整批這樣的檔案)，將這些檔案全部送到After Effects目錄底下的Presets裡頭，順便將它們收在一個資料夾中，方便整理。接著打開After Effects，就完成啦！安裝目錄如圖二。\n\n<a onclick=window.open(\"http://www.motion-express.com/wp-content/uploads/2011/09/2.jpg\")>![](http://www.motion-express.com/wp-content/uploads/2011/09/2-300x35.jpg \"模組安裝目錄\")</a>(圖二：模組安裝目錄範例，點圖放大)\n\n</br>\n====================================================================\n\n### 三、外掛安裝常見問題\n\n如果外掛安裝以後，沒有出現在After Effects裡頭，或整個安裝失敗卻不知道原因，請按以下步驟檢查。\n\n#### 1\\. 若為安裝版，確認安裝程式有執行完畢，並且準確的安裝在自己所想要執行的版本目錄底下\n\n在安裝過程中，常常會忽略掉安裝目錄，假如我們電腦裡頭同時灌有After Effects 7、CS3、CS4三種版本，那對外掛安裝程式來說，安裝在哪裡是大同小異的。假如我們今天要用CS4版本執行，那要確認在執行安裝程式時是安裝在CS4版本的目錄底下。\n\n#### 2\\. 確認該外掛與AE的相容性\n\n並非所有外掛都能對應到所有After Effects的版本，尤其有些外掛商是針對所有影音編輯軟體來設計外掛，便不會獨厚AE。只要是有在經營外掛的網站，通常都會提供網頁說明該外掛的相容性，若發現安裝失敗，請先來此查看。例如Redgiant公司的外掛Trapcode Particular，網頁上列了一張表，說明只有對應的平台和版本才能夠安裝該外掛，請見下圖。\n\n<a onclick=window.open(\"http://www.motion-express.com/wp-content/uploads/2011/09/3.jpg\")>![](http://www.motion-express.com/wp-content/uploads/2011/09/3-300x244.jpg \"Trapcode Particular相容性圖表\")</a>(圖三：模組安裝目錄範例，點圖放大)\n\n由上圖可知，雖然相容性已經很好，但假如身邊只有After Effects 7，就不用傻傻的來買這個外掛了，硬要安裝的話一定失敗。\n\n#### 3\\. 若為免安裝版，請確認版本、位元系統相容性\n\n直接安裝版有一個壞處是通常安裝失敗的時候都不知道為何失敗。在安裝前記得要確認版本及系統，例如Video Copilot公司的Sure Target外掛，下載下來以後，打開，會有以下畫面：\n\n<a onclick=window.open(\"http://www.motion-express.com/wp-content/uploads/2011/09/4.jpg\")>![](http://www.motion-express.com/wp-content/uploads/2011/09/4-300x138.jpg \"Sure Target外掛目錄\")</a>(圖四：Sure Target外掛資料夾目錄，點圖放大)\n\n在畫面中可以看到，如果執行的是Windows系統，卻硬要把Mac系統的外掛丟進去，這是絕對不會成功的。不過有一件事情的確容易搞混：我的朋友用64位元電腦，但使用的是CS4版本(32位元)，因此他到底該選擇灌32bit還是64bit版本的外掛？答案是看軟體，假如我們用的是CS5，那就灌64位元版本，但我朋友的情況確應該灌32位元，AE當中才會顯示。\n\n#### 4\\. 如果依然無解，請到官方網站上尋找support、討論區等針對不同情況的討論，再者便是使用google搜尋\n</br>\n================================================================================\n<h3>四、模組安裝常見問題\n\n若時模組安裝完成以後卻不見影子，或是在套用時顯示失敗卻不知原因，則可以依照下列步驟檢查。\n\n#### 1\\. 檔案複製完成以後，需重新開啟After Effects\n\n我們有時會邊使用AE邊安裝模組，但AE是在開啟軟體的時候才會去抓模組的資料，或是要在模組的面板上按滑鼠右鍵，選擇Refresh，才會重抓資料。因此，如果邊使用AE邊安裝模組，一定要重新開始軟體，或是執行refresh，新安裝的模組才會出現。\n\n#### 2\\. 確認模組的相容性\n\n大家都知道如果使用After Effects CS5然後存檔(.aep)，是沒辦法用CS4或更舊的版本來開啟，這個道理於模組上亦同，只要是新版本的AE製作出來的模組，就無法用舊版本的來開啟。因此若執行失敗，可以確認一下該模組是否向下相容(通常是不行)。\n</br>\n=====================================================================\n希望以上資訊對大家有幫助喔！如果還有遇到其他不可解的情況歡迎發問~", slug: "20110924-ae-plugins-and-presets-install", category_id: 2, author_id: nil, display_date: "2011-09-24", is_public: true, video_embed: nil},
  {title: "線上刷卡沒那麼難，大家都有能力申請信用卡", content: "\n&nbsp;\n\n[![](http://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Credit-cards.jpg/800px-Credit-cards.jpg)](http://commons.wikimedia.org/wiki/File:Credit-cards.jpg)\n\n(圖片來源：[Wikimedia](http://commons.wikimedia.org/wiki/File:Credit-cards.jpg))\n\n有時跟朋友聊到線上購物的事情，發現有些人對於「線上刷卡」了解得很少，更有一部分人認為自己只是學生，沒有辦法申請到信用卡，所以不可能使用線上刷卡這個功能。也因此衍伸出很多使用盜版的問題。\n\n### 這個觀念完完全全的需要改正！\n\n在這個人手一卡的時代，**不管是學生抑或是無收入的自由業都可以擁有信用卡的！**只要一卡在手，不管是我們先前討論過的素材或外掛，甚至是軟體本身，都可以在線上直接購買、下載。當然，只把討論侷限在這會有點狹窄，因為就像是目前很紅的iTunes Store和其他網路商店，都可以用線上刷卡購買app、影片、音樂，很方便！\n\n不過，這裡要講的並非一般常見的Master Card，而是VISA卡。為何要強調呢？以下幾點是VISA卡的特色：\n\n### 1\\. 使用上相當安全\n\n你有多少錢，才能花多少錢，假如我今天只有100元，買一個120元的東西，刷卡就會失敗，等於你不可能會把卡刷爆。不像Master Card採用預支的方式，等真的要收錢時才發現錢付不出來，冏了。\n\n### 2\\. 辦卡容易\n\nVISA卡只要在該銀行有存款，且年紀有到，就可以申辦，非常方便。相對來說，申辦Master Card需要審核個人目前的信用額度、收入情況等等，大多數沒有收入的學生、自由業不太可能通過審核。我個人先前是使用華南銀行的VISA卡，可以<a onclick=\"window.open(&quot;http://www.hncb.com.tw/credit/card9visa.shtml&quot;)\">點這裡看一下它的申請流程和申請限制</a>，基本上只要拿著印章、要存的錢、身分證，就可以去開戶、辦卡。跟辦Master Card相比真是簡單到家。\n\n### 額外補充注意事項\n\n並非所有銀行的VISA卡都可以進行網路刷卡，建議先搜尋一下資料，看看有哪些銀行有提供此類服務。截自目前為止，能夠線上刷卡的VISA卡為華南、中國信託、台新三家，永豐的我之前有用，從2012年開始就無法使用線上刷卡了。<a onclick=\"window.open(&quot;http://www.eslife.ws/382&quot;)\">(先前搜尋的參考資料)</a>\n\n為何要在這裡跟大家提供這個訊息呢？主要是因為真的有太多人用偏方，從不同管道挖來盜版使用，多到有點刺眼。我懂像3Ds MAX那樣動輒台幣十多萬的軟體沒有辦法讓人負荷，但像智慧型手機的app，有些頂多就是1塊錢美金，大約30元台幣，連這種錢也要省，這樣對設計程式的人來說真的很傷。像我慢慢有開始做設計類的事情以後，才覺得設計真的很辛苦！有這樣方便的線上刷卡方法來鼓勵、支持，提供服務的人也會更樂意來提供更好的產品、服務，何樂而不為呢？大家繼續加油吧！", slug: "20120901-credit-card-application", category_id: 1, author_id: nil, display_date: "2012-09-01", is_public: true, video_embed: nil},
  {title: "想公開使用圖片又怕受罰嗎？授權圖片搜尋引擎「台灣創用CC」", content: "\n[![](https://upload.wikimedia.org/wikipedia/commons/2/2e/Creative_Commons_Lantern.jpg)](https://commons.wikimedia.org/wiki/File:Creative_Commons_Lantern.jpg)\n\n#### 今天要介紹的是專門蒐尋授權圖片的搜尋引擎「台灣創用CC」，假如有需要在公開的商業場合使用圖片，最好還是找有授權的，一方面是尊重創作者，一方面是少惹禍上身！\n\n自從架網站開始，版權對我來說越來越重要，看到有些人因為少根筋，拿有版權的東西到處亂用，導致大禍臨頭。可能天生也有點怕死，能安全一點則多安全一點。Creative Commons看到我們這些渺小又沒錢買版權的使用者，整天在夾縫裡求生存，於是佛心來著推動了一個計畫，找尋許多資料庫及創作者，讓他們將自己的作品或資料授權，讓其他創作者能夠使用。大家對他們的歷史應該是完全沒有興趣，沒關係，我們直接跳到重點。[台灣版的網站](http://creativecommons.tw/)是中文使用者的一個契機，幫助我們減少許多在法律邊緣遊走的機會。\n\n使用方法非常簡單，進入[搜尋頁面](http://creativecommons.tw/search)，雖然字很多，但要注意的地方只有兩個，第一是選擇搜尋引擎，第二個是選擇授權方式，如下圖。\n\n[![](http://www.motion-express.com/wp-content/uploads/2012/11/123-300x105.jpg)](http://www.motion-express.com/wp-content/uploads/2012/11/123.jpg)\n\n這個部分應該相當簡單，假如我們使用AE或PS來改圖，一定就要將「允許改作」打勾，而如果是要拿來營利，例如說廠商記者會的開頭影片，或是廣告，那就必須在「允許商業性使用」上面打勾。首次搜尋，按下去，期待出現的結果。\n\n但是...\n\n[![](http://farm4.staticflickr.com/3336/3316393566_938ff22968.jpg)](http://www.flickr.com/photos/heiressanj/3316393566/sizes/m/in/photostream/)\n\n有授權的圖片真的是他媽的有夠少！\n\n沒關係，讓我們平心靜氣的來看待這件事情。就是因為授權圖片這麼少，大家才會慢慢了解我們平常根本就是一群在法律邊緣游走的危險人物，只要這些廠商或作者願意，隨便都可以靠法律途徑來撈我們一筆。但光用這些鳥圖片也太少了吧！沒關係，我也是這樣過來的，多花一點心思來搜尋吧，假如要找一張很驚嚇的表情圖，像上面那張，就得搜尋「surprised」、「amazed」、「fuck」等等奇奇怪怪的詞都拿來試試。只要想到：這張圖一放上來，是絕對不用怕的。有這樣的動力，就更願意來搜尋啦！\n\n總之，既然Creative Commons計畫提供了我們這麼方便能夠避險的一個方式，怎麼能辜負他們的用心呢？是否！\n\n圖片來源：[heiressanj](http://www.flickr.com/photos/heiressanj/3316393566/sizes/m/in/photostream/)\n圖片來源：[Wikimedia](https://commons.wikimedia.org/wiki/File:Creative_Commons_Lantern.jpg), CC Licensed", slug: "20121127-creative-commons", category_id: 2, author_id: nil, display_date: "2012-11-27", is_public: true, video_embed: nil},
  {title: "為什麼AE輸出的檔案大小都大到爆炸？", content: "\n![](http://www.motion-express.com/wp-content/uploads/2013/06/US_Navy_020712-N-5471P-010_EOD_teams_detonate_expired_ordnance_in_the_Kuwaiti_desert-300x214.jpg)\n\n# Q：為甚麼影片輸出(render)以後，檔案會這麼大？\n\n<span style=\"font-size: 14px;\">要先提醒，After Effects是一套「後製軟體」而非「剪輯軟體」，意思是說輸出的檔案並非直接拿來播放的，而目的是要丟到其他剪輯軟體例如Premiere、Edius、Final Cut Pro來處理的。</span>\n\n<span style=\"font-size: 14px;\">所以，在釐清這點之後，我們知道AE輸出的檔案，基本上都是「品質優先」，不特別注意的情況下檔案通常都會非常大。再怎樣短的影片，都會動輒100Mb以上，甚至一段1分鐘的影片，就可以到達10Gb以上。</span>\n\n<span style=\"font-size: 14px;\">假如各位珍惜硬碟空間，以下提供三種解決方法：</span>\n\n## <span style=\"color: #ff0000;\">A. 轉QuickTime</span>\n\n<span style=\"font-size: 14px;\">設定輸出(render)時，調整選項如下圖，點圖可放大。</span>\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/06/圖4-300x234.png \"QuickTime設定\")](http://www.motion-express.com/wp-content/uploads/2013/06/圖4.png)\n\n<span style=\"font-size: 14px;\">QuickTime格式預設的Format是「動畫」，畫質好，所佔空間相對大。但若調整成「照片」，所佔的空間會大幅降低，而畫質幾乎可以維持相同水準。當然，眼睛利的人會看得出有一點點差距，這就要看個人接受度的問題了。根據業界朋友的說法：「大部分顧客都看不出來」(奸笑)。</span>\n\n## <span style=\"color: #ff0000;\">B. 轉H.264</span>\n\n<span style=\"font-size: 14px;\">第二個方法是輸出成mp4檔，速度最快，檔案也最小，甚至還可以自己調整！同上，輸出(render)時設定調整如下，點圖可放大。</span>\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/06/圖說11-300x249.png \"H.264設定\")](http://www.motion-express.com/wp-content/uploads/2013/06/圖說11.png)\n\n<span style=\"font-size: 14px;\">H.264亦即mp4格式，號稱攜帶超方便，壓縮率超高的格式。不講廢話，總之，照順序設定之後，在第4點的地方可以調整位元率(bitrate)，講直接一點，就是你願意在每秒內投入多少容量，數值越高，畫質就越好，相對的檔案就越大。最低的數值，可以把檔案大小壓到極致，但影像品質就也變成極致的爛。建議調整到三分之二或調滿都可，看願意接受的畫質是多少。</span>\n\n## <span style=\"color: #ff0000;\">C. 轉檔</span>\n\n<span style=\"font-size: 14px;\">有一種情況，會把以上兩種解決方法都打槍，**就是你接下來要用的剪輯軟體對於mov檔和mp4檔都不相容**！格式相容問題在現在軟體眾多的情況下，變得非常重要。因此，假如你發現使用的剪輯軟體，或其他接下來要把影片匯入的軟體真是挑剔到比大家對藝人的身材還挑剔的話，那就必須考慮直接使用AVI格式輸出了。假如AVI格式還不相容，對不起，那就不是AE的問題了。</span>\n\n\n\n<span style=\"font-size: 14px;\">準備好硬碟空間，因為這段是省不掉的。AVI格式輸出完成以後，就挑一個好用的轉檔軟體吧！Mediacoder、MeGUI、Adobe Media Encoder都不錯。</span>\n\n<span style=\"font-size: 14px;\">把AE輸出的影片丟到轉檔軟體，接著要測試你接下來要匯入的軟體到底適用甚麼樣的格式，但既然都走到這一步了，就AVI轉AVI吧，省點時間。通常這樣的轉檔，能確實把AVI格式的檔案縮小一些，不至於這麼佔硬碟空間。</span>\n\n<span style=\"font-size: 14px;\">最後提醒，</span>**假如硬碟空間小，建議在AE當中「分段輸出」**<span style=\"font-size: 14px;\">，也就是先輸出前20秒，接著轉檔；然後再輸出20秒，再轉檔。這樣的過程雖然繁複，但可以省下不少空間，最後再用剪輯軟體將所有影片片段合起來即可！</span>", slug: "20130625-ae-render-size", category_id: 3, author_id: nil, display_date: "2013-06-25", is_public: true, video_embed: nil},
  {title: "After Effects (AE) 記憶體不足？檢查一下發生甚麼事", content: "\n![](http://www.motion-express.com/wp-content/uploads/2013/07/Tired1-300x207.jpg)\n\n近年來電腦記憶體大小不斷攀升，價格也越來越便宜。但有時候用AE還是會突然跳出來一些莫名其妙的訊息，例如：\n\n\n\n1.  Unable to allocate enough memory to render the current frame\n2.  Unable to allocate … MB of memory\n3.  Image buffers of size … exceed internal limit\n4.  Memory allocation of … GB exceeds internal limits\n5.  其他莫名其妙的訊息，接著軟體強制關閉\n**以上訊息****90%****的造成原因就是因為電腦記憶體不足！**關於這個問題，Adobe官方好心的提供了非常鉅細靡遺的一段說明，可以直接到[官方網站](http://helpx.adobe.com/after-effects/using/memory-storage1.html)上參考。不過假如真的大家這麼有耐性，英文也這麼無障礙，那真的就不用再讀這篇文章了，直接找官方解釋最有用。\n\n廢話不多說，花了點時間整合個人經驗和多方資訊，給大家幾個檢查和排除障礙的方法。可以採取一步一步檢查的方式，假如A步驟完成以後發現恢復正常，就可以開香檳直接回AE進行作業，其他的大概看看就好。\n\n## <span style=\"color: #ff0000;\">A 清理RAM Cache</span>\n\nWindows設定路徑：edit &gt; purge &gt; all\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/07/purge-300x258.png \"purge\")](http://www.motion-express.com/wp-content/uploads/2013/07/purge.png)\n\nAfter Effects總共使用三種暫存方式(Cache)：RAM、Disk、Media，分別囤積不同的資料。此步驟可將所有在After Effects裡面使用記憶體(RAM)囤積的影格、操作步驟、垃圾全部刪掉，一切從頭開始。這時候再進行RAM Preview或render，會比較順利。\n\n要檢查RAM Cache是不是不夠了，最簡單的方法就是進行預覽，預覽時會把處理好的影格丟到RAM Cache裡面儲存起來。假如不夠，一種是會直接開始播放，讓你會覺得有點錯愕，想說「干，不是還沒處理完嗎？」另一種方式是RAM會自動把舊的影格刪除，因此假如整段影片有300格，處理到250格時，原本已經處理好的前20格卻被吃掉了，這時候就知道是該purge一下的時候了。\n\n## <span style=\"color: #ff0000;\">B 清理Disk Cache及Media Cache</span>\n\nWindows設定路徑： Edit &gt; Preferences &gt; Media &amp; Disk Cache\n\nMac設定路徑：After Effects &gt; Preferences &gt; Media &amp; Disk Cache\n\n除了RAM Cache以外，另外兩種就照下圖的位置，按下按鈕，便會清理乾淨。\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/07/Disk-Cache-300x212.png \"清理Disk Cache\")](http://www.motion-express.com/wp-content/uploads/2013/07/Disk-Cache.png)\n\nDisk Cache主要是按空白鍵預覽時使用，跟按數字鍵盤上0的RAM preview不同，預覽時，AE會將處理好的影格丟到Disk Cache裡頭，之後若再進行空白鍵預覽，系統會自動判斷是要重新處理影格還是說從Disk Cache裡面抓回來比較快。哪個快，系統就會用那個方法。RAM Preview則純粹使用RAM。聽起來蠻可怕的，**因為Disk Cache並不會自動清理，所以裡頭堆滿了自古到今你的電腦裡所有你曾經用空白鍵瀏覽而儲存起來的影格。沒事的話清一下吧！**\n\nMedia Cache則是匯入影片時，有些格式讓AE處理起來會有點吃力，所以設計人員設計了這個玩意兒，讓例如MPEG檔轉成.mpgindex檔，讓AE可以快速讀取，這些檔案一樣會轉檔之後放在硬碟裡，沒事的話可以清理一下。不過要注意，假如A檔案有一份專門給AE讀取用的.mpegindex檔，而你正在使用A檔案，則Media Cache裡面的A檔案轉檔就不會被刪掉；必須由你手動進入Media Cache資料夾裡面去刪。\n\n補充一下，遇到“unable to allocate enough memory to render the current frame”訊息時個人經驗還有一種狀況，就是匯入大型圖片，或是2K以上畫質的影片時，電腦有時處理過大的composition會無能為力，因此顯示這個訊息。**建議用繪圖軟體或轉檔軟體將照片或影片轉成較小的規格，這樣比較讓電腦有喘息的空間**。\n\n## <span style=\"color: #ff0000;\">C設定多重運算</span>\n\nWindows設定路徑： Edit &gt; Preferences &gt; Memory &amp; Multiprocessing\n\nMac設定路徑：After Effects &gt; Preferences &gt; Memory &amp; Multiprocessing\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/07/CS4-Memory-300x231.png \"CS4多重運算調整\")](http://www.motion-express.com/wp-content/uploads/2013/07/CS4-Memory.png)\n\nCS4版本之設定圖\n\n如果以上兩個方法都無法解決，那試著來調整一下運算方式。若你是64 bit作業系統，那跟著上圖的設定進入設定視窗以後，依下圖a紅框位置勾選，b和c的紅框代表的是給其他軟體使用的記憶體大小，如果你真的很單一專情的在輸出影片，就把這兩個地方的數值調低吧。\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/07/CS5-Memory-300x213.png \"CS5多重運算設定\")](http://www.motion-express.com/wp-content/uploads/2013/07/CS5-Memory.png)\n\nCS5以上版本之設定圖\n\nCS5以上的版本個人認為不太會遇到記憶體的問題，但如果很不幸的遇到了，一樣可照上圖方式處理，勾選a紅框位置，b、c調低，d可以見仁見智，因為調高不一定會有夠多的核心來幫忙輸出，因此建議抓個大概就好，或是不調。\n\n如果你使用的是32 bit的作業系統，可能會有點尷尬，因為支援的記憶體同樣最多只有4 GB，多重運算不管怎麼多重，最終還是要過記憶體這關，因此…建議找方法把作業系統換成64 bit，其他的就好談了。\n\n多重運算的原理是電腦會使用背景資源來協助運算，也就是說，雖然After Effects CS4只能夠使用4 GB的記憶體，但背景運算仍然能夠進行。例如Windows作業系統在輸出過程中打開工作管理員，就能夠看到有許多AfterFX.exe正在跑。每一個核心都會進行各自的運算，也有各自取用記憶體的上限。\n\n若用以上方法，可檢查在輸出時有沒有加快速度。\n\n## <span style=\"color: #ff0000;\">D更新軟體</span>\n\nHelp &gt; Updates\n\n檢查更新，看有沒有更新可以加快運算速度。如果你是老老實實的剛開始使用After Effects，**不管哪個版本，通常都會有更新可以使用**。更新之後可以檢查看看速度有沒有變快。\n\n## <span style=\"color: #ff0000;\">E 檢查版本及記憶體</span>\n\n如果你是使用After Effects CS4以前的版本，速度勢必是比較慢。CS5以後的版本是以64bit運行，支援的記憶體最高可到192 GB，而CS4以前的版本只能到4GB，完全是天南地北的差距。如果行有餘力**，建議直接換成CS5以上的版本最實在。**\n\n最後，如果你習慣輸出很複雜的影片，包括很多圖層、很多吃資源的特效、很多不同硬碟來的檔案、邊輸出AE還要邊玩遊戲等等，那讓電腦插著8G、12G以上的記憶體可以幫助不少。\n\n以上五種方法供大家參考看看！希望大家的AE都跑得順暢喔！", slug: "20130701-after-effects-ram-and-memory", category_id: 3, author_id: nil, display_date: "2013-07-01", is_public: true, video_embed: nil},
  {title: "每個專案都要用同一種效果？來用presets省點事！", content: "\n![](http://www.motion-express.com/wp-content/uploads/2013/07/T14_Main.jpg)\n\n**本篇教學有<span style=\"color: #ff0000;\">[<span style=\"color: #ff0000;\">影片教學</span>](http://www.motion-express.com/?portfolio=14-%E8%A3%BD%E4%BD%9C%E9%A0%90%E8%A8%AD%E6%A8%A1%E7%B5%84)</span>，有興趣的朋友可直接前往觀賞！**\n\n\n\n先前在《文字模組特效入門》和《鎖定3D目標》兩個教學裡面，有使用預設模組(presets)這個東西，也就是別人已經設定好的特效和關鍵影格，我們直接拿來使用。\n\n如果我們有需要自行製作presets呢？如果我們有100個專案要處理，要在不同混合圖層(composition)和圖層上設置同樣的效果、同樣的設定，難道要調整個100次嗎？對於這種事情還不知道怎麼解決的朋友，答案就是靠presets來幫你省一點時間啦！**簡單來說，Presets是一種工作方法，讓你先設定好效果，接著複製到所有適用的圖層上面。**\n\n不同於複製貼上，presets等於先幫你把idea儲存起來，等到要用的時候直接套用，不必再回頭去找原本的專案和圖層。\n\n在此之前，由於網路上翻譯眾多，因此要澄清一下，不管各位是講模板、預設模板、預設集、預製特效、預製模組等等的，只要你說的是presets，就是這篇文章的重點啦！\n\n不囉嗦，直接用圖解最快~\n\n=====================================================\n\n### 步驟一\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n1.jpg \"步驟1\")\n\n=====================================================\n\n### 步驟二\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n2.jpg \"步驟2\")\n\n====================================================\n\n### 步驟三\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n3.jpg \"步驟3\")\n\n================================================\n\n### 步驟四\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n3-1.jpg \"步驟4\")\n\n===================================================\n\n### 步驟五\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/07/n4.jpg \"步驟5\")](http://www.motion-express.com/wp-content/uploads/2013/07/n4.jpg)\n\n==================================================\n\n### 步驟六\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n5.jpg \"步驟6\")\n\n==============================================\n\n### 步驟七\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/n6.jpg \"步驟7\")\n\n=============================================\n\n最後，請讓我用下圖來為本篇文章收尾，解釋presets神奇的威力。\n\n![](http://www.motion-express.com/wp-content/uploads/2013/07/大樓_1.gif)\n\n**本篇教學有<span style=\"color: #ff0000;\">[<span style=\"color: #ff0000;\">影片教學</span>](http://www.motion-express.com/?portfolio=14-%E8%A3%BD%E4%BD%9C%E9%A0%90%E8%A8%AD%E6%A8%A1%E7%B5%84)</span>，有興趣的朋友可直接前往觀賞！**", slug: "20130714-making-presets", category_id: 3, author_id: nil, display_date: "2013-07-14", is_public: true, video_embed: nil},
  {title: "網站更新，並推出《presets製作》、《鬼影幢幢》教學", content: "\n[![T15](http://www.motion-express.com/wp-content/uploads/2013/07/T15.jpg)](http://www.motion-express.com/?portfolio=15-%E9%AC%BC%E5%BD%B1%E5%B9%A2%E5%B9%A2)\n\n又到了歡樂的網站更新時間，歷時四天，終於全部完成，外加推出兩個新的教學，歡迎大家至教學系列頁面享用。\n\n\n\n跟上次一樣，我不是甚麼架站大師，網站更新都是一步一步來，所以有些人可能目睹了整個裝潢的過程，有點狼狽不堪。現在網站已經比較現代化一點了，簡單解釋一下幾個重大更新點：\n\n**1.網站增加中文名稱「特快車」，原名「Motion Express」依然使用**\n\n**2.網站變白色 (廢話誰看不出來)**\n\n**3.多了比較有條理的「<span style=\"color: #0000ff;\">[<span style=\"color: #0000ff;\">作品集</span>](http://www.motion-express.com/?page_id=2589)</span>」**\n\n**4.<span style=\"color: #0000ff;\">[<span style=\"color: #0000ff;\">綜合教學系列</span>](http://www.motion-express.com/?page_id=2531)</span>的排版比較有條理**\n\n**5.<span style=\"color: #0000ff;\">[<span style=\"color: #0000ff;\">基礎教學</span>](http://www.motion-express.com/?page_id=2615)</span>系列多了一篇文章，幫助入門者快速了解**\n\n請大家繼續支持Motion Express...啊不，現在主要要用中文名稱：<span style=\"color: #0000ff;\">[<span style=\"color: #0000ff;\">特快車</span>](https://www.facebook.com/motionex)</span>！還有記得去看<span style=\"color: #0000ff;\">[<span style=\"color: #0000ff;\">新的教學</span>](http://www.motion-express.com/?page_id=2531)</span>喔啾咪！", slug: "20130721-blog-update-making-presets", category_id: 1, author_id: nil, display_date: "2013-07-21", is_public: true, video_embed: nil},
  {title: "iPhone 快速影片剪輯app【VideoBite】", content: "\n[![Adobe-VideoBite-0-560x284](http://www.motion-express.com/wp-content/uploads/2013/07/Adobe-VideoBite-0-560x284.png)](http://www.motion-express.com/wp-content/uploads/2013/07/Adobe-VideoBite-0-560x284.png)\n\n今天要介紹一個iPhone上的影片編輯app，叫做【VideoBite】，免費，剪輯快速，推薦給大家玩玩看。功能非常陽春，簡單來說就是將不同影片剪在一起，中間加上簡單的過場效果，前面加上標題，結束。對於要求趕時間，在公車捷運上快速剪影片的朋友應該是相當好用！\n\n\n\n這款app強調的特色是：<span style=\"color: #ff0000;\">**留住最美的瞬間**</span>。因此，這款app剪輯時，不是一次匯入一整段影片，而是**自己把想要的片段挑選出來**，這樣的概念跟一般的影片剪輯軟體有甚麼不同呢？看了教學就知道！\n\n首先，先提供給喜歡影片教學的朋友一段影片教學，直接看影片最快啦！\n\n<iframe src=\"//www.youtube.com/embed/2wek9PiHRx8?rel=0\" height=\"360\" width=\"640\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n\n如果你是習慣閱讀文字教學的人，以下是圖文教學。\n\n## 1.進入app主畫面是長這樣，會從你的相片裡面抓影片出來。\n\n![1](http://www.motion-express.com/wp-content/uploads/2013/07/1.png)](http://www.motion-express.com/wp-content/uploads/2013/07/1.png)\n\n## 2.選擇你要剪的素材\n\n這個app最特別的地方就在於，素材片段是要用選的，不是一整段一起剪輯的。進入選擇畫面以後甚麼都還沒選，這時要先找到要選擇的片段。中間可以左右拖移時間軸。\n\n## [ ![2-1](http://www.motion-express.com/wp-content/uploads/2013/07/2-1.png)](http://www.motion-express.com/wp-content/uploads/2013/07/2-1.png)\n\n## 3\\. 找到你要的片段\n\n上方有時間軸指標，接著按下右下角的愛心圖案，再按播放，開始選擇要加入剪輯的段落。\n\n![2-2](http://www.motion-express.com/wp-content/uploads/2013/07/2-2.png)](http://www.motion-express.com/wp-content/uploads/2013/07/2-2.png)\n\n## 4\\. 選好以後可以再進行微調，也可以取消。\n\n![3](http://www.motion-express.com/wp-content/uploads/2013/07/3.png)](http://www.motion-express.com/wp-content/uploads/2013/07/3.png)\n\n## 5.選擇完成按「Back」\n\n這時在主畫面就會看到已經選取完成的片段右下方有打勾。\n\n![4](http://www.motion-express.com/wp-content/uploads/2013/07/4.png)](http://www.motion-express.com/wp-content/uploads/2013/07/4.png)\n\n## 6\\. 以同樣操作方式選取其他要剪輯的片段。\n\n![5](http://www.motion-express.com/wp-content/uploads/2013/07/5.png)](http://www.motion-express.com/wp-content/uploads/2013/07/5.png)\n\n## 7\\. 如果要選取整段影片，可以直接點選該片段的右下角打勾。\n\n## [![6](http://www.motion-express.com/wp-content/uploads/2013/07/6.png)](http://www.motion-express.com/wp-content/uploads/2013/07/6.png)\n\n## 8\\. 進入編輯模式，\n\n素材挑選完成以後，點選右上角的編輯圖案，就會進入編輯模式。編輯模式可以建立標題、設定過場畫面。\n\n![7](http://www.motion-express.com/wp-content/uploads/2013/07/7.png)](http://www.motion-express.com/wp-content/uploads/2013/07/7.png)\n\n## 9\\. 標題只能加在影片的最前面，樣式很少，中英文皆可。\n\n## [![9](http://www.motion-express.com/wp-content/uploads/2013/07/9.png)](http://www.motion-express.com/wp-content/uploads/2013/07/9.png)\n\n## 10\\. 過場方式也是少得可憐，但就一個陽春剪輯軟體來說也蠻夠用了。\n\n## [![10](http://www.motion-express.com/wp-content/uploads/2013/07/10.png)](http://www.motion-express.com/wp-content/uploads/2013/07/10.png)\n\n##  11\\. 另外右邊按住拖曳，可以調整影片順序，左上角的Play All則可以預覽整個影片成果。\n\n![8](http://www.motion-express.com/wp-content/uploads/2013/07/8.png)](http://www.motion-express.com/wp-content/uploads/2013/07/8.png)\n\n## 12\\. 都完成以後，選擇最右上角的輸出圖案，可選擇三種輸出方式。\n\n![11](http://www.motion-express.com/wp-content/uploads/2013/07/11.png)](http://www.motion-express.com/wp-content/uploads/2013/07/11.png)\n\n輸出以後就完成啦！有沒有很神速呢？\n\n之所以這次這麼不務正業來做app教學，純粹是因為先前一套螢幕錄影軟體xRec上架了，我第一時間下載，沒想到過兩天立刻就下架，讓我覺得自己真是有賺到的感覺。立刻錄了一段操作教學影片來分享一下囉！", slug: "20130728-iphone-videobite", category_id: 2, author_id: nil, display_date: "2013-07-28", is_public: true, video_embed: nil},
  {title: "[小故事] 熱血青年", content: "\n(前幾天在Facebook上貼的小故事)\n\n一位熱血青年的故事：\n\n家裡附近有個自家的飲料店，因為便宜，有時吃完飯會去買一杯。今<wbr />天到了店裡，看到一位年輕人，一臉有心事的樣子，在我前面的客人<wbr />先點了飲料，這位年輕人在調飲料的空檔，居然開始練習投籃的動作<wbr />，也就是「墊腳、左手輔助、右手將球拋出」的動作。\n\n我在那瞬間，懂他為何有心事了。\n\n只要有等待的時間，例如等搖飲料機器、等封瓶口的機器，他就立刻<wbr />作投籃的動作，令我印象深刻的是他對客人也沒有馬虎。直到我點完<wbr />飲料，後面沒有客人了，他收完錢，轉身過去，終於能夠專心的練習<wbr />。\n\n我覺得他會成功。", slug: "20130825-good-guy", category_id: 1, author_id: nil, display_date: "2013-08-25", is_public: true, video_embed: nil},
  {title: "Email訂閱【特快車】文章方法", content: "\n![](http://www.motion-express.com/wp-content/uploads/2013/08/email_icon_by_neoidea-d4fn8nd.jpg)\n\n喜新厭舊的我，為網站增加了「Email訂閱功能」意思是每當我發佈一篇新文章，有訂閱的人就會收到Email，裡頭就有文章內容。這是繼RSS訂閱以來出現的另一種訂閱方式！假如大家願意訂閱的話，就當作是催促我寫多一點文章、作多一點教學吧！看到訂閱的人多一定會有一種激勵作用，歡迎訂閱！\n\n\n\n簡單說明訂閱方式：一種是從Facebook訂閱，一種是從網站，分開說明。\n\n## <span style=\"color: #ff0000;\">1.從Facebook訂閱</span>\n\n在Facebook粉絲團的大頭照右邊，有一個「Email訂閱」的圖示，用力給他按下去。\n\n[![](http://www.motion-express.com/wp-content/uploads/2013/08/1.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/1.jpg)\n\n接著會出現訂閱的畫面，假如是空白一片的話請按重整，如果一直讀取都還是空白一片的話也請重整，或稍微等一下，Email伺服器那邊有點緩慢，請給他一點時間和空間。\n\n[![email訂閱步驟2](http://www.motion-express.com/wp-content/uploads/2013/08/2.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/2.jpg)\n\n出現以後，在欄位中填入Email地址，按下「發送確認信」按鈕，接下來出現的畫面不重要，可以直接關掉。重點是系統會發送一封信到您的信箱，請到信箱去收信。\n\n收信時會看到標題是【特快車】部落格訂閱：Please Confirm Subscription\n\n[![email訂閱步驟3](http://www.motion-express.com/wp-content/uploads/2013/08/4.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/4.jpg)\n\n這時莫猶豫、莫驚慌，打開信以後，中間有顆藍色按鈕，旁邊的英文都不要管，按下去就對了。\n\n[![3](http://www.motion-express.com/wp-content/uploads/2013/08/3.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/3.jpg)\n\n這時系統會再寄一封信給您，表示成功訂閱！接下來就會由小弟在下發送Email給各位，幫各位不定期更新部落格資訊。\n\n## <span style=\"color: #ff0000;\">2.從網站訂閱</span>\n\n在【特快車】部落格的側邊，會出現一道側欄，標題是「文章Email訂閱」，下面有個填寫欄位，可直接輸入Email，並按下「發送確認信」按鈕。\n\n[![email訂閱步驟1](http://www.motion-express.com/wp-content/uploads/2013/08/5.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/5.jpg)\n\n接下來出現的畫面不重要，可以直接關掉。重點是系統會發送一封信到您的信箱，請到信箱去收信。\n\n收信時會看到標題是【特快車】部落格訂閱：Please Confirm Subscription\n\n[![email訂閱步驟3](http://www.motion-express.com/wp-content/uploads/2013/08/4.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/4.jpg)\n\n這時莫猶豫、莫驚慌，打開信以後，中間有顆藍色按鈕，旁邊的英文都不要管，按下去就對了。\n\n[![3](http://www.motion-express.com/wp-content/uploads/2013/08/3.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/3.jpg)\n\n這時系統會再寄一封信給您，表示成功訂閱！接下來就會由小弟在下發送Email給各位，幫各位不定期更新部落格資訊。", slug: "20130826-email-subscription", category_id: 1, author_id: nil, display_date: "2013-08-26", is_public: true, video_embed: nil},
  {title: "Internet.org 到底是嗜血的賺錢計畫，還是拯救世界的慈善事業？", content: "\n[![](http://upload.wikimedia.org/wikipedia/commons/2/27/Mark_Zuckerberg_-_South_by_Southwest_2008_-_3.jpg)](http://commons.wikimedia.org/wiki/File:Mark_Zuckerberg_-_South_by_Southwest_2008_-_3.jpg)\n\n<span style=\"color: #333399;\">**(前言：由於喜新厭舊的我不希望這部落格只侷限在影像的部分，也由於本人從事網路行銷有一陣子了，決定寫一些不一樣的東西，看大家是否喜歡我的想法~)**</span>\n\n臉書創辦人 Mark Zuckerburg 在這個月宣布啟動[Internet.org](http://www.internet.org/)計劃，目的是提供更普及的網路服務，讓全世界人都能夠使用網路。不過，這塊天馬行空的大餅引起非常大的討論，主要在於大家只把這件事情當作 Facebook 的一個商業手段，並非真的像 Zuckerburg 所說的是在改善人類的生活。\n\n\n\n就目前來看，目前無法自由上網的人數遠超過目前能夠上網的 27 億人，最主要原因是這些地區根本無法負擔上網的硬體設備，而人民也顧著掙口飯吃，無暇顧及上網到底是甚麼。在這樣的世界裡，這些地方真的需要網路嗎？我認為針對這個計畫到底該用甚麼樣的角度來看待，有幾個值得思考的地方：\n\n## <span style=\"color: #0000ff;\">●思考點 1：Zuckerburg 從頭到尾沒說這是慈善事業</span>\n\n從 internet.org 的官方網站上可以看到一段影片，說明現在仍有為數不少的人口仍然無法上網。並強調大家都希望自己的小孩能平安長大、受教育、與人接觸、溝通、互動等等，因此網路對人類來說是非常必要的。\n\n這段影片確實充滿了慈善的意味，藉由影片和緩、舒服、關懷的氣氛，打動觀眾，藉此認同這個計畫。但底下那段 CNN 訪談 Zuckerburg 的影片就完全不是這回事了。\n\n訪談過程中，他提到幾個原因，說明為何所有人都需要上網：\n\n1\\. 大家都需要網路，例如在外工作，需要連絡千萬公里之外的家人\n\n2\\. 網路已然是基本人權，每個人都有上網的權利\n\n這兩件事情聽起來合情合理，但轉念一想，真的是這樣嗎？Zuckerburg 提到這些事情的時候，用的並不是一種民族情懷的口吻，而是理性科學分析的口吻。就像在電影《社群網戰》(_Social Network_) 裡頭主角所說的：「大學生都想把妹」，一般人聽到這句話，都覺得是在冷嘲熱諷，但電影裡頭所詮釋的 Zuckerburg，卻把這件事情當作一個「需求」來看待，也因此創造出了 Facebook 的雛形。\n\n同樣的，我認為 Zuckerburg 打從一開始就不是把這件事情當作慈善事業來做，儘管打著「.org」的非營利組織口號，還聯合的自己的敵人來進行計畫，但這整件事情所強調的，**是看到了人類的「需求」並且試圖去填滿那個「需求」**。那僅僅是一個公司的目標，而不是真的要救贖天下蒼生。\n\n不管是官網的影片、文字說明，看得出來是 Facebook 在這個計畫所用的包裝，就像 Zuckerburg 在訪談中說的：「不斷為自己設立目標，並達成、超越，這就是公司的文化。」簡單來說，internet.org 是 Facebook 的一個新的「目標」。\n\n<iframe src=\"//www.youtube.com/embed/F8N3wGjiPYg?rel=0\" height=\"480\" width=\"640\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n\n## <span style=\"color: #0000ff;\">●思考點 2：目前全世界人都有上網需求嗎？</span>\n\n電影《名魔生死鬥》(_The Incredible Burt Wonderstone_) 中，主角把魔術道具帶給貧窮的孩子，希望能夠帶給他們娛樂；結果這些人完全不領情，他們眼中只有食物，最後把魔術道具都丟在一邊，這個「將魔術散播出去」的計畫也跟著失敗。\n\n電影雖然幽默，但非常真實，仔細想想，每一個人都有上網需求嗎？就像馬斯洛 (Abraham Maslow) 所提出的需求層次理論 (Need-hierarchy theory)，食物和水絕對是最優先，上網才是其次。目前世界上無法上網的地區，絕大多數都是由於貧窮所造成，而這些地區通常也伴隨著無水、無電的問題、無交通工具的問題；那對這些地區來說，到底要解決哪些問題才是明智之舉呢？\n\n## <span style=\"color: #0000ff;\">●思考點 3：那 internet.org 到底對這個世界有甚麼幫助？</span>\n\n就目前 internet.org 所提出的目標「負擔能力、效率、商業模式」的確是現階段整個世界需要的。在全球物價上漲、資源越來越匱乏的階段，若能確實降低負擔的門檻、提高數據傳輸的效率，我們可以將金錢資源、電力資源分配到更需要的地方。\n\n在 CNN 訪談中，Zuckerburg 也提到，目前檔案 (data) 已經隨處可得，網路上也有非常多的免費資源。所為新的「商業模式」就是在幫助人類尋求更有效、更值得購買的方法；雖然仍然屬於營利範圍，但必須不斷要有新的商業方式，才能研發出更多值得人類掏錢的商品、服務。例如「增值服務」(Freemium) 能夠先體驗再決定要不要付費就是一個很好的例子。\n\n簡言之，Internet.org 現階段投入的資源，不只是針對無法上網的民眾，對於已經在上網的民眾，也有非常大的幫助。\n\n[![](http://techorange.com/wp-content/uploads/2013/08/221.png)](http://www.internet.org/)\n\n## <span style=\"color: #0000ff;\">●思考點 4：到底該如何看待 internet.org 計劃？</span>\n\n對現在那些無法上網的人口來說，最需要的仍然是食物、水、教育。必須填飽肚子，才有辦法活著；必須接受教育，才有辦法養活自己。對上網來說，可能並沒有這麼急迫。\n\n但 Facebook 所領軍的 internet.org 計劃，一方面來說是改善已經能夠上網的人的生活，另一方面也是為了將觸角伸向經濟情況較差的地區。許多人說這是 Facebook 拓展市場的其中一個政策，但要說這個計劃對於世界一點幫助都沒有嗎？我認為在真正做出一番成績之前，爭議還太多，不妨先放開心胸，看冷靜的 Zuckerburg 這回要怎麼做，才能讓全世界人心服口服。\n\n(圖片來源：[Internet.org](http://www.internet.org/)、[Wikimedia](http://commons.wikimedia.org/wiki/File:Mark_Zuckerberg_-_South_by_Southwest_2008_-_3.jpg), CC Licensed)", slug: "20130826-internet-org-is-good-or-evil", category_id: 2, author_id: nil, display_date: "2013-08-26", is_public: true, video_embed: nil},
  {title: "Facebook 小編看過來，各種粉絲專頁圖片、照片尺寸大小一次搞清楚", content: "\n[![](http://fc02.deviantart.net/fs71/i/2011/274/9/8/facebook_stamps_by_laalex-d4bhcf2.png)](http://laalex.deviantart.com/art/Facebook-Stamps-261149726#comments)\n\n各位 Facebook 粉絲團小編有沒有每次在換封面相片、發佈照片時都去查照片尺寸呢？這邊一次整理出目前 (2013 年 8 月)Facebook 各種圖片的大小，以及縮放的方式，讓各位小編多個願望，一次滿足！\n\n\n\n## <span style=\"color: #0000ff;\">1\\. 封面相片</span>\n\n封面照片的尺寸如上圖，長 851 像素、高 315 像素，並且長度至少要達到 399 像素寬，才能上傳。不過建議還是至少有 851 像素寬，否則一放大，畫質變差，粉絲看了心情也不會好。如果上傳超大尺寸的圖片，則在上傳後可以調整顯示的位置。記得，照 Facebook 在上傳時所提示的，這塊圖片並不是廣告欄位，也不是優惠特區，當然它可以與粉絲團好好的結合，也可以大玩創意，讓粉絲印象深刻。這個就看小編自己的功力囉！\n\n[![7](http://www.motion-express.com/wp-content/uploads/2013/08/7.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/7.jpg)\n\n## <span style=\"color: #0000ff;\">2\\. 大頭貼照</span>\n\n大頭貼照的長度和高度都是 160 像素，如果上傳更大的照片，則可以選擇「編輯大頭貼照 → 編輯縮圖」看要擺放在哪個位置，或縮放大小。至於在內文，發表和回覆的時候，旁邊的小圖則是長和高 32 像素。 [![8](http://www.motion-express.com/wp-content/uploads/2013/08/8.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/8.jpg)\n\n## <span style=\"color: #0000ff;\">3\\. 預覽圖片</span>\n\n每次轉貼連結，就會出現一張圖片，預設是會選取連結中第一個看到的圖片，但也可以按下下方的「上傳圖片」連結，如果圖片的大小與預設不同，則會自動調整成適當的大小。\n\n[<a href=\"http://techorange.com/?attachment_id=87037\" rel=\"attachment wp-att-87037\">![](http://techorange.com/wp-content/uploads/2013/08/32.jpg)](http://www.motion-express.com/wp-content/uploads/2013/08/8.jpg)</a>\n\n## <span style=\"color: #0000ff;\">4\\. 上傳圖片</span>\n\n選擇上傳圖片時，預設大小是長和高都是 403 像素，如果直接調整成這個大小，就不會有縮圖問題。如果上傳的相片比這個尺寸大，則長和高都會自動置中。\n\n[![](http://techorange.com/wp-content/uploads/2013/08/4.jpg)](http://techorange.com/?attachment_id=87040)\n\n## <span style=\"color: #0000ff;\">5\\. 壓縮問題</span>\n\nFacebook 為了加速頁面讀取，上傳的照片如果顏色範圍太大、檔案太大，都會受到壓縮。因此大家在上傳過大的照片時，建議先自行壓縮至較小的尺寸，或是依照 Facebook 的比例進行裁切，避免上傳以後才發現有問題。\n\n## <span style=\"color: #0000ff;\">6.保護問題</span>\n\n上傳照片時，Facebook 會把所有其他照片夾帶的資訊都移除，包括版權資訊，檔案也重新命名。在大家都可以隨意下載照片的情況下，同等於失去保護，這也是為什麼各個粉絲團都要在照片上面壓上浮水印，以防別人盜圖。不過這個做法讓圖片變得有點醜就是了...\n\n## <span style=\"color: #0000ff;\">7\\. 圖片大小簡表</span>\n\n●封面相片：長 851 像素，高 315 像素\n\n●大頭貼照 (頭圖)：長 160 像素，高 160 像素\n\n●大頭貼照 (內文)：長 32 像素，高 32 像素\n\n●分享連結圖片：長 155 像素，高 114 像素\n\n●時間軸上的上傳相片：長 403 像素，高 403 像素\n\n●影片預覽：長 403 像素，高 226 像素\n\n(資料來源：[Have Camera Will Travel](http://havecamerawilltravel.com/photographer/images-photos-facebook-sizes-dimensions-types)、圖片來源：[La Alex](http://laalex.deviantart.com/art/Facebook-Stamps-261149726#comments), CC Licensed)", slug: "20130827-facebook-pic-size", category_id: 2, author_id: nil, display_date: "2013-08-27", is_public: true, video_embed: nil},
  {title: "【影片】為甚麼你不該完全相信搜尋引擎？", content: "\n![](http://www.motion-express.com/wp-content/uploads/2013/09/搜尋引擎.jpg)\n\n本人做了一段時間網路行銷，有些知識希望大家也能知道。工作期間在跟很多朋友聊天之後，發現很多人對有些網路的必要知識其實沒那麼了解。例如搜尋引擎的運作方法，其實跟你我的生活都大有關係，多數人認為搜尋引擎的自然排序是使用者集大成的結果，但其實也包含了許多可操控的人為因素，許多人都不知道。如果不去了解，很容易受到商業的擺佈。希望藉由這支簡單的影片，讓大家了解一下每天都在使用的搜尋引擎！\n\n\n\n## <span style=\"color: #ff0000;\">影片在此！</span>\n\n<iframe src=\"//www.youtube.com/embed/MvKLyQ6Z5PE?rel=0\" height=\"400\" width=\"640\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n\n如果你喜歡這支影片，也希望可以分享出去喔！\n\n喜歡閱讀文字的人，這些也提供一篇文章直接閱讀！\n\n最後，分數最高的網站，就出現在搜尋結果第一筆，第二高分就出現在第二筆，依序往下排。當然，最上面是關鍵字廣告，這是公司砸錢買的，不是今天的討論範圍。\n\n商人都知道，這時候小明如果要點擊，一定是去點第一個出現的結果，因為那通常都是最相關、也最有可能找到答案的結果。根據許多統計網站顯示，第一筆資料的點擊率超過全部點擊率的30%，比第二名多出一倍以上。仔細想想，今天假如第一名有30%，第二名有15%，已經接近一半了，然後剩下55%的點擊數字，交給其它100筆以上的結果來分，假如你今天是公司老闆，你會不會希望自己的公司網站，是在小明搜尋結果的第一名？\n\n既然用戶都相信這個「第一名」是最重要的，公司當然也都希望自己的網站能排在「第一名」。所以，在1994年搜尋引擎出現的時候，有一群熱血青年，想到了用這種追求「第一名」來賺錢的方法。他們心想：「假如我能掌握搜尋引擎公式的計算方法，那是不是就可以把這個技術賣給想要行銷的公司，藉此大賺一筆呢？」\n\n因為這群熱血青年的關係，出現了一門技術叫做SEO，中文翻譯是「搜尋引擎最佳化」。這些人不斷做一些實驗，例如用把網站名字改長改短，或是把網站名字塞滿關鍵字，像\"XX賣車買車租車轎車汽車機車摩托車買賣\"類似這種專門給公式判讀的名字。他們研究各種方法，刻意符合搜尋引擎的公式，讓各個網站的分數因此變得非常高。他們就靠這種行銷方式，從各個公司手中賺了不少錢。\n\n當然，只要是有公信力的搜尋引擎，不可能給這些人這麼輕鬆地賺錢。大家都知道，只要有商業介入，搜尋的結果就會不準，那長久下來，使用者就會不想再繼續使用。\n\n搜尋引擎的宗旨，是認為：「確保使用者找到的資訊，是最相關、最熱門、最有公信力的」\n\n反過來說，行銷人員則認為：「行銷人員也要過生活，誰付的錢多，誰就排前面。」所以，雙方展開了無限的長期抗戰。\n\n不過，各位應該都猜得到，這場仗是打不完的，凡事只要有規則，就會有漏洞可以鑽。只要有漏洞可以鑽，就會有新的規則出現；這樣無限循環下去，造就了今天我們看到的搜尋引擎。\n\n所以，回到最前面的問題，搜尋引擎能相信嗎？聽完剛剛的解釋，想必各位應該是半信半疑。不過幸運的是，最後的搜尋結果，還是會因為受不受使用者歡迎的關係而有所改變。也就是說，一個爛網站就算砸大錢操作，如果大家看了都討厭、網站也達不到行銷的效果，公司賺不到錢，那這間公司的老闆當然不會繼續花錢請人操作搜尋引擎。\n\n所以，對我們每天使用搜尋引擎的人來說，有一個最簡單的答案，就是多看幾筆資料，大部分搜尋引擎第一頁都有10筆資料，不要只看前幾筆，那些都是行銷人員的戰場。他們知道每個使用者都會相信第一筆資料是正確的。\n\n假如小明搜尋「買車」，出現的第一個結果是A網站，但是立刻看到第二個結果在說「A網站真是爛爆了」，這樣小明是不是應該也要看一下其他人對A網站的評價呢？有沒有可能A網站是砸大錢才把網站提升到第一名的呢？\n\n大部分行銷公司都是有良心的，不會故意去行銷爛商品、爛服務，但偏偏那些少數沒良心的行銷公司手法都特別顯眼，專門把鳥東西送到我們眼前。記得：搜尋引擎只是把東西端上來，不代表那是好東西。多看幾筆資料，才不會像看購物頻道一樣，別人講甚麼就相信甚麼。\n\n## <span style=\"color: #ff0000;\">(字有點多，看影片最快！)</span>", slug: "20130907-why-you-should-not-believe-search-engine", category_id: 2, author_id: nil, display_date: "2013-09-07", is_public: true, video_embed: nil},
  {title: "12 種在 Instagram 上最普遍的照片", content: "\n![](http://farm9.staticflickr.com/8254/8649133454_42b5bba6fd.jpg)\n\n自從 Instagram 由 Facebook 收購以後，兩個平台的照片經常互通有無，使用者也常常看到在彼此平台上分享照片的朋友。由 Mashable 記者統計，總共有 12 種最常出現的 Instagram 照片風格，來看看你有沒有上傳過呢？\n\n\n\n## <span style=\"color: #0000ff;\">1\\. 沙灘上的一雙腳</span>\n\n在台灣可能沒有這麼多的沙灘讓人拍這種照片，但去過海邊的各位朋友，是否也有想過拍一下這種照片。\n\n[\n](http://www.motion-express.com/wp-content/uploads/2013/09/8.jpg) [![1](http://www.motion-express.com/wp-content/uploads/2013/09/1.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/1.jpg)\n\n## <span style=\"color: #0000ff;\">2\\. 雲</span>\n\n不管日出日落，天氣好不好，總是要來一張。一方面是美感，一方面代表心情。\n\n[![2](http://www.motion-express.com/wp-content/uploads/2013/09/2.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/2.jpg)\n\n## <span style=\"color: #0000ff;\">3\\. 美味大餐</span>\n\n在亞洲地區，拍食物已經到了強迫症的地步，只要有人吃好料、自己下廚，一定會有食物的照片上傳；每天沒有看到一張食物的照片，可能還會覺得不太正常。\n\n[![3](http://www.motion-express.com/wp-content/uploads/2013/09/3.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/3.jpg)\n\n## <span style=\"color: #0000ff;\">4\\. 指甲彩繪</span>\n\n細心照顧的指甲，如果只有會見面的朋友看到，似乎有點可惜。\n\n[![4](http://www.motion-express.com/wp-content/uploads/2013/09/4.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/4.jpg)\n\n## <span style=\"color: #0000ff;\">5\\. 嘉言錦句</span>\n\n只要一張圖、一句話，不管再怎麼千奇百怪的搭配，都會有一種美感存在。當然，在 Facebook 上，這種類型的照片最容易引起迴響，假如讀者有新手小編的話可以嘗試看看。\n\n[![5](http://www.motion-express.com/wp-content/uploads/2013/09/5.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/5.jpg)\n\n## <span style=\"color: #0000ff;\">6\\. 仰視建築物</span>\n\n建築物的美感也是大家經常捕捉的一環。\n\n[![6](http://www.motion-express.com/wp-content/uploads/2013/09/6.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/6.jpg)\n\n## <span style=\"color: #0000ff;\">7\\. 咖啡店組合</span>\n\n不管是文藝青年、認真學生、商業聚會，總會到咖啡店走一遭，這時不免俗的就要拍一下咖啡餐點，有時旁邊會加上一本書、一台筆記型電腦、手機等等。\n\n[![7](http://www.motion-express.com/wp-content/uploads/2013/09/7.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/7.jpg)\n\n## <span style=\"color: #0000ff;\">8\\. 訊息截圖</span>\n\n好笑的對話通常都在這系列的照片裡面，甚至有許多網站為此而生，例如Damn You Autocorrect，網站創立宗旨是由於 iPhone 的自動校正英文拼音的方式實在很莫名其妙，又喜歡使用骯髒下流的詞彙，造就許多笑話。這個情況在中文比較少發生，但親友間好笑的對話還是常常會上傳到 Instagram 或 Facebook。\n\n[![8](http://www.motion-express.com/wp-content/uploads/2013/09/8-300x300.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/8.jpg)\n\n## <span style=\"color: #0000ff;\">9\\. 飛機起飛</span>\n\n飛機起飛的瞬間總是讓人期待，畢竟旅程的開始和結束都特別有意義。\n\n[![9](http://www.motion-express.com/wp-content/uploads/2013/09/9.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/9.jpg)\n\n## <span style=\"color: #0000ff;\">10\\. 鏡中自拍</span>\n\n最容易混淆的相片類型，因為不知道到底是在拍人、拍穿著、拍背景、還是相機廣告。不過由於比起近距離自拍，這種拍法更能掌控畫面，因此也是經典照片風格的大宗。\n\n[![10](http://www.motion-express.com/wp-content/uploads/2013/09/10.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/10.jpg)\n\n## <span style=\"color: #0000ff;\">11\\. 大家一起</span>\n\n不管是手、腳、手指、臉等等，只要有活動，就會出現這種類型的照片，看似象徵團結的意義。\n\n[![11](http://www.motion-express.com/wp-content/uploads/2013/09/11.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/11.jpg)\n\n## <span style=\"color: #0000ff;\">12\\. 日落</span>\n\n為什麼強調日落，是因為現代人的生活習慣，都看不到日出。但日落時分很美，這是無法否認的。\n\n[![12](http://www.motion-express.com/wp-content/uploads/2013/09/12.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/12.jpg)\n\n(資料來源：[Mashable](http://mashable.com/2012/08/31/cliche-instagram-photos/#_)、圖片來源：[Mashable](http://mashable.com/2012/08/31/cliche-instagram-photos/#_), [Chankai](http://www.flickr.com/photos/7985309@N07/8649133454/sizes/m/in/photostream/), CC Licensed )\n\n&nbsp;", slug: "20130908-12-most-general-instagram-pics", category_id: 2, author_id: nil, display_date: "2013-09-08", is_public: true, video_embed: nil},
  {title: "【After Effects 教學更新】 16. 彈跳效果", content: "\n[![Comp 1 (0-00-02-15)_1](http://www.motion-express.com/wp-content/uploads/2013/09/Comp-1-0-00-02-15_1.jpg)](http://www.motion-express.com/wp-content/uploads/2013/09/Comp-1-0-00-02-15_1.jpg)\n\n本教學利用expression製作彈跳效果的預設模組，往後在需要使用彈跳效果的動畫時可直接套用。教學分為兩個部分，第一個部分直接說明模組使用方式，如果有興趣了解製作過程的人可參考第二部分教學，說明此模組如何製作。本教學是編譯[Creative Cow的教學](http://library.creativecow.net/toula_jesse/Gravity-in-After-Effects/1)製作而成，在學習三角函數和指數函數的部分，對我這個數學很爛的人來說，真是吃盡了苦頭，但對於expression真的蠻有幫助的，也更有概念了，大家可以一起學習看看！\n\n\n\n## [觀看教學影片](http://www.motion-express.com/?portfolio=16-%E5%BD%88%E8%B7%B3%E6%95%88%E6%9E%9C)\n\n[Gravity Bounce模組下載](http://www.motion-express.com/downloads/presets.rar)\n\n[模組安裝教學](http://www.motion-express.com/?p=1849)\n\n========成品預覽===========\n[![T16](http://www.motion-express.com/wp-content/uploads/2013/09/Comp-1.gif)](http://www.motion-express.com/wp-content/uploads/2013/09/Comp-1.gif)\n\n&nbsp;", slug: "20130910-ae-turorial-bouncing", category_id: 4, author_id: nil, display_date: "2013-09-10", is_public: true, video_embed: nil},
  {title: "7個Youtube小知識", content: "\n[![](http://farm8.staticflickr.com/7132/7749081576_f256dba668.jpg)](http://farm8.staticflickr.com/7132/7749081576_f256dba668.jpg)\n\n根據Youtube[官方統計](http://www.youtube.com/yt/press/statistics.html)，每個月有超過10億不重複訪客在Youtube上觀看影片，並且全世界每分鐘有超過100小時以上的影片上傳至Youtube。這麼瘋狂的數字，代表幾乎每個人至少一個月會使用一次Youtube，也代表Youtube的成長還在持續當中。但有些相關小知識，你們知道嗎？\n\n![](http://upload.wikimedia.org/wikipedia/commons/3/39/PayPal_logo.svg)\n\n## <span style=\"color: #0000ff;\">1.Youtube與Paypal的關係</span>\n\nYoutube三位創辦人陳士駿、Chad Hurley、Jawed Karim，都曾參與Paypal的創業，也就是說Youtube並不是他們創立的第一家公司，而是Paypal，甚至Paypal的logo也是由Chad Hurley所設計的。不過在eBay收購Paypal以後，陳士駿等三人漸漸感到在大企業工作的無趣，才離職再度創業。\n\n## <span style=\"color: #0000ff;\">2.Youtbe原本目標是個「約會網站」</span>\n\n最早，Youtube純粹是大家覺得需要有一個可以分享影片的網站，而當時創辦人陳士駿認為，約會網站一直都是最受歡迎的種類，像Facebook原本也是以約會為訴求而創立，後來才轉型的。陳士駿對於網站[Hot or Not](http://hotornot.com/)這樣的網站非常欣賞，純粹用「是」或「否」兩顆按鈕，來決定是不是喜歡這個對像。不過網站流量一直沒有起色，後來看到[Janet Jackson表演走光事件](http://en.wikipedia.org/wiki/Super_Bowl_XXXVIII_halftime_show_controversy)引起網路世界的一陣浪潮，當時所有人都在搜尋「Janet Jackson」，所有論壇、e-mail都在詢問，有沒有人有這段影片。Youtube團隊靈光一閃，便改以「影片分享」為網站唯一的主軸，讓所有有潛力爆紅的影片，都上傳到Youtbe來。\n\n## <span style=\"color: #0000ff;\">3\\. Youtube與utube的對決</span>\n\n專門販售管線工具的Universal Tube &amp; Rollform Equipment公司，網站網址是utube.com，但在Youtube爆紅之後，有許多人想要連到youtube.com，卻輸入網址錯誤為utube.com，連到該公司的網站，造成公司網站流量超大，卻對業績毫無影響的情況。該公司對Youtube提供告訴，認為Youtube對公司有非常大的負面影響，要求Youtube改名。後來敗訴，該公司只好摸摸鼻子，將網址改為utubeonline.com。\n\n## <span style=\"color: #0000ff;\">4.第一部影片</span>\n\n測試網站的時候，Youtube團隊上傳了第一個影片叫做「[Me at the zoo](https://www.youtube.com/watch?v=jNQXAC9IVRw)」，當時近供測試使用，只是一段短短生活影片。但在Youtube爆紅以後，該影片由於歷史意義重大，觀看次數也迅速往上攀升，目前已經有1千2百萬的觀看次數。也算是少數內容貧乏，卻有高觀看次數的影片。\n<iframe src=\"//www.youtube.com/embed/jNQXAC9IVRw?rel=0\" height=\"360\" width=\"480\" frameborder=\"0\"></iframe>\n\n## <span style=\"color: #0000ff;\">5.第一個Rickroll的出現</span>\n\n對華語世界的讀者來說，[Rickroll](http://zh.wikipedia.org/wiki/%E7%91%9E%E5%85%8B%E6%90%96%E6%93%BA)這個詞彙可能有點陌生，指的是從2007在美國開始的網路現象，指的是1987年Rick Astley有一首歌叫[〈Never Gonna Give You Up〉](http://www.youtube.com/watch?v=oHg5SJYRHA0)裡頭的搖擺動作。Rick指的是該名歌手，roll指的就是搖擺動作，結合在一起就是Rickroll。2007年從美國知名論壇4chan開始了一種惡搞現象，也就是在討論主題下方留下連結，表示內容跟主題有關，但實際連結過去，卻發現是Rick Astley這首歌的MV，引發一陣惡搞的風潮。當時被惡搞的人會以rickroll’d來形容，指「你被連結到Rick的MV啦！」\n\n而這個用來惡搞的MV，就是首先在Youtube上，後來才有其他影音網站出現這首MV。\n<iframe src=\"//www.youtube.com/embed/oHg5SJYRHA0?rel=0\" height=\"360\" width=\"480\" frameborder=\"0\"></iframe>\n\n## <span style=\"color: #0000ff;\">6.最多瀏覽的影片</span>\n\n截自筆者撰寫的這天，全世界目前最多瀏覽次數的影片是[Gangnam Style](http://www.youtube.com/watch?v=9bZkp7q19f0)的17億瀏覽次數，這數字已經快比全世界有在上網的人口還多了。前幾名的影片都是音樂MV，而除了音樂MV之外，第一名的影片是[Charlie Bit My Finger](http://www.youtube.com/watch?v=_OBlgSz8sSM)，是兩個小朋友的互動，說不定各位已經看過了。不過如果把目前[最熱門的影片名單](http://www.youtube.com/charts/videos_views?t=a&amp;gl=US)都看過一次，會發現…音樂MV也太紅了吧，是否自己也來拍一個？說不定可以瞬間爆紅喔！\n\n## <span style=\"color: #0000ff;\">7.Youtube上的貪食蛇</span>\n\nYouytube常常在網站上玩些有趣的東西，包括愚人節時讓畫面上下顛倒之類的。有人發現在觀看Youtube「遊戲類」影片時，按下暫停、再開始，這時按住鍵盤上的「←」和「↑」鍵，按住一段時間，會出現貪食蛇的遊戲畫面。不過我一直沒有試成功過，各位要不要一起來試試看呢？\n\n<iframe src=\"//www.youtube.com/embed/H1IzMb1VrJY?rel=0\" height=\"360\" width=\"480\" frameborder=\"0\"></iframe>\n\n(資料來源：[Mashable](http://mashable.com/2011/02/19/youtube-facts/)、圖片來源：[Jurgen Appelo](http://www.flickr.com/photos/jurgenappelo/7749081576/), CC Licensed)", slug: "20130920-7-youtube-tips", category_id: 2, author_id: nil, display_date: "2013-09-20", is_public: true, video_embed: nil},
  {title: "「微」你個頭！到底是微電影還是短片啦？", content: "\n[![](http://farm4.staticflickr.com/3438/3186711317_2effd53494.jpg)](http://www.flickr.com/photos/puuikibeach/3186711317/in/photolist-5RAJfz-5SxdMG-5UR6Uy-5WGfKL-61HnEW-62bTX7-64vWP1-68G5ef-6d9icD-6g7nCm-6gMPBs-6hEto6-6jS8pD-6m7y6b-6mT41q-6tvi6J-6vRJ3T-6wRqgn-6xznJo-6AmVkG-6BLGYY-6G3zWi-6NHo4y-6RjsPD-6VvUgH-6X5nzY-6ZCJRL-73k4v1-75Rzh5-77NXmi-78fb8h-7j6bb9-7jhLED-7jhLPr-7jhM2c-7jhMwM-7jhMDi-7jhMWa-7jhMZi-7jhN8g-7jhNkn-7jmEhN-7jmF3y-7jmFML-7jmGif-7jmGvu-7jmGCC-7prc2w-7prdTQ-7pre3f-7prerh/lightbox/)\n\n\n「微電影」這個詞自從普遍以來，早已被不知多少人罵過，說到底，微電影就是「短片」，微電影就是大陸用語，不管從哪個角度來看，就是一個讓人感到不屑的詞彙。但過了幾年，「微電影」這個詞都沒有消失過，甚至在業界，其中一種很流行的行銷方式就是「微電影行銷」。到底要微電影和短片差在哪？到底這麼多人「微」是在「微」甚麼？\n\n翻開維基百科，可以發現一件有趣的事情：「Microcinema」和「微電影」所代表的意義完全不同。簡單說明一下：\n\n## <span style=\"color: #0000ff;\">Microcinema是啥</span>\n\n維基百科裡頭說，「[微電影](http://zh.wikipedia.org/wiki/%E5%BE%AE%E9%9B%BB%E5%BD%B1)」這個詞是從「[Microcinema](http://en.wikipedia.org/wiki/Microcinema)」來的，但從其他來源判斷，這只是個美麗的錯誤。1994 年左右，有一種電影拍攝手法，是拿便宜的 DV 或 Hi-8 進行拍攝，成本超低，拍攝成 16 厘米的膠卷影片 (例如[超級 8](http://orangecat1027.pixnet.net/blog/post/38265788-%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%B5%90%E5%90%88%E2%94%80%E2%94%80%E8%B6%85%E7%B4%9A8)的主角們)。這種電影雖然長度很短，卻包含了所有電影該有的元素，例如劇情、角色、配樂、音效等等，就是一部電影。當時稱這種低成本的電影為 Microcinema。\n\n咦，2013 年的今天，「微電影」是這樣嗎？有沒有 1 分鐘的微電影成本是上千萬台幣或上千萬人民幣的？根本一堆，請各位去對岸的 CC 視頻或隨便一個影音網站，都可以找到這種企業不惜重金拍攝的微電影。可見，今天說的微電影，跟 Microcinema 根本是兩回事。\n\n## <span style=\"color: #0000ff;\">微電影</span>\n\n從[Inside 的文章](http://www.inside.com.tw/2012/08/06/about_microfilm)和[對岸的百科](http://www.zwbk.org/MyLemmaShow.aspx?zh=zh-tw&amp;lid=243999)都可以看到，2007 年在法國的口袋影展 (Pocket Film Festival) 上，開始宣導一種概念，指智慧型手機帶來另一種影片觀賞的模式：簡短、深刻。雖然在很久以前就有這種影片的形式存在，但主要依然是科技產品的興起，才讓這種影片的型是大紅大紫。在大家都有網路，卻不常去電影院的情況下，微電影立刻滲透到影音網站上，把畫面送到你我的電腦或手機螢幕上。微電影所帶動的商業模式非常多，主要是置入性行銷，在這邊就不多談。\n\n所以，回到正題，微電影和短片到底有甚麼關係？先前在網路上有些非常紅的影片，各位可以思考一下，例如下面 Old Spice 沐浴乳的廣告，可以叫做微電影嗎？還是該叫做短片？\n\n<iframe src=\"//www.youtube.com/embed/owGykVbfgUE?rel=0\" height=\"315\" width=\"560\" frameborder=\"0\"></iframe>\n\n很明顯，這是廣告，不符合上面任何一個定義。假如這樣，那很紅的蔡阿嘎系列，算是甚麼呢？\n\n<iframe src=\"//www.youtube.com/embed/Zgz13ExkfJ0?rel=0\" height=\"315\" width=\"420\" frameborder=\"0\"></iframe>\n\n如果我要說這是短片，大家一定都同意。但如果說這是微電影，應該 98% 的朋友都不贊同，因為他根本看起來就不是「電影」，不包含電影該有的元素。所以，「微電影」指的還是「電影」，本質不變；但在台灣，「短片」指的範圍比微電影廣太多了，可以是任何雜七雜八的影片。今天我們在動物園裡面拍幾個人跳舞發瘋，然後講幾句話，也是短片；這幾天很紅的[動新聞員工辭職影片](https://www.youtube.com/watch?v=Ew_tdY0V4Zo)，也是短片。\n\n## <span style=\"color: #0000ff;\">所以該講短片還是微電影</span>\n\n所以到底要不要罵微電影？要不要把「微電影」這個詞趕回對岸去？<span style=\"color: #ff0000;\">答案是沒有辦法，因為微電影儼然已經成為一種新的影片種類</span>，在商業界快速的散播開來，搭配許多行銷方式使用。例如某位大明星在微電影裡面穿的衣服，因為劇情渲染和各種拍攝角度的關係，有許多觀眾會覺得這件衣服很好看，也想要買，如此一來這件衣服的品牌就達到了置入性行銷的功效。\n\n所以，雖然我也很討厭「微電影」這個詞，但不可否認，確實有它存在的意義。當我們說「微電影」而不說「短片」的時候，很明白就是在指那種新興的影片類型，簡短、深刻、有劇情、有角色等等，可以在通勤時間看完，卻留下深刻印象。\n\n至於有人規定說微電影的時間、成本、手法等等，符合定義才叫做微電影。我覺得根本就是瞎爆了，微電影本身的存在就是超越了傳統的影片模式，跟廣告、電影、短片的界線非常模糊，此時此刻幫微電影下定義，只是先把磚頭準備好，等下一種影片類型出現，就往自己的腳砸下去而已。\n\n(圖片來源：[davidd](http://www.flickr.com/photos/puuikibeach/3186711317/in/photolist-5RAJfz-5SxdMG-5UR6Uy-5WGfKL-61HnEW-62bTX7-64vWP1-68G5ef-6d9icD-6g7nCm-6gMPBs-6hEto6-6jS8pD-6m7y6b-6mT41q-6tvi6J-6vRJ3T-6wRqgn-6xznJo-6AmVkG-6BLGYY-6G3zWi-6NHo4y-6RjsPD-6VvUgH-6X5nzY-6ZCJRL-73k4v1-75Rzh5-77NXmi-78fb8h-7j6bb9-7jhLED-7jhLPr-7jhM2c-7jhMwM-7jhMDi-7jhMWa-7jhMZi-7jhN8g-7jhNkn-7jmEhN-7jmF3y-7jmFML-7jmGif-7jmGvu-7jmGCC-7prc2w-7prdTQ-7pre3f-7prerh/lightbox/), CC Licensed)", slug: "20131004-tiny-movie", category_id: 2, author_id: nil, display_date: "2013-10-04", is_public: true, video_embed: nil},
  {title: "Youtube推薦影片不吸引人？來看看現在甚麼影片最紅！", content: "\n![](http://farm4.staticflickr.com/3410/4561481118_2eca63b1d7.jpg)\n\n\n有沒有過打開Youtube首頁卻覺得推薦的影片都不吸引人呢？當然，可能你沒有登入帳戶，Youtube沒辦法透過曾經看過的影片來推薦，不過人總有想要換換口味的時候，每次推薦的影片都是同一類型，看久了也會膩。Youtube在2013年推出[Youtube趨勢](https://www.youtube.com/trendsdashboard#loc0=twn)(Youtube Trends)，讓你可以看看現在全世界哪些影片最紅！\n\n[![2013-10-06_003539](http://www.motion-express.com/wp-content/uploads/2013/10/2013-10-06_003539.png)](http://www.motion-express.com/wp-content/uploads/2013/10/2013-10-06_003539.png)\n\n簡單來說，[Youtube Trends](https://www.youtube.com/trendsdashboard#loc0=twn)會顯示過去24小時裡面，總共有哪些影片的觀賞次數和分享次數是最高的，並且在主頁裡頭，有幾個項目可以調整：\n\n### <span style=\"color: #0000ff;\">國家</span>\n\n美國各州有比較詳細的區別，除此之外，也可以看看台灣、日本、香港都在紅些甚麼，甚至可以看看大陸…咦？大陸哪裡有Youtube，冏。不過如果翻到像印度這種音樂風格很獨特的國家，就會出現一些很驚人的MV，不妨順便看看其他國家有甚麼特別流行的影片。\n\n### <span style=\"color: #0000ff;\">年齡層</span>\n\n想知道你爸媽比較喜歡看哪種影片嗎？可以選個「55歲~64歲」看看，嗯…不過有個問題，畢竟這項數據統計一定是使用用戶的年齡資料，所以一定是在使用者有登入的情況下才會統計。所以55歲以上的人會特別登入帳戶再看Youtube影片嗎？畢竟55歲以上會看Youtube的人本身就比較少，願意創立個人帳戶並且登入的應該……不管，既然他統計得出來，就姑且相信他！\n\n### <span style=\"color: #0000ff;\">性別</span>\n\n男女大致上最紅的影片是大同小異，例如騎馬舞正紅的時候，大家都擠破頭在看PSY的演出。不過有些比較細緻的部分確實會有差，例如以遊戲《英雄聯盟》的相關影片，在男性的排名中會遠比女性來得前面。而相對來說，連續劇、韓劇、日劇等等，在女性的排名中就比較前面。\n\n[![2013-10-06_005919](http://www.motion-express.com/wp-content/uploads/2013/10/2013-10-06_005919.png)](http://www.motion-express.com/wp-content/uploads/2013/10/2013-10-06_005919.png)\n\n另外，假如行銷人員有需要研究Youtube趨勢，也可以按下「Compare」按鈕，會出現三個設定欄位，同樣可以分開設定地區、年齡、性別，直接比對這些區塊的使用者，所喜歡的影片有甚麼不同。另外也可以在「Highlight」欄位選擇「共同項目」，觀察這些區塊有沒有相同的影片是大家都喜歡的。\n\nYoutube也專門為這個趨勢設立[部落格](http://youtube-trends.blogspot.tw/)，提供趨勢報導和分析，大概1-2個月會有一篇分析文章出現，內容包括目前流行的影片、像超級英雄影片的專題文章等等，不過截自目前為止文章有點少，有興趣的朋友可以看看。\n\n假如因為工作繁忙，怕跟不上朋友的話題，除了看新聞以外，不妨也來這裡看一下到底這幾天都在紅甚麼影片！\n\n(圖片來源：[Maurits Knook](http://www.flickr.com/photos/40046413@N07/4561481118/in/photolist-7X5Mqb-dqcNWm-7BTNre-9qQnW5-93PHba-9tznPv-96ZubC-bHzNKP-98Ng52-bmJyk3-7Q1EqG-adFB5j-9ScTB5-9AdVeh-8h1Zca-8mroJZ-9SdqQG-9s9fyb-9s3rMd-9s9hQ3-9s9eRL-9nWxtG-87xDam-d7cehJ-86oEdS-85KdjW-d7bB6Y-d7bGwN-95zVVr-8HAyWh-8V5vmU-7RuUYh-88K7Fe-8mrdHi-86Eomg-8h5e4j-bawLdv-8838us-ap4yz3-7Jtznn-bd3B8g-buB93H-8epd6c-e9cfMM), CC Licensed)", slug: "20131006-youtube-most-popular-videos", category_id: 2, author_id: nil, display_date: "2013-10-06", is_public: true, video_embed: nil},
  {title: "要讓大腦進化，靠的是不顧一切往前衝！", content: "\n[![](http://www.motion-express.com/wp-content/uploads/2013/12/albert_einstein_by_tattoartist9-d56f3df.png)](http://www.motion-express.com/wp-content/uploads/2013/12/albert_einstein_by_tattoartist9-d56f3df.png)\n\n\n先前在Techorange翻譯[這篇文章](http://techorange.com/2013/12/06/how-ray-kurzweil-help-google-make-the-ultimate-ai-brain/)的時候有一個很有趣的論點，值得share給大家：\n\nGoogle 的人工智慧科學家 Ray Kurzweil[接受《WIRED》訪問](http://techorange.com/2013/12/06/how-ray-kurzweil-help-google-make-the-ultimate-ai-brain/)時， 提到大腦的新皮層會受到人的生活作息影響，因而有不同排列，是以「熟能生巧」的邏輯來進行，做越多，越熟練。例如每天都在打字，全心全意的訓練，那打字速 度一定越打越快，在大腦裡頭的「打字」領域會越來越強大。愛因斯坦因為全心全意的投入物理學研究，才造就他的偉大地位。\n\n雖然該篇訪談講的是人工智慧，但因為講到人類大腦的運作方式，也值得讓我們思考：**假如要在某個領域登峰造極，那該怎麼借助大腦的運作，來讓我們有更高的成就？**\n\n### <span style=\"color: #0000ff;\">●大腦的進步是「熟能生巧」</span>\n\n簡 單來說，大腦的「熟能生巧」就像倉庫和倉庫工人的關係，花越多時間在同一件事情上，就像是越常請倉庫工人搬東西到同一個倉庫一樣，時間越久，倉庫裡的東西 就堆越豐 富。每天大腦都要把不同工人分配到不同事情上，例如工作、玩樂、運動等等；若要快速培養某個特定技能，就是要把越多工人集中把貨物集中堆疊到同一個倉庫 裡，累積的量才會快又多。例如每天都練習畫畫，那畫畫的速度和整體美感都會快速進步。\n\n聽起來要讓技能進步是很簡單的一件事情，但重點在於，我們在生活中依然有其他要事要處理，例如吃飯睡覺逛街、應付老闆、管理下屬、協助朋友這些跟專業沒那麼有關係的地方。以畫畫為例，如果把太多心力用在其他地方，那「畫畫」的倉庫囤貨速度就會變慢。\n\n更 重要的是「社會觀感」，如果畫畫的時候還要注意去會不會得到金主的喜歡，就會因而無法專注在情感或技巧的表現上。簡單來說，畫家就受到社會觀感的限制，不 斷思考去迎合特定關係人的方法，因而阻礙他原本的創造力。大腦就是這樣的運作方式，越屏除雜念、不顧一切的專注，才能有更卓越的進步。\n\n### <span style=\"color: #0000ff;\">●如何達到「全心全意的專注」？</span>\n\n愛迪生無時無刻都在想發明的事情，一度把自己名字給忘了；賈伯斯雖然創造出卓越的科技成就，但像皇帝一樣的管理方式讓員工大部分都很厭惡。\n\n反 過來問自己，我們應該怎麼分配自己的精力和時間呢？更重要的，我們到底要聽哪些人的話，讓主管、家人、朋友情誼之間取得平衡？大家應該都曾經有過想要完成 一個想法，卻遭到他人的否決，因此不敢去實踐。假如真的敢去做，那以目前科學的角度來看，對大腦越有幫助，進步的速度也就越快。這就是為什麼在訪談中提 到，愛因斯坦的成就能夠超越其他物理學家，是因為他比其他人更能不顧一切，而不單純是他智商比較高。\n\n不妨仔細想想，有甚麼因素在生活中不斷阻礙我們進步呢？又要用甚麼方式在不違背道德良知的情況下，讓自己的大腦進步最多呢？\n\n(圖片：[Tatooartist9](http://tattoartist9.deviantart.com/art/Albert-Einstein-313112787), CC Licensed)\n\n&nbsp;", slug: "20131222-brain-evolution", category_id: 2, author_id: nil, display_date: "2013-12-22", is_public: true, video_embed: nil},
  {title: "2014新年快樂！", content: "\n[![345 (0-00-00-15)](http://www.motion-express.com/wp-content/uploads/2014/01/345-0-00-00-15.jpg)](http://www.motion-express.com/wp-content/uploads/2014/01/345-0-00-00-15.jpg)\n\n\n\n雖然已經慢了兩天，還是祝大家2014年新年快樂！希望大家今年都要過得開心喔！\n\n這陣子馬不停蹄的工作&amp;加班，只能說對很多忠實支持的朋友不太好意思，新年新希望就是要重振一下特快車！不要讓他變成特慢車啊~ 之後會為大家帶來更多精彩內容喔~ 請繼續follow~\n\n先幫自己許下今年的願望，就是要AE教學內容翻一倍出來！", slug: "20140103-2014-happy-new-year", category_id: 1, author_id: nil, display_date: "2014-01-03", is_public: true, video_embed: nil},
  {title: "免費音效素材取經啦！《Sound Bible》佛心來的！", content: "\n[![2014-02-05_222729](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_222729.jpg)](http://soundbible.com/)\n\n&nbsp;\n\n先前已經有介紹過許多素材，但這回來個不一樣的！《[Sound Bible](http://soundbible.com/)》是一個提供免費音效素材的網站，大伙真的是有福了，我真後悔怎麼沒有兩三年前就發現這個網站呢？\n\n要找音效素材非常簡單，只要在網站右邊的搜尋框裡面，輸入想要的素材名稱，就可以找到素材囉~ 不過素材都是英文，如果需要的話還是需要[Yahoo字典](http://tw.dictionary.yahoo.com/)或[Google翻譯](https://translate.google.com.tw/?hl=zh-TW&amp;tab=wT)來幫忙一下囉~ 例如說我們需要笑聲，只要輸入laughter或giggle，就可以找到一張列表，一首一首聽聽看囉~\n\n[![2014-02-05_223552](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_223552.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_223552.jpg)\n\n&nbsp;\n\n點選播放鍵可以試聽，然後聽到喜歡的音效以後，只要點選名稱，就可以點選檔案格式下載啦！通常應該是mp3或wav檔，如果你不放心......那就下載zip檔掃個毒吧~ 至於旁邊的廣告... 都已經免費下載了，佛心來著給他點一下廣告，讓這個網站賺一點，不是很好的回饋嗎？\n\n[![2014-02-05_224244](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_224244.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_224244.jpg)\n\n[![2014-02-05_224152](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_224152.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-05_224152.jpg)\n\n就是這麼簡單，非常方便的免費音效素材。\n\n如果你想知道這種網站要怎麼生存，看了看他們的自我介紹...嗯...看來真的是靠別人贊助來著，大家記得除了Royalty Free以外的音效，都要在使用時標明出處喔！給創作者一個尊重，這樣大家以後才有更多免費資源可以利用！\n\n最後，今天既然是2月5號，應該是大家的發薪日才對，大家想到有沒有嘴角也微微上揚一下呢？喜歡《特快車》的話，也請到[Facebook](https://www.facebook.com/motionex)幫忙按個讚喔~ 謝謝~\n\n[![發薪日奸笑](http://www.motion-express.com/wp-content/uploads/2014/02/發薪日奸笑.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/發薪日奸笑.jpg)", slug: "20140205-sound-bible", category_id: 5, author_id: nil, display_date: "2014-02-05", is_public: true, video_embed: nil},
  {title: "【回答問題】AE匯入素材以後畫面比例超怪，該怎麼解決？", content: "\n![2014-02-06_232326](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_2323261.jpg)\n\n素材比例問題，剛好有朋友在問，因為實在難以三言兩語交代完畢，所以寫一篇文章來回應，順便賺人熱淚(咦？)\n\n如果有朋友在使用After Effects或Premiere Pro時，匯入影片素材以後，發現影片素材的比例怪怪的，該要怎麼調整呢？\n\n![2014-02-06_234500](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_234500.jpg)\n\n假如遇到以上狀況，可以依照以下步驟調整：\n\n1\\. 匯入素材以後，在素材欄位選取素材，並按下滑鼠右鍵，選擇Footage Interpretation &gt; Main\n\n[![2014-02-06_215401](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_215401.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_215401.jpg)\n\n2\\. 接著下方欄位可以調整畫面比例，直接看最後面的數字最準，一般來說影片比例都是Square Pixels，但如果攝影機在拍攝時有調整為寬螢幕，可能比例會變成1.21或1.46，這時候就每個都選選看，看畫面會不會變得怪怪的。至於上面有個「Frame Rate」那邊，是給高速攝影機使用的，例如說有拍攝每秒60格的影片，就可以在這裡進行調整成一般的每秒30格或23格。\n\n[![2014-02-06_230952](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_230952.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_230952.jpg)\n\n這邊給各位幾個比例參考一下，一般來說影片都是Square Pixels，如果選到其他比例，就會變成其他樣子......\n\n[![2014-02-06_231128](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_231128.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_231128.jpg)\n\n[![2014-02-06_231223](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_2312231.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_2312231.jpg)\n\n[![2014-02-06_231159](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_2311591.jpg)](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_2311591.jpg)\n\n假如要看看目前這個影片素材的比例，可以看到左上角的影片資訊。\n\n![2014-02-06_231349](http://www.motion-express.com/wp-content/uploads/2014/02/2014-02-06_231349.jpg)\n\n上面的(1.00)指的就是目前影片的比例~ 記得每次匯入素材時假如有發現比例變得奇怪，就可以來這裡看看！\n\n![2](http://www.motion-express.com/wp-content/uploads/2014/02/2.jpg)", slug: "20140206-footage-size-ratio", category_id: 3, author_id: nil, display_date: "2014-02-06", is_public: true, video_embed: nil},
  {title: "Youtube影片要紅，一定要貴人相助嗎？", content: "\n<iframe src=\"http://embed.ted.com/talks/lang/zh-tw/kevin_allocca_why_videos_go_viral.html\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\nTED在2012二月時[有一段影片](http://www.ted.com/talks/lang/zh-tw/kevin_allocca_why_videos_go_viral.html)，主講人是凱文艾羅卡(Kevin Allocca)，講Youtube影片會爆紅的原因，最近我才看到這支短片，覺得觀點很不一樣，值得跟大家分享一下。\n\n到底Youtube影片要紅，靠的是甚麼？艾羅卡提出三個要素：「靠公眾人物點評、一般網友大量參與、爆點」。\n\n有趣的是，三項要素中，只有一項是關於創作本身，其他都是靠他人相助；例如Rebecca Black的單曲《[Friday](https://www.youtube.com/watch?annotation_id=annotation_1927276807&amp;feature=iv&amp;src_vid=GVCzdpagXOQ&amp;v=kfVsfOSbJY0)》在剛出現時乏人問津，一個月內觀看次數不超過1000，後來是因為電視節目Tosh.O的協助，在節目上大肆嘲諷這首MV有多麼好笑，也造成其他名人在Twitter上開始批評：「這甚麼爛MV」，讓這些名人的粉絲注意到這首MV的存在，造成爆紅，幾天內就有數百萬的瀏覽人次。\n\n一般來說為了鼓勵創作，都會強調「創作」本身要夠有梗、夠有趣，才能引起別人的注意。但這回強調的卻是要有一位帶動風潮的人(Tastemaker)協助，才有辦法將影片送到全世界觀眾的眼前。演講中所使用的例子，從[優勝美地的彩虹橋段](https://www.youtube.com/watch?v=OQSNhk5ICTI)、[Rebecca Black的MV](https://www.youtube.com/watch?annotation_id=annotation_1927276807&amp;feature=iv&amp;src_vid=GVCzdpagXOQ&amp;v=kfVsfOSbJY0)、[Nyan Cat動畫](https://www.youtube.com/watch?v=QH2-TGUlwu4)，都是無心插柳的結果，影片本身在發佈時並沒有人關注，而是在之後有公眾人物的提及，才受到關注。所以要紅，到底是個人努力結果，還是他人推薦的結果？\n\n<iframe src=\"//www.youtube.com/embed/fuIydD_9jBE?rel=0\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n艾羅卡再怎麼厲害，也不可能訂出一個標準答案。不過身為Youtube趨勢分析師，他所用的圖表倒給了我們一個很大的啟示：「公眾人物點評」，也就是要有Tastemaker的參與。「Tastemaker」這個字拆開來變成taste maker，也就是「創造風潮的人」，就像《穿著Prada的惡魔》裡面提到的，風潮都是由一群人創造出來的，整個世界只不過是跟隨著這群人在起舞。今天一個人說這個東西好，其他人就會跟著說好，審美觀隨之改變。\n\n大家如果記得先前竄紅的《[Call Me Maybe](https://www.youtube.com/watch?v=fWNaR-rxAic)》這首歌，也應該記得這首歌之所以竄紅，靠的是Justin Bieber在Twitter上發布的一則貼文說：「這首歌真好聽」，接著千萬名粉絲就瘋狂的到Youtube上觀看這首歌的MV，以及到各個音樂網站聽歌。這種爆紅現象，一樣是艾羅卡所說的：「靠公眾人物點評」，Justin Bieber在演藝界基本上早就呼風喚雨，他說好的東西，粉絲一定愛，當然[酒駕](http://www.ettoday.net/news/20140124/319400.htm)和[拿蛋砸別人房子](http://oversea.stnn.cc/toronto/2014/0113/39039.shtml)的部分應該就沒有人喜歡了。\n\n![](http://pic.pimg.tw/anarkia13/1343722758-2275364770.jpg)\n\n所以艾羅卡的觀點適用於全部的影片嗎？行銷人聽到他的觀點，一定會規劃出一支非常有爆點的影片，利用公眾人物進行曝光、並利用這些公眾人物的粉絲參與瀏覽，這樣一定就會紅嗎？\n\n[No Bullshit Marketing](http://nobullshitmarketing.blogspot.tw/2012/02/kevin-allocca-why-videos-go-viral.html)網站上針對艾羅卡這段演講，也提到一個有趣的說法，說演講中使用的例子是「Silly Web Video」(無聊影片)，也就是這些影片打從一開始就沒有要紅的意思。以Rebecca Black的《Friday》為例，[Wikipedia](http://zh.wikipedia.org/wiki/%E7%91%9E%E8%B4%9D%E5%8D%A1%C2%B7%E5%B8%83%E8%8E%B1%E5%85%8B)上說明一開始他媽媽花了4,000美元拍攝了這支MV，但連所屬權都沒談清楚，根本只是個趕鴨子上架、滿足大人夢想的一部影片，但後來由於iTunes上該曲的下載量創造了850,000英鎊的收入，也讓這首歌和MV的所屬權造成糾紛。原本的一支「無聊影片」，變成了一隻金雞母。\n\n與「無聊影片」相反，許多藝人、企業、團體拍攝的影片，本身就是要創造話題、點閱數，這些影片本身有非常強烈的目的，投資的金額也非常巨大，許多MV會花上超過千萬新台幣的成本拍攝，難道這些影片要紅，靠的也是「公眾人物點評、一般網友大量參與、爆點」？在這個資訊爆炸的世界，要「規劃」一支爆紅的影片根本還是得靠點運氣，例如紅極一時的《[Gangnam Style](https://www.youtube.com/watch?v=9bZkp7q19f0)》，後續推出的《[Gentleman](https://www.youtube.com/watch?v=ASO_zypdnsQ)》雖然也有非常大的團隊來規劃這支影片的製作，卻跟前一支MV相比，紅的程度還是差太多了。有更多的影片靠著商業巨資投入，而有著滂伯氣勢和巨大話題，但實際上的影響力卻完全不成比例。\n<iframe src=\"//www.youtube.com/embed/ASO_zypdnsQ?rel=0\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n所以艾羅卡的圖表雖然給了我們另一種觀點，了解公眾人物點評的重要，但整件事情仍然有非常多的討論空間。Youtube影片要紅，除了靠自己，還得靠貴人相助。這樣的說法你覺得呢？", slug: "20140208-youtube-help", category_id: 5, author_id: nil, display_date: "2014-02-08", is_public: true, video_embed: nil},
  {title: "Ruby gem 'Carrierwave' 上傳檔案神器的簡易安裝與使用", content: "\n![](https://farm2.staticflickr.com/1035/1229138273_331e5768f8.jpg)\n\n\n\n>Ruby版本：2.1.2\n\n>Rails版本：4.1.0\n\n>開發環境：MAC OSX 10.9.4\n\n>\n\nCarrierwave是Rails應用程式裏面上傳檔案的簡單工具，上傳的檔案種類不限，在這邊跟大家分享一下安裝與使用carrierwave的方法，主要針對圖片的上傳和簡易編修。主要是從[Railscasts](http://railscasts.com/episodes/253-carrierwave-file-uploads?autoplay=true)學來的，請各位多指教。\n\n以下已經預先完成的項目：\n1\\. 已經建立了一個rails的應用程式\n2\\. 擁有一個product model，底下有title和description兩個項目\n3\\. 已經有基本的products CRUD Controller及view\n\n進入正題：\n\n## 1\\. 設定及安裝\n\n首先打開Gemfile，輸入\n\n```\ngem 'carrierwave'\ngem 'rmagick'\n```\n\n備註1：在安裝rmagick的時候要確認有安裝ImageMagick，若無，則先進行安裝。\n備註2：安裝ImageMagick需要使用Homebrew，如果還沒裝Homebrew則請[先到該網站尋找指令](http://brew.sh/)進行安裝。如果沒有意外的話指令是：\n\n```\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n已經安裝Homebrew的話接下來安裝ImageMagick\n\n```\n$ brew install imagemagick\n```\n\ncarrierwave是用來上傳檔案的gem，至於rmagick是用來處理圖片的gem，其實用carrierwave內建的工具也可以，但rmagick提供比較方便的用法。\n\n接著到Command Line 輸入\n\n```\n$ bundle\n```\n\n到這裡最基本的安裝算完成了。\n\n## 2\\. 設定Uploader\n\n接下來要使用Carrierwave來建立一個uploader，稍後所有上傳的圖片都會存放在這個uploader裡面。\n\n```\n$ rails generate uploader image\n```\n\n產生了一個uploader以後，我們在model當中也需要一個安置檔案的地方。如同剛才所說，目前我們的product model裡面只有title和description兩個項目，現在需要另一個image項目來安放圖片。如果你有未卜先知，早就知道要放圖片，那你的model裡應該會有一個image欄位，屬性是string，用以存放網址。那如果很不幸的沒有，那我們可以一起來增加這個欄位。\n\n```\n$ rails generate migration add_image_to_products\n```\n\n接著到新產生的migration檔案裡面進行修改，增加product中的欄位\n\n```ruby\nclass AddImageToProducts < ActiveRecord::Migration\n  def change\n    add_column :products, :image, :string\n  end\nend\n```\n\n每個人檔案名稱前面那串數字會長得不一樣，不過無妨，內容一樣就好。完成以後進行migration。\n\n```\n$ rake db:migrate\n```\n\n接下來到model檔案裡面，把剛才的image uploader與model做連結，如此一來，確認在此model中上傳的檔案，會傳到該uploader當中。如果你的model檔案跟我的一樣乾乾淨淨，濕亮有型，那把uploader安裝上去以後就會長得像下面那樣。\n\n```ruby\nclass Product < ActiveRecord::Base\n  mount_uploader :image, ImageUploader\nend\n```\n\nmount_uploader是一個動作，而:image是我們剛剛在migrate時幫product這個model設定的新欄位(add_column)，而ImageUploader是我們剛剛在command line使用的 $rails generate uploader image 這個指令所形成的名稱，如果你打的指令是 $rails generate uploader sperm，那你在這邊輸入的就會是SpermUploader，不過我相信不會有人想要upload那個東西的。\n\n另外，因為要在model的image欄位更新，因此在controller裡面也要設定為允許更新，在controller最下方我們製作CRUD時private的地方。\n\n```ruby\nprivate\n    def product_params\n      params.require(:product).permit(:title, :description, :quantity, :image)\n    end\nend\n```\n\n在最後方加上 :image，我們就可以對:image欄位進行存取。\n\n## 3\\. 在View裡面進行設定\n\n接下來就是到view裡面找到new.html.erb，讓我們在產生新的product時，使用者可以選擇上傳圖片檔案。修改大概如下：\n\n```html app/views/products/new.html.erb\n<%= form_for @product do |f| %>\n  Title: <%= f.text_field :title %>\n  Description: <%= f.text_area :description %>\n  Quantity: <%= f.text_field :quantity %>\n  <%= f.file_field :image %>\n  <%= f.submit \"Submit\" %>\n<% end %>\n```\n\n重點在於第5行要加上一個可以上傳圖片的表格欄位file_field，並註明是:image即可。接下來就到index.html.erb，在列表中加上可以呈現圖片的區塊。\n\n```html app/views/products/index.html.erb\n<%= image_tag @product.image_url.to_s %>\n```\n\n不管加在哪，只要確定@product有在controller中設定好即可，image_url是預設的helper，to_s是要確定把上傳的路徑轉變為字串，以免發生錯誤。\n\n至此，基本的Carrierwave運作就算完成了，只要依照正常程序把product建立起來，並在選擇檔案時選擇一張圖片，就可以呈現在index頁面囉~\n\n## 4\\. 利用RMagick將圖片微調\n\n雖然上傳成功，但上傳的圖片大小不對，此時利用RMagick來進行小幅度的修正。\n\n需要在Imageuploader裡面進行調整，檔案裡面有非常多的註解，我們需要把幾個東西解開，首先是第6行的內容。\n\n```ruby\ninclude CarrierWave::RMagick\n```\n\n把前方的 # 符號拿掉，取消註解，就變成上方的樣子，此行會將rmagick這個gem整合到這個uploader裡面來，就可以使用rmagick的功能。接下來到約莫35行的位置，會看到以下內容\n\n```ruby\n # version :thumb do\n #   process :resize_to_fit => [50, 50]\n # end\n```\n\n這時要使用rmagick的公式，在上傳圖片以後，替我們裁切一個預覽的版本，不傷及原本的檔案。因此改為以下內容：\n\n```ruby\n version :thumb do\n    process :resize_to_limit => [200, 200]\n end\n```\n\n藉此，ImageUploader會替我們使用rmagick，創造一個thumb的版本圖片，大小限制在長200寬200以內的圖片，不改變原本圖片的比例。我們要用這個版本的圖片來創造一個list，回到index.html.erb，把展示圖片的image_tag改成以下內容：\n\n```html app/views/products/index.html.erb\n<%= image_tag @product.image_url(:thumb).to_s %>\n```\n\n這樣一來，他就會去抓取:thumb版本的圖片，讓我們的圖片不至於過大。到這邊就是簡單的Carrierwave使用囉，希望大家都使用得順利！\n\n(備註：如果上傳圖片後出現stack level too deep的錯誤，則需要修改Gemfile為gem “rmagick”, :require => “RMagick”，此為OSX會產生的錯誤)\n\n希望大家都成功！", slug: "20140708-ruby-gem-carrierwave", category_id: 6, author_id: nil, display_date: "2014-07-08", is_public: true, video_embed: nil},
  {title: "Rails 簡易搜尋功能", content: "\n![](https://farm8.staticflickr.com/7327/13285821774_5b3f36fde0_z.jpg)\n如果有長期關注的朋友，會覺得我怎麼現在改寫網站設計和網站工程的內容了。不要懷疑，我目前都在玩Ruby on Rails，所以也會寫相關文章，請大家多多指教。\n\n## 今日分享功能：從資料庫中搜尋所有含特定字串的項目\n\n\n\n>Ruby版本：2.1.2\n\n>Rails版本：4.1.0\n\n>系統：MAC OSX 10.9.4\n\n>\n\n今天要分享的是一個Rails非常簡單的搜尋功能，比我想像中的簡單了大概一百倍。可能我原本以為要搞到像Google那樣才算是搜尋，但其實可以弄得很簡單。[Railcast](http://railscasts.com/episodes/37-simple-search-form)裡面也有非常詳盡的說明。\n\n## <span style=\"color: #0000ff;\">前提：</span>\n\n1\\. 安裝Ruby、Rails環境\n2\\. 已建立一個Rails程式，帶有app/views/index.html.erb頁面\n3\\. 有一個model叫做Product，帶有title、description (資料庫中已有數筆資料)\n4\\. 有一個controller包含了index action\n\n搜尋的唯一重點就在於從view回傳一個變數 :search 回controller，剩下的就都交給Rails自建的ActiveRecord指令就好。\n\n## <span style=\"color: #0000ff;\">1\\. 建立搜尋表格：</span>\n\n首先，到view當中建立一個 form_tag ，直接開始建立搜尋欄位\n\n```html\n<%= form_tag products_path, method: :get do %>\n    <%= text_field_tag :search, params[:search], placeholder: \"Search...\" %>\n<% end %>\n```\n\n在畫面中，就會出現一個搜尋框，簡單說明一下：\n1\\. form_tag 使用的 method 方法不一，這邊要限定為method: :get，才能確實抓資料。\n2\\. 連結部分設定回index頁面，也可以設定為其他自訂的搜尋頁\n3\\. params[:search]的使用，會回傳一個search的變數，也就是網址列的後方會出現?utf8=✓&amp;search=search的字樣\n4\\. placeholder是搜尋框內的預設文字，只要使用者輸入任何文字，這段預設文字就會消失\n\n如果你比較喜歡要有『搜尋』這個按鈕，那可以設定為下方的樣式：\n\n```html\n<%= form_tag admin_products_path, method: :get do %>\n    <%= text_field_tag :search, params[:search], placeholder: \"Enter Text...\" %>\n    <%= submit_tag \"Search\", name: nil %>\n<% end %>\n```\n\n唯一有一點需要解釋的是search這顆按鈕按下去以後會預設傳送出commit=search變數到網址列裡頭，沒有意義，所以多設定了 name: nil的部份，讓他不會傳送任何其他多餘的資訊出去。\n\n## <span style=\"color: #0000ff;\">2\\. 建立搜尋功能：</span>\n\n主頁面設定好以後，接下來到controller裡面進行調整：\n\n```ruby\nclass ProductsController < ApplicationController\n    def index\n        if params[:search]\n            @product = Product.where('title LIKE ?', \"%\#{params[:search]}%\")\n        else\n            @product = Product.all\n        end\n    end\nend\n```\n\n這個地方分成兩個區塊，邏輯是：『如果有搜尋，就把搜尋結果列出來；如果沒有進行搜尋，就把所有產品都列出來。』\n1\\. where就是Rails內建用來比對資料使用\n2\\. 'title LIKE ?'代表product底下的title欄位是否帶有特定字串\n3\\. \"%\#{params[:search]}%\"代表我們將剛剛在view中送出的params[:search]變數傳送到這裡來進行搜尋。\#{}符號是將變數正確使用於\"\"符號內，而前後兩個%%符號代表要進行模糊比對而非精確比對，如果是直接填入params[:search]就會進行精確比對。\n\n這樣就可以在搜尋時，讓結果頁面列出所有標題包含特定字串的model項目。到這邊就算是設定完成囉，舉國歡騰！\n\n## <span style=\"color: #0000ff;\">3\\. 進行多個欄位搜尋：</span>\n\n這邊開始是RailsCast沒有講的部分，同樣分享給大家。\n\n剛剛設定的搜尋功能，僅限於搜尋一個欄位，也就是如果要搜尋產品，就只能搜尋title欄位。假如我需要同時搜尋title和description兩個欄位呢？身為一個搜尋功能，要搜尋所有文字資料也是很合理的。\n\n因此，我們可以將controller的搜尋內容修改如下：\n\n```ruby\nclass ProductsController < ApplicationController\n  def index\n        if params[:search]\n                @product = Product.where('title LIKE ? OR description LIKE ?', \"%\#{params[:search]}%\", \"%\#{params[:search]}%\")\n        else\n                @product = Product.all\n        end\n  end\nend\n```\n\n看到哪裡不同了嗎？在where後方跟著的句法，變得有點長，因為我們設定了同時搜尋title和description兩個項目，中間加了一個OR，代表只要有一個地方符合，就會出現在搜尋結果中，而後方一次重複的\"%\#{params[:search]}%\"則是因為針對description進行了同樣的搜尋，所以在後方也重複出現。\n\n希望大家都設定成功喔！\n\n(圖片來源：[Sean MacEntee](https://www.flickr.com/photos/smemon/13285821774/in/photolist-mf2iWE-5NByM-c3vzMS-m9mdpr-fz9kwb-73Gqjb-7NxJZy-sHTKc-2TvQM-efonGa-6rfB6v-9Bzjqm-6YwPJS-7w4yYu-sHTJU-dM5eSi-6riGM8-mZP5Vi-cnfEWW-dvRx6R-hS96Pg-edUmxA-6f3poB-8BdNSR-9qSsqf-do4P1q-6Z1ULA-9qSspN-d9Pguk-e3mqZ4-6rfUvF-mGNh4V-dasNGE-5oRtBF-7vZK3r-9qPsEz-bRTM66-9qPsFD-7uugSY-mWHDW8-yPKXc-6JMqMW-pHvNb-dNBftt-dzbHTn-4WDCSj-hqjuL-9W9EVi-ae6Fnc-wYis8))", slug: "20140714-rails-basic-search", category_id: 6, author_id: nil, display_date: "2014-07-14", is_public: true, video_embed: nil},
  {title: "Ruby gem 'nested_for' 一次增加多筆資料", content: "\n今天要分享的是一次多筆增加model資料的方法，使用[Ryan Bates的gem \"nested_form\"](https://github.com/ryanb/nested_form)，適用的情況例如：\n1\\. 購物網站的商家，要為商品一次增加許多商品圖片\n2\\. 待辦事項清單，在清單中要一次增加許多待辦事項\n\n\n\n從這裡可以很清楚的看出，如果一次只能新增一張圖片，使用者會超麻煩，也會慢到想殺人；同理，如果待辦事項清單上一次只能增加一個待辦事項，那光讀取頁面的速度，就慢到足以讓人想睡覺了。這時候可以使用nested_form這個gem，在新增附屬的model時可以一次新增許多事項。\n\n## <span style=\"color: #0000ff;\">示範檔案：</span>\n\n我已經做好一個[在Heroku上的範例網站](http://nested-form-example.herokuapp.com/)，操作時可一邊參考。另外[原始碼也在Github上](https://github.com/nkj20932/nested_form_example)，請一同觀看。\n\n使用方法請看以下說明，這邊假設各位對於nested_attributes還不太熟悉，所以會說明得比較完整一點。\n\n## <span style=\"color: #0000ff;\">前提：</span>\n\n```\nRuby版本：2.1.2\nRails版本：4.1.0\n系統：MAC OSX 10.9.4\n```\n\n準備事項：\n1\\. 安裝Ruby、Rails環境\n2\\. 已建立一個Rails程式，已用scaffold產生出event的model、controller、view\n3\\. event model帶有title、content\n4\\. 另一個model是task，包含event_id、content、due\n5\\. 對於model之間的belongs_to和has_many稍有了解\n\n## <span style=\"color: #0000ff;\">安裝：</span>\n\n在Gemfile中安裝nested_form這個gem。\n\n```ruby\ngem \"nested_form\"\n```\n\n在command line中執行bundle，並且加入要求使用jQuery效果：\n\n```ruby\n//= require jquery_nested_form\n```\n\n## <span style=\"color: #0000ff;\">建立model的正確關係：</span>\n\n首先，確認兩個model之間有建立正確的關係。\n\n```ruby\nhas_many :tasks\n\naccepts_nested_attributes_for :tasks, \n  :allow_destroy => true, \n  :reject_if => :all_blank\n```\n\n```ruby\nbelongs_to :event\n```\n\n因為我們要在建立event的同時也建立tasks，所以要寫上`accepts_nested_attributes`，允許在event的new action時，可以同時建立其中的task資料，就可以不用額外建立task的new action。而後方附帶 `:allow_destroy`和 `:reject_if`的選項，前者代表我們能正確減少表單送出的數量，而後者是確保表單空白時，就不會有資料留下。這邊講起來比較模糊，如果各位跟我當初一樣白目的話，就可以先不寫上後面那兩行，等遇到錯誤時......嗯哼！\n\n## <span style=\"color: #0000ff;\">修改controller：</span>\n\n接下來要在controller中加上允許task的存取，因此我們找到原本scaffold時建立的event_params，在後面加上一些東西，變成：\n\n```ruby\ndef event_params\n  params.require(:event).permit(:title, :content, :date, :tasks_attributes => [:id, :content, :due, :_destroy])\nend\n```\n\n`:tasks_attributes`把後方[]當中的欄位包起來，其中把:id加入，是為了存取時把所有重複id的task拿掉，以免造成重複資料的建立；而後方的_destroy，是為了配合剛剛我們在model中設定的:allow_destroy選項，讓待會兒我們在設定增加和減少欄位時，可以正確的把欄位減少。\n\n## <span style=\"color: #0000ff;\">修改view：</span>\n\n在scaffold起來的view當中，我們可以修改event當中的_form.html.erb，讓new和edit都可以使用。一般我們在建立資料時，撰寫form時都是使用form_for這個helper，而在使用nested_form時，要修改成nested_form_for如下：\n\n```html app/views/events/_form.html.erb\n<%= nested_form_for(@event) do |f| %>\n  ......\n<% end %>\n```\n\n而在這份表格中，我們要加上:task的表格，讓在建立event時，一同把tasks建立起來。\n```html app/views/events/_form.html.erb\n<%= f.fields_for :tasks do |t| %>\n\n新待辦事項：\n\n內容：<%= t.text_field :content %>\n\n截止時間：<%= t.text_field :due %>\n\n<%= t.link_to_remove \"移除此待辦事項\" %>\n\n<% end %>\n\n<%= f.link_to_add \"新增待辦事項\", :tasks %>\n\n```\n\n上方搭配中文字應該非常清楚了，這個gem最重要的兩個helper，一個是link_to_remove，一個是link_to_add，只要按下『新增待辦事項』的按鈕，就可以增加欄位，為這個event增加更多的task；而如果增加太多欄位，則可以利用『移除此待辦事項』的連結，把不需要的欄位移除。\n\n因為我們在model檔案裡面有加上:reject_if => :all_blank，所以如果把需要填入資料的地方都留白，就不會儲存，同等於把這筆資料刪除；這個方法可以間接用來移除不想要的欄位。如果剛剛的設定有錯誤，可能就會發生一次增加多個欄位、或是明明刪了欄位卻有儲存等窘境，這都是我過來人的無知和痴愚，請大家盡量避免。\n\n## <span style=\"color: #0000ff;\">結語：</span>\n\n以上就是這個nested_form的基本用法，如果有需要進階用法，例如task表格要建立在event之外，則可以利用data-target的設定，讓兩者有關連。所有更多細節的應用部分，請參考[Ryan Bates的github檔案](https://github.com/ryanb/nested_form)。\n\n假如有什麼使用的問題，也歡迎到我建立的[範例網站](http://nested-form-example.herokuapp.com/)來試用，或是到該網站的[Github頁面](https://github.com/nkj20932/nested_form_example)看詳細的程式碼，謝謝。", slug: "20140722-ruby-gem-nested-form", category_id: 6, author_id: nil, display_date: "2014-07-22", is_public: true, video_embed: nil},
  {title: "Rails 使用 RSpec 寫測試：入門操作篇", content: "\n![](https://farm9.staticflickr.com/8760/17366657091_4d0935d0e4_o.jpg)\n\n前一篇提到RSpec在Rails當中的安裝，現在要實際執行一次BDD開發，讓大家了解實際流程為何。開發環境與前一篇相同，因此便不再贅述。\n\n## <span style=\"color: #0000ff;\">開發規格</span>\n\n每一次的網站開發都需要規劃出規格表，不管是為客戶規劃網站、或是新產品開發，都需要有詳細的規格，整個團隊才能目標相同。以下是這篇文章會完成的一個網站。\n\n\n\n>1. 使用者能夠在網站上產生文章，文章會包含標題、內容欄位\n\n>2. 使用者能夠產生評論，藉以回應文章，評論包含內容欄位\n\n>3. 每個文章都會有多個回應\n\n>4. 文章底下可以看到該篇文章所有回應\n\n>5. 文章的標題、內容不能為空白\n\n>6. 回應的內容不可為空白\n\n>7. 網站首頁是所有文章列表\n\n>\n\n好了，我們開出了一個簡單的網站規格，我們來把這個東西寫成RSpec的測試，再根據這些測試的內容來撰寫網站程式碼。\n\n首先，進行以下操作，將rails的應用程式建立起來，以及[安裝RSpec](http://www.motion-express.com/?p=2952)。\n\n```\n1. $ rails new rspec_test\n2. 修改Gemfile安裝RSpec\n3. $ rails generate rspec:install\n4. 修改.rspec檔案解除warning\n```\n\n## <span style=\"color: #0000ff;\">RSpec測試撰寫：</span>\n\n接下來進入正文，根據以上開出來的規格，我們需要建立post和comment的model，讓兩者有從屬關係，以及建立相對應的controller和view。\n\n我們在spec目錄底下，建立一個 integration_spec.rb 檔案，將所有測試寫在裡面，因為稍後我們使用scaffold建立起來資料以後，會有非常多不必要的測試項目，那些部分我們就都跳過。以下是測試內容：\n\n```ruby\nrequire 'rails_helper'\n\n#這裡進行Post的model測試\nRSpec.describe Post, :type => :model do\n\t#在每一個it的測試項目之前，都先建立一個post資料\n\tbefore(:each) do\n\t\t@post = Post.new\n\tend\n\n\t#測試post是否包含標題和內容\n\tit \"should contain :title &amp; :content\" do\n\t\t@post.title\n\t\t@post.content\n\tend\n\n\t#測試post如果標題空白，就不能儲存\n\tit \":title should not be blank\" do\n \t\t@post.title = nil\n \t\t@post.save.should == false\n\tend\n\n\t#測試post如果內容空白，就不能儲存\n\tit \":content should not be blank\" do\n \t\t@post.content = nil\n \t\t@post.save.should == false\n\tend\n\n\t#測試post要和comment建立has_many的關係\n\tit \"has many comments\" do\n\t\t$post = Post.reflect_on_association(:comments)\n\t\t$post.macro.should == :has_many\n\tend\nend\n\n#這裡進行Comment的model測試\nRSpec.describe Comment, :type => :model do\n\tbefore(:each) do\n\t\t@comment = Comment.new\n\tend\n\n\t#測試comment是否包含內容\n\tit \"should contain :content\" do\n\t\t@comment.content\n\tend\n\n\t#測試comment如果內容空白，就不能儲存\n\tit \":content should not be blank\" do\n \t\t@comment.content = nil\n \t\t@comment.save.should == false\n\tend\n\n\t#測試comment要和post建立belongs_to的關係\n\tit \"belongs to post\" do\n\t\t$comment = Comment.reflect_on_association(:post)\n\t\t$comment.macro.should == :belongs_to\n\tend\nend\n```\n\n由於目前我們什麼資料都還沒有，所以測試都不會通過。為了解決測試項目，我們現在就來實際操作，架構網站。\n\n```\n$ rails generate scaffold post title content\n$ rails generate scaffold comment post_id:integer content\n```\n\n這兩個指令會產生許多資料，但我們實際會用到的其實沒那麼多。接下來我們直接來解決測試的問題。\n\n```ruby\nclass Post < ActiveRecord::Base\n  validates :title, :content, presence: true\n  has_many :comments\nend\n```\n\n```ruby\nclass Comment < ActiveRecord::Base\n  validates :content, presence: true\n  belongs_to :post\nend\n```\n\n以上兩個檔案的修改，就足以通過所有測試。這時候我們到Command Line執行  $rspec spec/integration_spec.rb 就會看到八項測試全部通過啦！\n\n你可能會覺得，為什麼這麼簡單的東西，測試要寫得這麼複雜？因為目前我們的網站架構還非常簡單，測試內容相對看起來很多，但等到網站規模超大的時候，相對之下測試檔案的內容會是非常少的！\n\n## <span style=\"color: #0000ff;\">測試route和view：</span>\n\n不過在規格表上還有幾個東西需要解決的：\n\n1. 文章底下可以看到該篇文章所有回應\n2. 網站首頁是所有文章列表\n\n\n如果要在文章底下看到所有回應，代表我們要在view裡面可以檢查有comment的出現，而首頁的設定也需要在route上進行撰寫。以下是我們繼續在integration_spec.rb檔案當中增加的項目：\n\n```ruby\n#這裡進行Post的view測試\nRSpec.describe \"posts/show\", :type => :view do\n  #建立post和comment的資料，讓同一筆post裡頭含有多筆comment\n  before(:each) do\n  \t@post = assign(:post, Post.create(:title => \"Title\", :content => \"Content\"))\n  \t@comment_1 = @post.comments.create(:content => \"display_comment_1\")\n  \t@comment_2 = @post.comments.create(:content => \"display_comment_2\")\n  end\n\n  #測試view裡面，post的顯示頁面要同時顯示他所有的comment\n  it \"renders comments by post\" do\n    render\n    rendered.should include(\"display_comment_1\")\n    rendered.should include(\"display_comment_2\")\n  end\nend\n\n#這裡進行route測試\nRSpec.describe \"Routing root\", :type => :routing do\n\t#測試網站首頁是包含所有文章的post index頁面\n\tit \"to posts index\" do\n\t\texpect(:get => \"/\").to route_to(\"posts#index\")\n\tend\n```\n\n為了通過以上測試，首先先找到config/routes.rb檔案，增加以下幾行：\n\n```ruby\nresources :posts do\n  resources :comments\nend\n  root to: \"posts#index\"\n```\n\n上面檔案第04行的部份，就等於把首頁設定到文章列表，已滿足RSpec的測試，所以最後我們就是要確保在post的show.html.erb當中可以看到所有的comments。我們在以下頁面增加幾行程式碼：\n\n```ruby\n  def show\n    @comments = @post.comments.all\n  end\n```\n\n```html app/views/posts/show.html.erb\n<% @post.comments.each do |c| %>\n\t<%= c.content %>\n<% end %>\n\n<%= link_to \"New Comment\", new_post_comment_path(@post) %>\n```\n\n這樣子在post的show.html.erb當中，就可以看到該篇post的所有comment，不過因為我們是使用scaffold的方法創造兩個model，所以在路徑上還有許多預設路徑需要修改，整個網站才能正常運作，以下是需要修改的地方：\n\n1\\. 修改第01行\n\n```html app/views/comments/_form.html.erb\n<%= form_for [@post, @comment] do |f| %>\n```\n\n2\\. 修改第05行\n\n```html app/views/posts/new.html.erb\n<%= link_to 'Back', post_path(@post) %>\n```\n\n3\\. 修改new的action，約莫第16行\n\n```ruby\ndef new\n  @post = Post.find(params[:post_id])\n  @comment = @post.comments.build\nend\n```\n\n修改完成以後，再執行一次測試，9個測試都順利通過！我們順利的用RSpec建立一個Rails網站囉！\n\n[整體網站示範內容請看Github。](https://github.com/nkj20932/rspec_example)", slug: "20140723-rspec-basic", category_id: 6, author_id: nil, display_date: "2014-07-23", is_public: true, video_embed: nil},
  {title: "Rails 使用 RSpec 寫測試：基本說明及安裝篇", content: "\n![](https://farm8.staticflickr.com/7758/17341053606_9b5a762298_o.jpg)\n\n為什麼網站或軟體開發還要額外寫測試？關於這點，在[ihower的投影片裡頭](http://www.slideshare.net/ihower/rspec-7394497)已經講得非常詳細了。簡單來說，網站規模大時，如果每個功能都要在瀏覽器上一個一個測試，只會天荒地老而已；另外，軟體或網站未來在擴充功能時，如果已經有完整的測試碼，可以確保在編修時舊功能不受影響。\n\n比起Rails內建的測試，RSpec的測試寫法較貼近日常生活中的英文語句，閱讀起來較無障礙，這篇文章主要是讓大家了解一下RSpec的基本用法，讓大家有個概念，未來在寫Rails時，可以先使用RSpec撰寫測試，再開始撰寫程式。這種撰寫方式又稱為Test Driven Development或Behavior Driven Development。\n\n在Railscasts裡面，Ryan Bates也講到：『開發Rails時，根本不需要開瀏覽器，等你把後端全部撰寫完成，要動到view或前端功能時，再開瀏覽器吧！』希望我也早日能到這個階段......\n\n```ruby\nRuby版本：2.1.2\nRails版本：4.1.0\n系統：MAC OSX 10.9.4\n開啟一個新的Rails application\n```\n\n## <span style=\"color: #0000ff;\">安裝：</span>\n\n首先到Gemfile\n```ruby\ngroup :test, :development do\n  gem \"rspec\"\n  gem \"rspec-rails\"\nend\n```\n\n意思是我們只在test和development環境底下安裝即可，等到production階段時，就不需要安裝囉！(到實際production環境時就已經不叫『測試』了)接下來到command line執行bundle，將gem安裝上去，並安裝rspec。\n\n```\n$ rails generate rspec:install\n```\n\n接下來會看到RSpec為你建立了一個spec的資料夾，我們所有的測試都會在裡面進行。這時候可以直接輸入rspec指令，他會自動尋找所有spec資料裡面的測試項目進行測試；由於我們現在什麼都沒有，所以就會看到 0 examples, 0 failures 這個皆大歡喜的結果。到此算是安裝完成。\n\n不過如果你有看到一大串的錯誤訊息，開頭是： warning: loading in progress, circular require considered harmful 。這是rspec跟許多其他gem有不相容的問題，並非嚴重的錯誤，但錯誤訊息實在太龐大，會影響到我們開發的視線，所以我們需要到資料夾最上層的地方找到.rspec這個檔案，把 --warning 這個敘述移除，就可以移除這個錯誤訊息。\n\n```ruby\n--color\n--warning\n--require spec_helper\n```\n\n## <span style=\"color: #0000ff;\">RSpec基本結構說明：</span>\n\n安裝完成以後，簡單說明一下測試的寫法。首先到spec資料夾底下，手動建立一個 example_spec.rb的檔案，注意：所有測試檔案都需要使用 _spec.rb 當作結尾，RSpec才抓得到。\n\n接下來我們在檔案中加入幾個敘述\n\n```ruby\nrequire \"rails_helper\"\n\ndescribe \"The integer i\" do\n\ti = 1\n\n\tit \"should be 1\" do\n\t\ti.should == 1\n\tend\t\n\n\tit \"should larger than 0\" do\n\t\ti.should > 0\n\tend\n\n\tit \"should be 2\" do\n\t\ti = i + 1\n\t\texpect(i).to be 5 \n\tend\n\nend\n```\n\n首先，第01行的require方法，是要讓我們可以使用Rails特別為RSpec設計的語法，所以每個spec檔案開頭都要加入這個敘述。第03行開始就是測試內容，他的結構最外層是describe...do，意思是我們描述某個事件，而事件當中會包含幾個測試(RSpec中稱為example)，每一個example都是用 it...do 的方式進行。\n\n所以在上述範例中，可以看到我們先設定describe是 \"The integer 1\" 代表我們要對這個東西進行測試，文字敘述寫得越明白越好，最好是簡潔有力又好懂，對自己或別人未來要看的時候比較方便。\n\n接下來是連續三個example，每一個example都包含了should或expect的說法，這兩個東西是RSpec測試的核心，因為我們就是藉由『期望』一些特定條件的達成，讓整個程式可以順利進行。已上面的例子來看，我們先設定好 i = 1 ，所以在第一個敘述當中，我們設定一個條件是 i.should == 1 ，如果i不是1，就會有錯誤產生。\n\n最後要補充的是，should和expect是兩種不同的用法，但有一樣的結果，純粹就是兩種撰寫風格。關於用法的不同，可在[說明文件](http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax)中了解。\n\n## <span style=\"color: #0000ff;\">基本錯誤與修改：</span>\n\n在上述的例子中，我們需要在command line中執行，檢查是否能夠順利通過。有兩種撰寫方法：\n\n```\n$ rspec\n$ rspec spec/example_spec.rb\n```\n\n第01行會搜尋整個Rails當中的測試項目進行測試，而第02行只會執行單一項目，要注意指定檔案時必須寫出完整的路徑。\n\n就上述例子來看，執行以後，會發現一個錯誤。\n\n```\nFailures:\n\n  1) The integer i should be 2\n     Failure/Error: expect(i).to be 5\n\n       expected # => 5\n            got # => 2\n```\n\n代表我們在檔案中撰寫的測試內容有錯，因為 i = i + 1 計算過後是2，而非5，所以就有這樣的錯誤訊息。我們可以回到檔案中進行修改預期的結果，讓他變成 `expect(i).to be 2`，再執行一次rspec，就會看到所有測試都順利通過了。\n\n到這邊算是了解RSpec如何運作了！但目前為止我們只是自high而已，根本沒有把RSpec放進Rails，也不知道要如何依照測試的項目進行開發。所以下一篇我們就要進行實際的一個BDD (Behavior Driven Development)開發囉！\n\n## 補充：should用法造成deprecation\n\nRspec從3.0之後的版本，會在should出現時出現deprecation警告，告訴你這個用法已經過時啦～鼓勵大家使用expect，詳細的更新說明可參考他們[在部落格上的文章](https://www.relishapp.com/rspec/rspec-expectations/docs/syntax-configuration)。\n\n若堅持要使用should，又不想看到錯誤訊息，則可到spec/spec_helper.rb裡面修改訊息，先找到以下地方：\n\n```ruby\nRSpec.configure do |config|\n  #一堆註解\nend\n```\n\n接著增加以下內容：\n\n```ruby\nRSpec.configure do |config|\n  config.expect_with :rspec do |c|\n    c.syntax = [:should, :expect]\n  end\nend\n```\n\n這段的意思是，設定在RSpec裡面，should和expect的用法都要能正常使用。接下來在所有測試當中，should就都可以使用也不會有錯誤訊息了。", slug: "20140723-rspec-usage", category_id: 6, author_id: nil, display_date: "2014-07-23", is_public: true, video_embed: nil},
  {title: "Mac 萬用搜尋工具 Alfred 讓雙手再也不用離開鍵盤", content: "\n[![](http://www.motion-express.com/wp-content/uploads/2014/08/Alfred-logo-e1407037946319.jpeg)](http://www.motion-express.com/?p=2985)\n\n聽過一段話讓我印象深刻：『操作電腦的裝置越單純越好，要不就只用滑鼠，要不就只用鍵盤。對插畫家來說，從頭到尾都用一支筆是再方便不過；而對coding的人來說，最好能從頭到尾都只用鍵盤，減少交替使用的麻煩時間。』\n\nSublime text編輯軟體就是對此觀念的最佳實踐，內建的搜尋功能完全就是一個方便到不行。而這個使用習慣，只要在Mac環境底下安裝[Alfred](https://itunes.apple.com/hk/app/alfred/id405843582?mt=12)這套軟體，就可以徹底延伸到平日使用電腦的習慣當中。\n\n[<span style=\"color: blue;\">安裝方式</span>](#install)\n\n## <span style=\"color: blue;\">基本功能</span>\n\n只要按下鍵盤上的<span style=\"background-color: #E6E6E6;\">alt + 空白鍵</span>，就會出現以下搜尋框\n\n![](https://farm9.staticflickr.com/8892/16744519514_7fd91b2e10_o.png)\n\n這個輸入框可以進行三種搜尋：\n1\\. 搜尋電腦內的應用程式\n2\\. 加上<span style=\"background-color: #E6E6E6;\">file</span>或<span style=\"background-color: #E6E6E6;\">open</span>當開頭，搜尋電腦內特定檔案\n3\\. 搜尋google或wikipedia\n\nGoogle搜尋就不用多加說明，在這個強烈依賴搜尋的時代，這個功能一定是最常使用的。而在搜尋應用程式和檔案的部分，例如我輸入一個e，就會出現以下電腦內有的應用程式。\n\n![](https://farm9.staticflickr.com/8879/17341088676_fbed45110e_o.png)\n\n不用輸入完整，只要按下<span style=\"background-color: #E6E6E6;\">enter</span>，就等於選擇第一個結果。\n\n## <span style=\"color: blue;\">進階功能</span>\n\n除了基本搜尋之外，有幾個功能我覺得也相當實用的：\n\n<span style=\"color: blue;\">1\\. 查字典</span>\n\n預設只要在搜尋前方加上<span style=\"background-color: #E6E6E6;\">define</span>，就可以查字典。不過小弟覺得def有點太長，在設定裡面調整成<span style=\"background-color: #E6E6E6;\">def</span>，如果你有個人習慣的方法也可以自訂。查找結果如下：\n\n![](http://www.motion-express.com/wp-content/uploads/2014/08/螢幕快照-2014-08-03-下午12.55.44.png)\n\n<span style=\"color: blue;\">2\\. 計算機</span>\n\n計算機真的是懶人專用，在alfred裡面進行簡單的運算是再方便不過的事情，直接輸入數字和算式即可。最後按下Enter即可退出。\n\n<span style=\"color: blue;\">3\\. 檔案內文搜尋</span>\n\n這個功能非常的神奇，但也相對考驗電腦的強度。只要以<span style=\"background-color: #E6E6E6;\">in</span>開頭的搜尋，電腦會查找所有文字文件例如pdf和word的內文，並列出所有含有該字串的文件。小弟目前電腦裡的文件不多，如果有人電腦裡有爆多文件，不知道搜尋起來的效率如何。但不可否認的是，對許多坐辦公室的人來說，這個功能能快速找到需要的文件。例如我搜尋gem字串，首先跳出的是rails-101這個pdf檔案。\n\n<span style=\"color: blue;\">4\\. 其他功能</span>\n\n在這邊就不贅述其他功能，除了可以自訂搜尋資源之外，Alfred也可以針對各項外觀顯示進行修改，變成自己習慣的樣子。他也提供powerpack的許多進階功能，雖然需要付費，但有需要的朋友也可以到[官網](http://www.alfredapp.com/powerpack/)看一下，說不定可以讓生產力大增。\n\n## <span style=\"color: blue;\" id=\"install\">安裝</span>\n\n1. [官網下載](http://www.alfredapp.com/)\n2. 直接啟動appstore搜尋alfred即可\n3. [從appstore網頁查看](https://itunes.apple.com/hk/app/alfred/id405843582?mt=12)。", slug: "20140803-alfred", category_id: 5, author_id: nil, display_date: "2014-08-03", is_public: true, video_embed: nil},
  {title: "一年的公關心得，給我愛的頤德", content: "\n![](https://farm9.staticflickr.com/8824/17366717741_7cfeb2a14f_o.jpg)\n\n在公關產業待了將近一年時間，準備轉行去當網站工程師。希望在工作交替的這段時間，能把一些心得記錄下來。同時，也給那些想要進頤德公關的朋友一些參考。\n\n公關產業低薪、加班情況已經不是新聞，在我進入之前，也早就抱有必死決心，認為公關產業是個試煉場。這一年來，跟同年齡的許多朋友相比，我賺的很少，加班情況也都比他們嚴重；但同時也很有自信的要說我進步的速度快一百倍。對於打算走創業這條路的我來說，整個產業視野的提升、客戶溝通經驗、企業需求等等，這些經驗真的是難能可貴。\n\n這是一篇兼具分享、抱怨、建議的文章，請允許我放肆的亂寫。\n\n## 面對『消費者最大』的文化\n\n不管在哪個圈子，只要面對『消費者』，就免不了看這些人的臉色。每一個人都是，不分國籍、不分男女，包括你我。\n\n我這輩子做過很多事情：架網站、美術設計、做影片、街舞、翻譯、行政庶務、寫論文、企劃、提案等等，除了寫論文之外，所有事情都拿來賺錢過；當然，所有事情都會被人糾正過：『你這個應該要怎麼怎麼做』。\n\n說實在，我們每一個人只要站在『消費者』的立場，對於這些設計、企劃會吹毛球疵，有些甚至在過程中看到不爽的地方，就會一一要求修改。在公關、設計、廣告、行銷產業，這些東西更是常態，『寬以律己、嚴以待人』，當不是自己做的時候，都覺得很簡單，這是人的通病。尤其在面對餐飲業的時候更加明顯。\n\n這其實會產生一個矛盾點。假設今天我們要辦一場活動，跟客戶簽訂合約時，都會設定一個『目標』（KPI），例如要有200篇新聞曝光、現場要有100個報名民眾等等，這個目標代表我們服務的義務。但是客戶到底有沒有尊重這個KPI呢？不管我們做什麼樣的事情、提什麼樣的案，都會被客戶說這個要改、那個要改，會因為種種理由包括『與公司形象不符』或『創意不足』等等，一切程序都要符合客戶的要求才能進行。\n\n試問，如果沒有達到當初設定的目標（KPI），那該檢討的到底是客戶還是我們？被改得完全不同的提案、被改得完全不同的程序，儘管活動最後執行有80%是我們執行，但那被客戶干涉的20%，有沒有可能就是最後沒有達到目標的原因？但客戶可不這麼認為，因為付錢的人最大，所有的錯都會怪到我們頭上，大家也似乎都默默這麼認為。\n\n我認為所謂的『服務』，是要讓消費者或客戶達到滿意，但服務是要有尊嚴的，不是在那邊給人改來改去。當初設定好目標，就是依照目標來執行，如果在程序上也有千百個要求，那公關產業豈不是只是工具人嗎？\n\n當然，這種『消費者最大』的認知其實也跟整個文化有關係，講個三天三夜也講不完。從近期的原燒事件、以前的DELL標錯價事件，都可以看出大家覺得花錢的人最大，收錢的人不需要得到太多尊重。這不只是公關、行銷、設計產業的困境，而是整個文化的難題：只要是給錢的人，都會有架子。\n\n除了抱怨客戶的腦袋，在這邊也呼籲大家：大家都想穿好的、吃好的、過好的，但真的要尊重拿錢服務的人，他們不是腦殘，如果已經有設定好服務的內容和目標，請給他們多點空間，謝謝。\n\n## 欲安外，必先攘內\n\n面對客戶是一種『外患』，但其實這一年來也面對了不少『內憂』。我頻繁接觸兩種主管的思考邏輯，先匿稱兩種人為福爾摩斯與華生，這兩種服務客戶的邏輯南轅北轍，也造成在我們在工作上有很不一樣的心情。\n\n福爾摩斯認為：『如果跟客戶合約上寫A, B, C三件事情，我們不只要把三件事情漂亮做好，更要完成相關的D, E, F額外三件事情，報告的時候才能讓客戶驚艷，以達到最高的滿意度。』\n\n華生認為：『如果跟客戶合約上寫A, B, C三件事情，我們就把這三件事情漂亮的做好；並在不增加客戶預算及我方人力支出的情況下，提供D, E, F三個額外建議。如果客戶滿意，對建議有心動，我們再談。』\n\n看得出兩種邏輯差在哪嗎？福爾摩斯強調的是『爆發』，華生強調的是『穩健』，兩種邏輯都沒有錯。就像投資理財一樣，穩健有穩健的作法，可以穩穩賺；超強力槓桿也有超強力槓桿的玩法，用小資本玩出大賺頭。有工作經驗的大家都知道，除了傳統產業之外，大部分公司的老闆和主管都懷抱著賺大錢、做大事的心理，心中莫不希望能有一番作為，不管『爆發』還是『穩健』，初衷都是希望能把事情做好。\n\n但真正能跳下來一起和員工向前衝的主管有多少呢？很多主管有上頭的老闆要應付、有家庭負擔、有交際應酬、有額外的事業要煩惱，根本無暇陪著員工一起衝。更重要的，是這些主管和老闆沒有去思考要如何讓員工感受到『我心與你們同在』。當上層的人不在現場，又無法讓下層感受到『一起』的誠意，下層員工很難對目標有強大的向心力。\n\n回到福爾摩斯和華生的部份。各位試想，如果主管實在太忙，制定政策、分配工作時沒辦法完整顧及員工感受(據我所知很多公司都如此)，哪一種工作邏輯會讓員工比較喜歡？福爾摩斯的『爆發』會讓客戶很喜歡，但員工做起來會很想死，因為這是一種『結果導向』的邏輯，為了100分的結果，要花上1000分的努力。這位福爾摩斯只要在最後出一張嘴，說『大家辛苦了』就好，天下太平。\n\n反之，華生的『穩健』從根本的邏輯上就有體諒員工，跟客戶簽約以後，盡全力把所有工作完成，在滿意度ok的狀況下，將整個案子處理完畢。通常客戶會一變再變，狀況超多，但就華生的邏輯來看，就是要不斷去擋子彈、攔截額外加重的工作，才能讓團隊成員不會有太多額外負擔。說實在，要當華生已經夠累了，整個團隊已經苦哈哈，誰還有多餘的心力去當福爾摩斯？\n\n『但如果沒有福爾摩斯的「爆發」，要如何在這個服務已經飽和的市場中凸顯自已？』你可以能會這樣問。\n\n沒錯，一定要有『爆發』，才能在現在的紅海中殺出重圍。但重點是到底整個團隊有沒有向心力呢？先排除創意、技術面來看，如果這位福爾摩斯能夠跳到整個團隊中，讓整個團隊能真正感受到『我心與你同在』，那這個問題其實就迎刃而解。\n\n該怎麼做？我沒當過主管，無從分享。但至少在工作的這兩年中，所有遇見的福爾摩斯都沒有辦法讓底下成員死心蹋地的服從。\n\n## 為什麼公關公司會超低薪、狂加班\n\n上頭所有內容都是公關產業會遇到的困境，也是造成加班、低薪的主因；關於低薪的部分還是要認真說明一下，公關公司本身的收益確實要比其他產業來得少，因為大多數客戶給的錢不多，覺得『你不過就是中間人的角色，又不用自己做事』，客戶不知道企劃、創意都會炸死無數腦細胞，看別人做很簡單，所以給的錢相對少。例如捧紅『開喜』的葉兩傳就是很好的例子，當初開喜根本不願意給多少錢，結果葉兩傳一出手，開喜婆婆立刻傳變大街小巷。想要只花一點點錢，獲得很好的創意和結果，這樣客戶的心態，至今還是蔓延在很多公司內。\n\n另外，儘管從客戶那邊收進來的錢不少，但員工實際工作時間，因為有像福爾摩斯那樣的『內憂』，又有驕傲消費者心態的客戶當『外患』，整體工作時間超級長。這樣算下來，大家可以想像，光是『加班費』員工就少拿了許多。員工額外貢獻給公司的，根本就是無形中大幅超越實質上的貢獻，因此員工福利的部份，相較起來只能算是雞毛蒜皮。其實頤德福利算不錯了，自由時間多、員工旅遊多、免費零嘴飲料很多，只是跟實質貢獻的時間相比，獲得的還是很少。\n\n啥？專案獎金？我知道很多公司都有，但那是給資深員工拿的。站在公司立場，新人來來去去，給太多獎金也不一定會留下來，不如留著給那些真正有長遠貢獻的員工才可以。『如果給新人的都這麼少，又這麼操，新人會願意留下來嗎？』如果有此疑問，我回答：人性是保守的。那些願意在新進員工上壓寶的老闆，真的是少數；不是所有人都會像蕭何一樣，看到有潛力的韓信都會願意重用。\n\n因為整個大環境的影響，這些困境至少在近10~20年內不會改變。\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/2CV_Wo91JHA?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n\n## 頤德公關是一家好公司嗎\n\n公關產業本身很可憐，但就一家公關公司而言，我會回答『是一家好公司』，因為該有的都有：氣氛自由，時間安排超彈性、辦公室環境好、零食多到滿出來、交通方便、可以在家上班，要說優點也是說不完。基本上，除了剛才抱怨的那些，剩的就全部是優點。\n\n『干！薪資和加班就是兩個最重要的問題啊！』你可能會這樣說。\n\n說實在，我不認為這是唯一考量，不然為什麼還有這麼多人願意待在公關公司？有些工作會遇到一個機掰到極點的主管、工作環境超爛的辦公室、無聊到爆炸的工作內容，像在當兵一樣。以上這些鳥事，在頤德都不會碰到。\n\n假如想要深入了解公司特色，請投履歷，去聊聊就知道了。\n\n## 公關公司是試煉場\n\n許多人會因為興趣和熱情，把公關當做一輩子的事業；但對一般人來說，可能沒辦法投入這麼多熱情在裡頭。\n\n我認為公關公司是一個試煉場，因為在企劃過程中，不得不思考整個產業的動向，才能提供更有效的提案，也就是整個視野會慢慢擴大。當一個人視野越來越高的時候，不只會越來越清楚整個社會、整個產業的動向，也會更了解自己對哪一個產業更有興趣。例如電影產業，大家都喜歡看電影，但到底電影產業的工作人員都在做什麼，不只有拍電影，同時也要挑片、行銷、選擇上映的影院、談上映日期等等，這些都是在公關公司工作時，從客戶身上學到的。從這樣的工作內容中，會真正了解一個產業到底在做什麼，如果原本我是對電影產業有興趣的，說不定了解以後就覺得『電影工作聽起來好無聊……我還是看電影就好了……』\n\n如果各位覺得自己對未來還不是非常明確，我可以很肯定的說，來公關公司一年，認真的做，保證視野高度、廣告都大幅提昇。這不一定是久留之地，但是是非常棒的試煉場，就像七龍珠的精神時光屋一樣，進去一年走出來，整個人會變得非常不同。\n\n## 把公關產業講這麼難聽，有辦法改變嗎\n\n公關產業算是一個服務業，只要是服務業，就會面對華人文化中的『消費者最大』心態，這在這10~20年間是沒辦法改變的。\n\n但可以從服務業的角色中中延伸出其他商業模式。這點像『[法搏思](http://tw.thefabulabs.com/)』就是一個不錯的例子。從行銷產業出發，最後以自身的產業經驗，打造[品牌癮](http://www.brandinlabs.com/)媒體，可獨立運作。頤德的[CSROne](http://www.csronereporting.com/)也是很好的例子，從服務客戶的經驗中創造出新的商業模式。如果有心在公關產業打滾，這是一個很實在的發展方向。", slug: "20140821-to-veda", category_id: 1, author_id: nil, display_date: "2014-08-21", is_public: true, video_embed: nil},
  {title: "Ruby gem 'jbuilder' 快速產生json物件", content: "\n![JSON_builder](https://farm9.staticflickr.com/8844/17366726691_d1410583f7.jpg)\n\n在Rails當中，有時必須使用產生json格式回應，例如小弟目前正參與的專案就是搭配前端的Angular JS，專吃json，因此Rails從ActiveRecord抓資料出來回應給前端時，就必須包裝成json格式。\n\n由於有些json格式規模很大，需要自訂的欄位也非常多，Rails內建的json功能不敷使用，因此使用jbuilder這個Ruby gem，可以快速產生一個自訂的json，撰寫的格式也簡單明瞭。\n\n[RailsCast](http://railscasts.com/episodes/320-jbuilder)上也有非常詳盡的影片說明。\n\n\n\n## Rails內建產生json物件的方法\n\n在Rails當中已有自行產生json的方法，第一種是最簡單的，直接在頁面上產生json物件：\n\n```ruby\ndef index\n  @posts = Post.all\n  render json: @posts\nend\n\n#只送出每一個post的title\ndef only_title\n  @posts = Post.all\n  render json: @posts, :only => :title\nend\n```\n\n另外一種是用respond_to的方法來產生：\n\n```ruby\ndef index\n  @posts = Post.all\n  respond_to do |format|\n        format.html\n        format.json { render :json => @posts }\n  end\nend\n\n#只產生title和excerpt\ndef only_title_and_excerpt\n  @posts = Post.all\n  respond_to do |format|\n        format.html\n        format.json { render :json => @posts.as_json(:only => [:title, :excerpt]) }\n  end\nend\n```\n\n從以上的第一種方式，還看不出有什麼問題；但從第二個方法，就可以看出因為有各種條件限制的關係，code後方會變得太複雜。假如今天還要包含其他model的物件，例如author，那就要加上:include => :author，如果又要在底下限制只顯示id，又要使用:only => [:id]方法，搞到最後整個code會變得很長，很難管理。\n\n## 使用jbuilder的好處\n\n1\\. 不需要在controller內打respond_to，精簡\n2\\. 在額外的頁面建立json格式，不用跟其他的code混在一起\n3\\. 快速自訂格式\n4\\. 可以在頁面中混搭method和變數，讓產生出來的data很有彈性\n\n## 安裝\n\n首先在Gemfile中輸入要安裝的jbuilder gem：\n\n```ruby\ngem 'jbuilder'\n```\n\n接下來在Terminal中進行bundle install\n\n```\n$ bundle\n```\n\n## 用法\n\n以上方post controller為例，需要自行在view當中產生一個index.json.jbuilder。\n\n接著，只要在網址列中打上 http://your_domain.com/posts.json ，也就是在原本的網址最後方加上.json，就可以讀取該jbuilder產生的檔案。\n\n可以把controller中的action乾淨俐落。\n\n```ruby\ndef index\n  @posts = Post.all\nend\n```\n\n接著我們就可以編輯index.json.jbuilder檔案，簡易用法如下：\n\n```ruby\n# 讀取@posts中的欄位，自動填入\n# post = Post.all\njson.extract! @posts, :title, :content\n\n# 輸出至畫面時，產生以下json\n{ \"title\": \"this is a title\", \"content\": \"this is content\" }\n```\n\n當然，可以有更多可以自訂的方式。\n\n```ruby\n# 自訂欄位名稱，並且用do包成物件。以下custom開頭的內容都可以自訂，會自動輸出成文字\n# @post = Post.all\njson.custom_post @posts do |post|\n  json.custom_title post.title\n  json.custom_content post.content\nend\n\n# 輸出至畫面時，產生以下json\n{ \"custom_post\": {\"custom_title\": \"this is a title\", \"custom_content\": \"this is content\"} }\n```\n\n另外，也可以利用json.array!的用法，將所有posts依序以array方式呈現，前面加一個整個物件的標題。\n\n```ruby\n\#@post = Post.all\njson.All_posts do\n  json.array!(@posts) do |post|\n    json.extract! post, :id, :title, :content\n  end\nend\n\n# 輸出至畫面時，產生以下json\n{ All_posts: [{ \"id\": \"1\" ,\"title\": \"this is a title\", \"content\": \"this is content\" }, { \"id\": \"1\" ,\"title\": \"this is a title\", \"content\": \"this is content\" }]}\n```\n\n最猛的是可以設定巢狀結構，並且在裡面進行運算。\n\n```ruby\n\#@posts = Post.all\n\#@extra_info = Information.all\n\#@comments = Comment.all\njson.All_posts @posts do |p|\n  json.extract! p, :id, :title, :content, :time\n  json.like p.extra_info.like_count\n  json.comments @comments do |b|\n\t  json.extract! b, :content, :author\n  end\nend \n```\n\n當然也可以更複雜下去，這又是jbuilder最猛的地方，但前提是自己要能處理得了...其他操作說明可以參考官方文件。\n\n## 補充\n\n假如抓資料時，不想在網址最後加上.json，可以利用controller中的render :template，讓html回應同樣也以json方式輸出。\n\n```ruby\n@post = Post.all\nrespond_to do |format|\n      format.html {render template: \"posts/index.json.jbuilder\"}\nend\n```\n\n## 其他參考資料：\n\n[Github: jbuilder](https://github.com/rails/jbuilder)\n[RailsCast](http://railscasts.com/episodes/320-jbuilder)", slug: "20140829-ruby-gem-jbuilder", category_id: 6, author_id: nil, display_date: "2014-08-29", is_public: true, video_embed: nil},
  {title: "Rails遇上問題，該如何搜尋及發問？", content: "\n![](https://farm9.staticflickr.com/8824/17366733651_2a60441121.jpg)\n\n遇到困難了！思索半天也找不到答案該怎麼辦？腦袋打結時，最好直接用搜尋和發問的方式，從外部取得解答最快速。尤其Ruby on Rails的開發對新手來講充滿許多陌生的知識，有些從PHP或Java轉過來的老手也不一定能在第一時間就抓到要領。\n\n像本人過去只學過javaScript、HTML、CSS，對伺服器端執行的語言完全不熟，剛開始學時，根本就是人間煉獄......在這邊提供一些個人經驗，希望從頭開始學習Rails的朋友在遇到困難時，都能夠快速尋找到答案喔！\n\n# 搜尋技巧\n\n有一件事情務必要說明，那就是在Ruby on Rails的世界裡，目前英文的資源是遠比中文豐富的，也就是說不管是搜尋還是發問，用英文能找到的答案，絕對比用中文來找答案要來的快速、答案也更多。\n\n當然程式語言本身是英文的也佔了很大一個原因，不過跟C、Java、Objective C等語言相比，中文的資源還是相對很少。如果你的英文不佳，在閱讀文件、聽課時，務必把常用的關鍵字都記得，因為只要關鍵字都記得，搜尋時就能加快非常多速度。\n\n舉一個簡單的Google例子：\n\n如果今天遇到我要在Ruby當中把物件(object)或雜湊(hash)轉換為陣列(array)，搜尋：`ruby 物件 陣列`可以看到搜尋結果大多是說明文件，很棒，但有一個小問題，就是這些文件都是非常完整的，我們點選進入這些文件中還要另外再進行搜尋才能找到答案。\n\n反之，如果我們使用英文搜尋： `ruby obj to array`映入眼簾的第兩個解答都是[Stackoverflow](http://stackoverflow.com/)，這個就是我們能夠快速找到答案的方法，因為Stackoverflow這類型的網站會完全專注在特定的領域上，對於簡單的問題，根本不用看題目寫什麼，直接看答案即可。因為這類型的問題，都會很簡單明瞭的把正確解答放在最前面，因此只要看答案的第一段，通常就可以找到要的解答。例如[Stackoverflow上的這篇](http://stackoverflow.com/questions/4591949/converting-ruby-hashes-to-arrays)，在解答的地方直接點出，只要用 `hash.to_a`的方法，就可以將一個object或hash轉換為array。\n\n『靠夭，這種例子也太廢，能不能舉個稍微複雜的例子？』好，例如一個陣列裡面有一堆hash，長這樣：\n\n```ruby\narray = [{:name => \"John\", :age => 20, :height => 180}, \n{:name => \"Sam\", :age => 25, :height => 167}, \n... ]\n```\n\n假如要只取這些人的age變成一個陣列，而我忘記怎麼處理了，要如何搜尋呢？嗯...這時候需要翻譯一下，搜尋： `ruby get hash key to array`這時浮現眼前的其中一個結果是[apidock](http://apidock.com/ruby/Enumerable/map)。apidock這個網站常常是寫得要不是簡單易懂，不然就是晦澀難懂，非常極端，不過在這裡出現了一個簡單易懂的關鍵字：map，因此我們知道利用map可以寫出一個答案是：\n\n```ruby\narray.map {|hash| hash[:name]} \n# => [20,25, ...]\n```\n\n我們就能得到一整串年紀的數列了。\n\n當然不是所有寫程式的人英文都嚇嚇叫，有強項也有弱項，假如你的英文搭配不是非常順暢，強烈建議在邊學的過程中、閱讀文件的過程中，務必要記得簡單的文法 + 關鍵字搭配，這會讓你的搜尋省下非常多時間。\n\n記得，對新手來說，已經有成千上萬的人走過你走的路，99%的問題都有人問過了，仔細找都找得到的。\n\n在進行Rails相關搜尋時，我強烈推薦幾個網站，只要這些網站有出現在搜尋列表中，就請仔細看一下，你要的答案極有可能就在裡面：\n\n###[Stackoverflow](http://stackoverflow.com/)\n知識問答網站，先看問題是不是自己要的，接著直接去看答案，八九不離十是對的\n\n###[apidock](http://apidock.com/ruby/)\n看一下範例用法，如果不懂也可直接跳離，這邊很多例子都寫得很深入，初學者不一定瞬間就能讀懂\n\n###[Ruby Doc](http://www.ruby-doc.org/)\n進來以後按 ctrl或command + F ，用內文搜尋的方式來找關鍵字，這邊的解說都非常完整\n\n###[Rails Guide](http://guides.rubyonrails.org/)\nRails官方文件，基本上可以說所有Rails的基本常識都在這裡了，如果有出現在搜尋結果的話必定要細看\n\n###[Sitepoint](http://www.sitepoint.com/)\n常寫一些關於Ruby on Rails的技巧，有搜尋到的話通常也都找得到答案\n\n\n# 發問技巧\n\n不過，也是有很賽的時候，假如真的沒辦法找到解答，人生還是得要前進啊！就像交了10年的男女朋友，如果被甩了一定肝腸吋斷，但人生還是得要繼續的！這時候就請上論壇發問吧。\n\n不過，為了最快得到最佳解答，一定要記得：這是一個彼此尊重的世界，有很多熱心的開發者無怨無悔的在為其他人解答。如果你的英文很好，我建議直接到[Stackoverflow](http://stackoverflow.com/)上發問。原因：\n\n1. 回應超快，一般來說10分鐘內就會有人解答\n2. 回答超專業，許多熱心的開發者會整理出很簡單易懂的解答。\n3. 當然有很多人是來亂的，不過請有耐心，強者是很多的，不用多久就會出現了。\n\n撰文發問有幾個非常重要的要領。\n\n1. 說明使用情況\n2. 說明錯誤訊息\n3. 附上現有的檔案\n4. 說明Ruby、Rails版本、安裝的gem\n5. 如果問題很複雜，建議把整個app放在github上給連結\n\n這幾點其實要說得完整很不簡單，我推薦一兩個比較好的問法：\n\n#### [Gem Minimagick安裝問題](http://stackoverflow.com/questions/26112057/uninitialized-constant-carrierwaveminimagic/26113249#26113249)\n(私心推薦，因為是我本人去解答的)\n\n#### [詢問method用法](http://stackoverflow.com/questions/4470108/when-monkey-patching-a-method-can-you-call-the-overridden-method-from-the-new-i/4471202#4471202)\n\n以上兩個問題雖然都不是非常複雜，但也提供了很完整的資訊給其他開發者參考。\n\n假如你撰寫英文不是非常順暢，中文平台我推薦：\n\n### [Rails Fun](http://railsfun.tw/)\n### [Rails新手村](https://www.facebook.com/groups/670532946312104/)\n\n希望大家遇到問題時都能快速找到解答喔！", slug: "20141001-rails-search-and-asking-questions", category_id: 6, author_id: nil, display_date: "2014-10-01", is_public: true, video_embed: nil},
  {title: "Ruby on Rails 安裝教學彙整&心得", content: "\n![](https://farm9.staticflickr.com/8804/17366750251_45a7244390.jpg)\n\n對想要學習WEB開發的人來說，Ruby on Rails已經不是很陌生的技術，到Inside求職頁上四處可見徵求Rails工程師的工作，到處都有學習資源，只要在Google上搜尋 `Ruby on Rails`不管中英文都有非常多可以參考的資料。\n\n\n\n# 教學資源\n\n不過對於想要學習的新手來說，安裝Ruby on Rails的開發環境並不是一件簡單的事。這邊幫大家彙整幾個很常見的資源：\n\n[Ruby官方網站](https://www.ruby-lang.org/zh_tw/)\n\n[ihower的Ruby on Rails實戰聖經](http://ihower.tw/rails3/installation.html)\n\n[RailsBridge Docs](http://railsbridge-docs-zh-tw.herokuapp.com/docs/)\n\n[Treehouse (Mac)](http://teamtreehouse.com/library/build-a-simple-ruby-on-rails-application/getting-started-with-rails/installing-rails-mac)\n\n[Treehouse (Windows)](http://teamtreehouse.com/library/build-a-simple-ruby-on-rails-application/getting-started-with-rails/installing-rails-windows)\n\n[Rails 101](https://leanpub.com/rails-101)\n\n注意，雖然以上資源都可以利用，但大家都知道在程式語言的領域都需要一點運氣，如果在某一種安裝方法中卡關了，請參考其他資源看看有沒有其他方法。再怎麼鳥的狀況都會有解法，本人安裝Ruby裝了兩天才裝起來，VM拆了又裝、裝了又拆，相信大家只要有點耐性，不會比我來得更慘。\n\n# 快速安裝方法\n\n## Mac\n\n由於本人在Mac上安裝Ruby經驗最豐富，因此以下提供在Mac上安裝最簡單的方法，假如平常都有做善事，基本上只要幾個步驟，就可以順利安裝。\n($符號代表你command line每一行的開頭符號，並不用將這個符號打出來)\n\n首先，安裝[Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)：打開appstore、搜尋『xcode』，下載安裝。\n\n安裝完成以後打開終端機(在應用程式或Launchpad中搜尋terminal或\"終端機\")，並安裝brew，如果指令沒有變，就是：\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n如果指令不同，請參照官網說明：http://brew.sh/\n\n有些xcode版本並不會主動安裝command line tool，這個工具在接下來安裝Ruby gem時為必要工具，我們可以藉由安裝xcode-select來安裝command line tool：\n\n```\n$ xcode-select --install\n$ brew update\n```\n\nRuby on Rails同時也依附其他工具的使用，例如版本管理工具git、資料庫sqlite或mysql，這些也要在安裝Ruby時一同進行安裝\n\n```\n$ brew install git\n```\n\n有些資源會建議安裝rvm，但最簡單的方法就是直接從brew上面安裝\n\n```\n$ brew install ruby\n$ gem install sqlite3\n$ gem install rails\n```\n\n## Linux Ubuntu\n\n打開終端機或Terminal：\n\n```\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev\n$ \\curl -sSL https://get.rvm.io | bash -s stable --ruby  --rails\n```\n\n# Debug\n\n基本上，人生總會遇到困難，就像吃飯一定會掉飯粒一樣，如果在安裝過程中遇到莫名其妙的錯誤，請不要氣餒，如果每個人都一帆風順，世界上就不需要那麼多教學資源了。遇到任何錯誤，請到Google上搜尋相關錯誤，請用英文搜尋『ruby install』再加上你遇到的錯誤訊息。以下我提供自己遇過的狀況，給大家當做參考：\n\n## 1. Ruby版本與最新版差異太大\n\n本人第一次安裝Ruby時當時版本是2.0.0，但本人安裝時卻遇到安裝了1.8.7，很不幸遇到一個超級大鴻溝，很多相容性問題，因此必須採用其他安裝方法。\n\n在使用brew安裝完Ruby以後，請輸入 \n\n```\n$ ruby -v\n```\n\n來檢查版本，看與Ruby官網上的版本是否差異過大。\n\n假如很不幸的因此產生很多版本問題，例如說不斷出現\"Incompatible Ruby Version\"的提示訊息，這時候我們就需要救星rvm (Ruby Version Manager)來幫忙。儘管有許多人認為rvm是個爛東西，但對新手來說rvm邏輯簡單，是一個非常好的解決方案。請到[rvm官網](http://rvm.io/rvm/install)上查看。\n通常輸入以下指令，就可以順利安裝ruby和rails：\n\n```\n$\\curl -sSL https://get.rvm.io | bash -s stable --ruby --rails\n```\n\n## 2. 無法安裝sqlite、pg等資料庫的gem\n\n假如你不知道gem是什麼，基本上可以當成是Ruby語言的外掛，因為我們不可能每個東西都從頭開始刻，有些東西的串連也必須是要跨領域的專家才了解，所以這些外掛可以幫助我們快速的建立起一些我們需要使用的功能。\n\n在安裝各種Ruby gem時，例如輸入 \n\n```\n$ gem install sqlite3\n```\n\n有一個容易出現的錯誤訊息是：\n\n`Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.`\n\nOMG你一定會愛死這個訊息，因為他三不五時就會出現，而且對新手來說出現的機率可以高達95%，更重要的是有很多可能的原因。\n\n第一個原因是你沒有將command line tool安裝完成，所以請檢查xcode是否有正確安裝command line，假如剛剛有照安裝步驟安裝xcode-select，就一定是有安裝了。\n\n第二個原因是某些版本的xcode比較腦殘，沒辦法直接將gem轉換成可以安裝的格式，因此我們需要在安裝gem時額外輸入一個指令：\n\n```\n$ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future gem install sqlite3\n```\n\n上方的sqlite3可以替換成其他gem的名稱\n\n假如真的還是無解，建議可以從brew來安裝，例如pg和mysql都可以從brew來安裝。\n\n```\n$brew install postgresql\n$brew install pg\n```\n\n希望大家都能夠安裝順利喔，最後提醒，Google是大家的好夥伴，Stackoverflow也是大家的好夥伴，如果英文夠好，這兩個資源就可以得到非常多協助。\n\n中文部分可以到\n### [Rails Fun](http://railsfun.tw/)\n### [Rails新手村](https://www.facebook.com/groups/670532946312104/)\n都可以得到非常豐富的解答，但在尋求協助時，請務必將作業系統、錯誤訊息、安裝步驟、已安裝的步驟都列出來，大家才好幫忙喔！", slug: "20141001-ruby-on-rails-install", category_id: 6, author_id: nil, display_date: "2014-10-02", is_public: true, video_embed: nil},
  {title: "Ruby on Rails從零開始自學，要用哪一份教材呢？", content: "\n![](https://farm9.staticflickr.com/8794/17366762951_fc0e3f5aae.jpg)\n\n近年RoR開始走紅，有非常多教學資源可以利用，本人也是先前某天靈光一閃，開始自學的旅途。不過網路上這麼多教學資源，到底應該從哪一個教材上手呢？這個問題就非常見仁見智了。\n\n## 必備條件\n\n●知道HTML網頁和CSS長什麼樣\n●知道JavaScript的運作邏輯\n\n有發現為何我不直接寫『會HTML、JavaScript』嗎？因為在寫Rails時，唯一需要動手寫的只有HTML，Javascript和CSS不會沒關係。不過，就像跑鐵人三項一樣，寫Rails寫得很好，代表你騎腳踏車騎得很棒；不會JavaScript就彷彿不會游泳一樣，平常不游沒關係，等真的要下水比賽的時候就知道有多麻煩了。所以...遲早還是要學啦！\n\n以下介紹幾個我參考的教材，你可能會覺得『騙笑ㄟ你最好是這些教材全部都從頭到尾看過！』不好意思，本人資質駑頓，不管哪一個教材都有卡關，而且是卡到比內褲卡屁縫還更緊的那種，只能先換教材從頭看起；經過無數次撞牆和重看之後，才偶爾有靈光一閃，突破難關。所以，以下絕對都是我讀過的心得，沒讀過的我就不放進來了。\n\n# Ruby基礎\n\n* * *\n\n## [Code Academy](http://www.codecademy.com/tracks/ruby)\n\n評：按部就班學\n\n互動式學習，會學到許多基本的用法，例如四則運算、if..else、迴圈等等，跟其他語言入門很像，主要教語法。\n\n系統設計的很好，非常按部就班，每一個章節的解說都很清楚，也會跟你說錯在哪裡。對有熱情的學生來說可以學得很快，但就少了些爆點，比較像是照表操課，把東西學起來而已，沒有太多趣味。\n\n## [Code School (Try Ruby)](https://www.codeschool.com/courses/try-ruby)\n\n評：簡單易懂\n\n互動式學習，正如其名『Try』，長度不長，但整體而言感覺跟code Academy很像，就是把基本的語法學起來。教學時語氣有比較活潑一點。\n\n以上兩個教材...其實不用花太多時間，把主要的東西記得就好，因為到了Rails，根本就是另外一個世界，等Rails的東西熟了以後，自然就會需要回頭來把Ruby的東西學起來。例如需要把array組成hash的時候，這種比較跟基礎有關係的東西，才會回頭來看Ruby基礎。\n\n# Rails入門\n\n* * *\n\n在說明Rails教材之前，有一個很重要的觀念要釐清：\n\nRails有太多東西不能用三言兩語講清楚，所以建議初學者要先把東西死記起來，未來再理解，這才是最快的學習方法。如果硬要把所有細節都了解再繼續往下學，很容易鑽牛角尖繞不出來，進度也會太慢。我的經驗：如果真的腦袋打結，就換教材，從頭開始看；等過了兩三天，再回頭看原本教材卡關的地方，就有可能暢通了，跟便秘暢通一樣。\n\n入門者一定要先把這句話記起來，學Rails要有耐性，每個人剛學都是髒話滿天飛，如果真的不行，就[上網](https://www.facebook.com/groups/670532946312104/)或到聚會問吧！\n\n## [Code School (Rails for Zombies)](https://www.codeschool.com/courses/rails-for-zombies-redux)\n\n評：跳躍式，不建議直接入門\n\n影片教學外加互動式學習，並沒有從基礎開始講，一開始簡單講解後，直接帶到model的操作上，也就是如何在model中操作has_many、belongs_to、find等關係，這是我第一個接觸的Ruby on Rails教材，但說實在，根本就聽不懂。\n\nmodel講完以後會依序講controller和view，一方面會說明MVC三者之間如何運作，一方面也把各個method教下去。但有一個重點，就是我在學習時根本抓不到一個大概，只在那邊學&lt;%= yield %&gt;是做什麼用的，非常分散的資訊，很難結合在一起。假如真的很有耐心看完了，可能也不一定能把MVC所有用法和關係串起來。\n\n由於是免費教材，也沒有時間限制，所以建議在其他教材學到一個段落以後再回來看，會瞬間懂。\n\n## [Rails 101](http://rails-101.logdown.com/) &amp; [Rails 101 S](http://rails101s.logdown.com/)\n\n評：第一遍就看得懂的話，可以上哈佛\n\nRails101是一本書，我真的得說，這本是所有教材裡面步調最快的，完全符合作者xdite本人的教學模式。剛開始講CRUD時，大概還知道他跟http request之間的關聯是什麼，但因為我過去根本沒有網路通訊的基礎，偏偏他又講很多網路程式的東西，例如RESTful設計風格，這些東西對我來說跟天書一樣。\n\n『步調快不好嗎？剛不是還嫌別人很慢？』步調快當然好，但很多東西如果不講清楚，其實很難繼續下去，例如在[建構CRUD的章節](http://rails101s.logdown.com/posts/210463-2-2)，view裡頭有一段code是：\n\n```html\n<% @groups.each do |group| %> \n    <tr>\n      <td>  <%= link_to(group.title, group_path(group)) %> </td>\n      <td>  <%= group.description %> </td>\n    </tr>\n<% end %> \n```\n\n像我真的沒辦法在第一時間就了解<span style=\"background-color: #d6d6d6;\">@groups.each do |group|</span>這句話的意思，更沒辦法了解<span style=\"background-color: #d6d6d6;\">link_to(group.title, group_path(group))</span>是什麼意思。為什麼.each後面還有一個|group|？為什麼link_to的連結group_path後面還要一個括弧？為什麼groups變數前面要加上@符號？\n\n腦袋裡有太多東西在打轉，當下我就放棄了，先轉向其他教材。後來是等我把Treehouse整個課程都結束，再回頭看時，才真正了解這些內容的意義。\n\n最後血淚補充，我是在3月初的時候買這本書，花了12美金，然後半個月以後他就從此變成免費了。Rails101 S是將這本書寫得更簡潔易懂的部落格文章版本。\n\n## [Michael Hartl](https://www.railstutorial.org/book)\n\n評：超慢步調，超詳細講解\n\n真的詳細到一個爆炸，還牽扯到很多不是Rails的東西，對於像我這種只看重點的人，其實很容易看不下去。Rails就是Rails！為什麼要扯一堆有的沒的！不過，如果你真的很有耐性，強烈建議這本，整個讀過以後會非常了解，還包括了基本的測試(testing)寫法。\n\n## [Rails 實戰聖經](http://ihower.tw/rails3/)\n\n評：很詳細，但後來比較像操作手冊\n\n剛開始Part.1時很不錯，但到Part.2開始，變成比較像是Rails整體架構的說明書，而不是一步一步建立應用程式的教學，建議從Part.2開始就可以換教材了，這個比較像是工具書的用法，如果對某些概念有疑問時可以來參考。\n\n## [Treehouse](http://teamtreehouse.com/features/ruby)\n\n評：稍貴，但最易入門\n\n每個月25美元的價格，影片教學無限看。聽起來有點貴，但我覺得這個教材是最簡單易懂的。雖然還是有許多無法解釋、快速帶過的地方，但整體來說上課的感覺比較舒服，步調稍緩，演練起來也沒那麼容易卡關。我選擇的課程是Building a Simple Ruby on Rails Application，這個課程完整上完，基本上其他教材就比較能讀懂了。\n\n唯一的缺點是他其他教材也是相同步調，對我這種沒耐性的人來說，就沒有辦法再配合上。英文能力不ok也沒關係，看著他打什麼就跟著打什麼就好，他也有transscript，可以丟到Google翻譯去查。還有一個問題，就是他使用的是Rails 3.2，跟4.0以後的版本稍有差距，建議卡關的時候看看他的討論區，會有解答。\n\n* * *\n\n以上是我使用的教材，希望各位新手都學習順利囉！如果遇到難解問題，請參考前一篇『[搜尋和發問技巧](http://www.motion-express.com/?p=3113)』，或是直接到[Rails新手村聚會](https://www.facebook.com/groups/670532946312104/)跟大家討論喔！", slug: "20141003-ruby-on-rails-learning-material", category_id: 6, author_id: nil, display_date: "2014-10-03", is_public: true, video_embed: nil},
  {title: "做Rails開發少不了GIT", content: "\n![](https://farm9.staticflickr.com/8786/17179311578_29c9fa5e1f_o.jpg)\n\n# 為什麼需要GIT？\n\nGIT是一種[版本控制系統](http://zh.wikipedia.org/zh-tw/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)，為什麼要有這種東西呢？每一個東西都是用來解決一個問題，而在ihower的解說當中，點出程式開發團隊會遇到的問題：\n\n\n\n- 檔案被別人或自己覆蓋，甚至遺失\n- 想復原前幾天寫的版本\n- 想知道跟昨天寫的差在哪裡\n- 是誰改了這段程式碼，為什麼\n- 軟體發行，需要分成維護版跟開發版\n(引用自[ihower](http://ihower.tw/git/vcs.html))\n\n雖然ihower說的是團隊開發，但就算是一個人開發，也會在寫程式的過程中少不了各種以下情況：\n\n1\\. A功能開發完成，結果寫B功能寫到一半把A功能搞壞了\n2\\. 檔案不小心刪了\n3\\. 寫到一半本機硬碟壞了\n\n聽起來很悲情，但在本人身上也確實發生過不少次。因此就單純已備份的角度來看，版本控制就像從前在學校寫報告要定時存檔一樣，基本上是做Rails開發，甚至是所有程式設計人員都要學會的。\n\nGIT是利用儲存庫(Repository，簡稱repo)進行儲存，而利用repo，我們不只能進行各種儲存、備份、版本控制，更有專門提供這些公開repo的網站(例如[Github](https://github.com/))，讓我們這些程式開發人員可以去觀摩別人的作品、copy、修改、甚至給予建議。\n\n就以新人學習的角度來說，更是不可或缺的工具，因為身為新人，把程式搞壞也是很正常的事情，就算我們再怎麼小心，也會把東西裝壞，因此無力回天的時候，就可以利用GIT將程式恢復成先前的版本。\n\n# GIT安裝及設定\n\n在[GIT官方網站上，有提供各個版本的教學](http://git-scm.com/book/zh-tw/%E9%96%8B%E5%A7%8B-%E5%AE%89%E8%A3%9DGit)，但由於GIT實在太廣泛為大家使用，因此安裝方法也超級多。\n\n我個人在MAC上會直接利用brew進行安裝，在終端機(terminal)底下輸入：\n\n$brew install git\n\n或在Linux Ubuntu的終端機底下輸入：\n\n$apt-get install git\n\n一個指令就完成了，看吧，比泡麵還簡單。\n\n接下來進行使用者設定，也就是我們在利用系統進行儲存時，會出現我們的名字。\n\n$ git config --global user.name \"Adler Hsieh\"\n$ git config --global user.email \"adler@gmail.com\"\n\n以上的人名和email可以進行替換，--global的意思是只要在你的電腦上進行git儲存，就會使用這組預設內容。如果你想在不同專案儲存不同名字，可以不用加上這個指令。\n\n接下來有一個很重要的事情，就是要找一個讓我們儲存GIT內容的地方，一般來說開放、免費的網站很多，這邊利用[Github](https://github.com/)進行示範。\n\n除了先申請一個帳號之外，更重要的是如果要把專案儲存到Github上，就一定要儲存一組ssh key，以保安全。每一台電腦都需要儲存一個ssh key，以防不明人士利用你的帳號儲存。在[Github上有很完整的ssh key產生及上傳教學](https://help.github.com/articles/generating-ssh-keys/)。\n\n## Debug\n\n在產生ssh key時其實本人卡關卡有點久，在這邊分享一點心得。\n\n步驟如下，Mac和Linux系統皆同：\n\n1\\. 進入終端機\n2\\. 回到user的根目錄(並非整個系統的根目錄)\n3\\. 輸入 $cd ~/.ssh\n4\\. 檢查有沒有一個檔案叫做 id_rsa.pub 或 id_dsa.pub，如果有，請跳至步驟7\n5\\. 如果沒有，請產生一組ssh key\n\nssh-keygen -t rsa -C \"my_email@gmail.com\"\n\n接下來輸入密碼。未來在進行git push時，系統會詢問密碼，這時候就要輸入這組密碼。\n6\\. 將這組key加入agent當中。\n\n$eval \"$(ssh-agent -s)\"\n\n$ssh-add ~/.ssh/id_rsa\n\n7\\. <span stlye=\"color:red;\">這邊是最容易卡關的地方</span>，因為官方是用外掛來copy檔案，而我個人建議是直接去找這個檔案位置，用文字編輯器開啟。因為本人平常行善不夠，每次安裝該外掛都失敗。開啟方法是在/.ssh/資料夾底下，開啟id_rsa.pub這個檔案。copy時請確定格式是以下這張圖的樣子。\n\n![ssh-key-paste](http://www.motion-express.com/wp-content/uploads/2014/10/ssh-key-paste.png)\n(圖片來源：Github)\n\n如果不是，那很不幸的是開錯檔案了，或是請重新產生一個ssh key，因為只要貼錯格式，github是不會接受的。至於為何會有莫名的格式出現，我也不知道，只記得我有一次重新產生了2~3個key格式才對。\n\n切記，copy時不要copy到多餘的空白。\n\n8\\. 接著[到github帳號設定的地方](https://github.com/settings/ssh)，點選右上方的Add，並上傳ssh key，在title的地方輸入一個你看得懂的名字。就大功告成啦！\n\n希望有遇到相同障礙的人能夠迎刃而解。\n\n# 參考資料\n\n至於接下來要如何操作，網路上有非常多詳盡的資源，這邊列出一些推薦的：\n\n[ihower Git全攻略](http://ihower.tw/git/index.html)\n[好麻煩部落格](http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/)\n[Code School (Try Git)](https://www.codeschool.com/courses/try-git)\n\n想了解Git原理的話，ihower有一個非常詳細的投影片可以參考：\n\n[slideshare](http://www.slideshare.net/ihower/git-tutorial-13695342)", slug: "20141004-rails-with-git", category_id: 6, author_id: nil, display_date: "2014-10-04", is_public: true, video_embed: nil},
  {title: "Ruby gem 想要一機裝多個版本？RVM來幫你！", content: "\n![](https://farm9.staticflickr.com/8692/17179561490_3958cffd4e.jpg)\n\n『Rails 4.2.0.beta出了！好想試試！』\n\n在前幾天看到[Rails 4.2.0 release note](http://edgeguides.rubyonrails.org/4_2_release_notes.html)時，大家是否都有相同的想法？尤其看到現在debug console改為內建，真的很想知道他內建的console長什麼樣！\n\nBut現在Rails 4.2.0還在beta版，有許多bug需要更新，所以不適合裝在我們正在開發專案的本機上。這次使用的解決方案是使用RVM同時安裝多版本gem。\n\n\n\n# 安裝RVM\n\n各位在安裝Ruby環境的時候，應該都有安裝類似[RVM](http://rvm.io/)的版本控制程式，例如rbenv等等，如果你是用硬幹的方式裝Ruby，沒辦法切換版本，那請一樣先裝rvm，才有辦法在本機同時安裝多套ruby和rails版本。在終端機中執行：\n\n\t$ \\curl -sSL https://get.rvm.io | bash -s stable\n\n\n安裝完成以後，請確定使用的是穩定版本的ruby，可先到Ruby官網上進行查詢，假如查到的Ruby 2.1.3，那就執行安裝並切換：\n\n\t$ rvm install 2.1.3\n\n如果你確認已經有最新的穩定版本Ruby，這個步驟可以跳過。\n\n# 設定gemset\n\ngemset是啥？可以吃嗎？\n\n如果你知道Ruby有各種gem可以安裝，那 `gemset`就像一個一個菜籃一樣，每次安裝`gemset`，就是放一個gem到菜籃裡面。使用者可以有不同的菜籃，放入不同的gem，藉此測試各種相容性問題。\n\n使用以下指令來看現在有哪些gemset：\n\n\t$ rvm gemset list\n\n正常來說，就是像下圖那樣，只有global一個：\n\n![螢幕快照 2014-10-05 上午12.45.30](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-05-上午12.45.30.png)\n\n如果我們要開新的菜籃...啊不，開新的gemset，或是刪除一個gemset，使用以下指令即可：\n\n```cmd\n$ rvm gemset create rails4.2.0\n$ rvm gemset delete rails4.2.0\n```\n\n以上rails4.2.0的部份可以替換成任何名字，但強烈建議要看得懂的名字。接下來使用以下指令切換gemset：\n\n```cmd\n$ rvm gemset use rails4.2.0\n$ rvm 2.1.3@rails4.2.0\n# 懶人用法，直接連同ruby版本和gemset一起切換\n```\n\n如果你原本的gemset有安裝有非常多gem，那切換到新的gemset時，一定會有煥然一新的感覺，因為在輸入$gem list以後，會發現什麼都沒有，連rails都沒有，只有小貓兩三隻。\n\n# 在gemset下安裝不同版本的Rails\n\n根據官網步驟，需要先安裝4.1版本 => 確認gem版本 => 升級到beta版\n\n```cmd\n$ gem install rails\n$ gem -v\n$ gem update --system 2.2.2 \n# 目前2.4.1版本有bug，導致rails無法升級至4.2.0\n```\n\n安裝完成以後，輸入 `$ rails -v` 就可以看到漂亮的 4.2.0 版本號了。詳細更新內容可以參考[Rails 4.2.0 release note](http://edgeguides.rubyonrails.org/4_2_release_notes.html)。\n\n如果要回到原本的開發版本，可以用 $rvm gemset use global 指令切換回原本的gemset，再執行一次$rails -v，原版本的rails又出現啦，可喜可賀！\n\n# 延伸閱讀\n\n[高見龍部落格](http://blog.eddie.com.tw/2011/04/08/rvm-and-gemsets/)\n[RVM官網關於gemset設定](http://rvm.io/gemsets/basics)\n[如何升級安裝Rails 4.2.0](http://railsapps.github.io/updating-rails.html)", slug: "20141005-ruby-rvm-gemset", category_id: 7, author_id: nil, display_date: "2014-10-05", is_public: true, video_embed: nil},
  {title: "Ruby code整理系列 if...else", content: "\n![](https://farm8.staticflickr.com/7730/17366806031_af1cdf4949.jpg)\n\n儘管Ruby on Rails的程式碼已經非常精簡，但對新手來說還是會有很多邏輯上的問題，導致寫出很長的程式碼。許多專家針對此提出整理的方法，refactor代表『重新架構』，讓整體程式看起來更乾淨俐落。\n\n『重新架構』的目的並不是要把code縮減到越少越好，而是要讓所有code各司其職，符合物件導向(object-oriented)，也符合Rails的邏輯。Ryan Bigg講過一句話：『不要因為程式碼太長而去refactor，因為當程式規模很大的時候，程式碼很長是必然的。』\n\n\n\n本篇先從最簡單的Ruby語法談起，簡單利用if...else說明幾個可以讓程式碼縮減的方法：\n\n## 1\\. 將if放在後方\n\n如果今天的程式碼是：\n\n```ruby\nif a > 10 \n\tputs 'big'\nend\n```\n\n那我們可以將if放到第一行，省去end，變成：\n\n```ruby\nputs 'big' if a > 10\n```\n\n這是最簡單的縮減方法，讀起來很像口語英文，很爽\n\n## 2\\. 將if...else寫在同一行\n\n一般撰寫 if..else...end 的情況都是：\n\n```ruby\nif a > 10\n   puts 'big'\nelse\n   puts 'small'\nend\n```\n\n在邏輯很簡單的情況下，還硬把他寫成5行，實在不是很爽快。等整個程式發展到100行以上時，這5行就會讓人感到很困擾。\n\n以上邏輯可以簡單撰寫成以下寫法：\n\n```ruby\nif a > 10 then puts 'big' else puts 'small' end\n```\n\n## 3\\. 使用符號縮寫\n\n像剛剛的寫法，雖然成功的把if...else縮減為一行，但密密麻麻的字，看起來很讓人困擾。身為專業的Ruby開發人員，怎麼可以讓程式碼充滿那麼多字呢？聰明的我們可以使用三元運算子(ternary operator ?:)，將以上的用法縮寫為：\n\n```ruby\na > 10 ? puts 'big' : puts 'small'\n```\n\n問號(?)以左是判斷式，只要回傳true，就會執行冒號(:)左邊的code，否則執行右邊。聰明的各位不用我解釋應該也知道邏輯大概是如此，這時候就要學Tim Cook在iPhone6發表會上講的：\"It's pretty cool.\"\n\n## 4\\. 指定數值給變數 assign value to variable\n\n假設我們要判斷a的大小，並將結果指定給變數result，最基本的寫法如下：\n\n```ruby\nif a > 10\n\tresult = \"big\"\nelse\n\tresult = \"small\"\nend\n```\n\n可以使用剛才的方法縮減如下：\n\n```ruby\na > 10 ? result = \"big\" : result = \"small\"\n```\n\n這樣就可以把判斷的結果指定給result。但千萬記得Ruby的原則是DRY (Dont' Repeat Yourself)，這種情況我們可以讓他更為縮減：\n\n```ruby\nresult = a > 10 ? 'big' : \"small\"\n```\n\n在等號(=)後面的判斷式只要回傳true，b就等於前面的數值，如果不是的話就等於後面的數值。\n\n## 5\\. 多重條件判斷\n\n剛才的情況只能判斷一個if...else，如果我們要判斷以下內容：\n\n```ruby\nif a > 10\n\tresult = \"big\"\nelsif a > 5\n\tresult = \"bigger than 5\"\nelsif a > 3\n\tresult = \"bigger than 3\"\nelse\n\tresult = \"small\"\nend\n```\n\n像這樣多重的判斷更讓人想吐血，因為明明邏輯很簡單，卻要寫成9行，根本就是浪費螢幕空間！這樣的狀況，可以利用以下寫法來縮減：\n\n```ruby\nresult = (\"big\" if a > 10) || (\"bigger than 5\" if a > 5) || (\"bigger than 3\" if a > 3) || \"small\"\n```\n\n看得出來邏輯嗎？每一個or分隔符號(||)都是一個判斷式，最右邊則是else的內容。或者整個邏輯反過來變成：\n\n```ruby\nresult = (a > 10 && \"big\" or a > 5 && \"bigger than 5\" or a > 3 && \"bigger than 3\" or \"small\")\n```\n\n如果你喜歡把條件放在後面，請選第一個方案，反之請選第二個方案。\n\n相信光是這幾種if...else的寫法，就可以讓大家省掉不少code的空間了！不過切記，遇到複雜邏輯請務必要分行寫，不然未來維護時只會折磨死自己而已，畢竟分行寫的邏輯還是比較清楚的。", slug: "20141006-rails-refactoring-if-else", category_id: 7, author_id: nil, display_date: "2014-10-06", is_public: true, video_embed: nil},
  {title: "Rails code 整理系列 - Service Object 初探", content: "\n![](https://farm9.staticflickr.com/8845/16746877723_d4894b6e06.jpg)\n\nRails在設計上有太多可以自行調整的風格，這也是為什麼在高階開發者之間有許多爭議和討論，例如今年 [在RailsConf引爆的『TDD已死』](http://www.dotblogs.com.tw/hatelove/archive/2014/05/03/relative-articles-of-dhh-tdd-is-dead.aspx)就是一個很好的例子，沒有對錯，只有風格。\n\n而在Rails結構上也有許多可以調整的地方，例如常聽到的『skinny controller、fat model』就是一例，認為所謂controller就是掌管各種『行為』(action)，而不去干涉前端(view)的設計，也不去牽扯太多跟資料庫(model)有關的計算。Fat model就是將各種跟計算、儲存有關的事情都交給model來處理，就這樣的邏輯來分配，對開發者來說比較容易理解。\n\n但照這樣邏輯來推算，如果把所有東西都交給model，在邏輯、各種計算不分類的情況下，整個code也會變得相當混亂。經典文章『[7 Patterns to Refactor Fat ActiveRecord Models](http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/)』便提到利用七種方法讓過度擁擠的model可以有喘息的地方，解決這個整理上的困擾。而本篇則分享其中一個Service Object的使用方法。\n\n## 1\\. 為何要使用Service Object\n\n顧名思義，Service Object是因為有某些類似的特定功能，像是一個『service』，跟資料庫中的model並無直接關係，因此拉出來獨立成為一個class，在邏輯上會更容易管理。不過在文章中有定義了幾個需要使用service object的情況：\n\n - method邏輯極其複雜的時候\n - 跨Model使用，無法特別歸類於特定Model\n - 與外部服務有較多關連\n - 並非重要功能\n - 同一種method有許多類似的使用方法\n\n## 2\\. Service Object 使用時機\n\n文章中以使用者登入機制為範例，將登入的authenticate功能另外放在`UserAuthenticator`這個class當中，非常簡單的一個介紹。但通常在實作中會遇到的情況都複雜許多，我個人遇過的情況是：\n\n實作規格：\n1\\. Group < Post < Comment 三個model\n2\\. 要能將Post輸出成四種格式：html、json、xlsx、pdf\n3\\. 在每種格式中要能列出相對應Group和Comment，並依據數量畫出線圖\n\n這聽起來就需要非常多分門別類的功能，但聰明的大家應該不難看出，這些功能幾乎都是使用外部服務，包括[gem 'jbuilder'](https://github.com/rails/jbuilder)、[gem 'axlsx'](https://github.com/randym/axlsx)、[gem 'prawn'](https://github.com/prawnpdf/prawn)、[gem 'gruff'](https://github.com/topfunky/gruff)\n四個都是不需要自己土法煉鋼的功能，而是直接使用gem安裝以後，就可以將格式輸出了。\n\n因此，這些內容都是專門處理『輸出』(render)的部份，可以將他們收攏為一個service object，管理比較方便。\n\n## 3\\. 如何建立Service Object\n\n在一個Rails app中，直接在controller或model資料夾內建立一個`*.rb`檔案即可，叫什麼名字不重要，你以為一定要叫`service.rb`嗎？那只是一個概念，其實我們可以叫各種名字，而在這個範例當中，我把檔名叫做`document.rb`。重點不在檔案，而是裡面的內容。\n\n像圖中另外再開一個services的資料夾也ok！如果沒有與controller或model開在同一個目錄底下，需要在code中多安插一行`require \"service\"`\n![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-07-上午12.06.03.png)\n\n接下來我們要在檔案中寫入Document class\n\n```ruby\nclass Document\n\tdef initialize(post)\n\t  @the_post = post\n\tend\n\n\tdef to_pdf\n\t  @the_post = ... # 處理pdf檔案\n\t  post\n\tend\n\n\tdef to_xlsx\n\t  @the_post = ... # 處理xlsx檔案\n\t  post\n\tend\n\n\tdef graph_generation\n\t  @the_post = ... # 繪製線圖\n\t  graph\n\tend\nend\n```\n\n其中部分省略，重點在於class本身有一個`initialize`的method是預設在class呼叫時會執行的，這裡我們直接將變數指定給這個class當中的@post變數，再利用其instance variable特性傳送給各個method進行後續處理。到目前為止service object就算建立完成了！\n\n## 4\\. 如何使用Service Object\n\n大家可以直接用Ruby的邏輯來思考，呼叫一個class，就是直接呼叫即可，我們可以在controller action中呼叫：\n\n```ruby\n\tdef show\n\t\t@post = Post.find(params[:id]).includes(:comment)\n                document = Document.new(@post)\n\t\trespond_to do |format|\n\t\t\tformat.html { \n\t\t\t\t@graph = document.graph_generation \n\t\t\t}\n\t\t\tformat.json { render :json => @post}\n\t\t\tformat.pdf { @data = document.to_pdf }\n\t\t\tformat.xlsx { @data = document.to_xlsx }\n\t\tend\n\tend\n```\n\n簡單說明，使用Service Object時，\n\n### 1\\. 呼叫class\n\n在這裡使用開頭大寫的class名稱，由於呼叫的方式跟呼叫model相同，因此記得不要取相同的名字。\n\n### 2\\. 加上new method\n\n加上new method代表的是執行剛才定義的initialize這個method，由於呼叫service object時一定要先啟動，所以這個new method是不可省略的。接著在後方加上要帶入的變數，在這裡是帶入`@post`，會對照到剛才我們在class中定義的`the_post`。\n\n### 3\\. 再加上要使用的method\n\n變數帶入以後，我們就可以再帶入其他的method，針對不同輸出方式來調整。由於這邊的範例是在controller裡面使用instance variable，所以instance variable的部份(前面有加上`@`符號的變數，可以在controller之間互相傳遞)要記得不要取相同的名字，以免重複使用。如果是在model裡面使用service object比較不會有這個困擾。\n\n由於這邊是重複呼叫`Document`，才會先指定給在`document`。如果只使用一次，也可以只寫成一行：`@data = Document.new(@post).to_pdf`\n\n* * *\n\n依照這樣的寫法，我們就把所有的功能都放到service object當中了，剩下的事情交給前端的view去處理。優點是controller保持乾淨簡單的特性，其中各項功能都有標註是來自Document這個class的method，因此未來在維護時也很方便辨識。\n\n希望大家都能抓到個概念~\n\n## 延伸閱讀\n\n[BrewHouse](http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html)\n[RailsCast(付費)](http://railscasts.com/episodes/398-service-objects?autoplay=true)", slug: "20141007-rails-service-object", category_id: 6, author_id: nil, display_date: "2014-10-07", is_public: true, video_embed: nil},
  {title: "Ruby code整理系列 ||= 的使用", content: "\n![ruby_or_equal](https://farm8.staticflickr.com/7673/16744649944_aff82604e3.jpg)\n\n本篇簡單說明利用||=符號將if邏輯簡化。\n\n## 1\\. 情境：檢查tag是否存在\n\n假如今天我們在發佈post時，需要在model中檢查作者是否有預設的tag，沒有的話就標記為\"untagged\"：\n\n\n\n```ruby\nbefore_save :assign_tag\n\ndef assign_tag\n\tself.tag = \"untagged\" unless defined?(self.tag)\nend\n```\n\n上方的邏輯簡單解釋，就是先判斷tag有沒有在post的創建過程中宣告過了，如果沒有，就將tag的內容指定為\"untagged\"；如果有宣告過的話，這邊就當作什麼都沒發生，使用原本作者指定的值。\n\n## 2\\. 簡化\n\n這樣的邏輯只剩一行了，還可以怎麼簡化呢？重點在於這樣的句法唸起來有點繞口，而且`self.tag`出現了兩次。在邏輯的處理上其實可以更進一步簡化：\n\n```ruby\ndef assign_tag\n\tself.tag ||= \"untagged\"\n\t# 或者...\n\tself.tag || self.tag = \"untagged\"\nend\n```\n\n再次印證了『沒有最簡單，只有更簡單』的概念，第一個方法中間的||= 符號目前我尚未找到正式名稱，許多英文開發者稱為 double pipeline equal 或 or equal，中文尚未看到統一的稱呼，還請強者補充。\n\n這樣的寫法邏輯說明：回傳||左邊的值，但假如左邊回傳`nil`或`false`，改成把右邊的值指定給左邊，並回傳。第二種方法邏輯相同，但在這裡不比第一種直覺，僅供參考。\n\n當然，既然是Rails，也可以利用Rails的ActiveRecord來解，可以在migration裡加上:default => \"untagged\"讓tag欄位在儲存時若沒有指定也會有default值。\n\n## 3\\. 其他類似的or(||)用法\n\n另一個相似的寫法如下：\n\n```ruby\nresult = a || \"a exists\" \n```\n\n這樣的寫法等於：\n\n```ruby\nif defined?(a)\n\tresult = a\nelse\n\tresult = \"a exists\"\nend\n```\n\n不過要注意的是，由於要判斷a是否存在，所以a一定是要宣告過的數值(例如 a = nil)，否則會出現<span style=\"color:red\">undefined local variable</span>錯誤，不像 ||= 的用法不需要事先宣告。\n\n## 4\\. Hash的例外情況\n\n大家應該都知道以下用法：\n\n```ruby\na = Hash.new(10)\n```\n\n在括弧內的值，代表任何該Hash內尚未宣告的預設值，但並不會儲存起來，使用情況如下：\n\n```ruby\n#以下指令在rails console照順序執行\n\na\n# => {}\n\na[:number]\n# => 10\n\na\n# => {}\n\na[:number] = 25\n# => 25\n\na\n# => {:number => 25}\n```\n\n如果隨便使用hash當中的一個key，則出現的value就是預設值，但並不會儲存。除非我們使用宣告的方式進行指定，該key與value才會儲存起來。\n\n不過，套用剛剛的or(||)用法，會看到以下的例外狀況：\n\n```ruby\na = Hash.new(10)\n# => {}\n\na[:number] = a[:number] || 25\n# => 10\n\na\n# => {:number => 25}\n\n```\n\n在第二個步驟，有一個指定的預設value是10，於是hash就把這個value儲存起來。說實在，會遇到這樣的例外狀況應該非常少，不過假如真的很不幸在這種地方卡關，千萬要記得有這個情況喔！\n\n## 延伸閱讀\n\n[Ruby Inside](http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html)", slug: "20141007-ruby-code-double-pipe", category_id: 7, author_id: nil, display_date: "2014-10-07", is_public: true, video_embed: nil},
  {title: "Rails新手易混淆的變數使用", content: "\n![](https://farm8.staticflickr.com/7687/17365228752_46806b8080.jpg)\n\n對Rails新手來說，常常碰到各種莫名其妙的變數型態，而且只要閱讀高階開發者的程式碼，超容易被各種符號搞得暈頭轉向。本篇簡單介紹各種在新手接觸Rails時會碰到的變數型態，以及分別代表什麼意義。\n\n\n\n## 1\\. local variable 區域變數\n\n這沒什麼好說的，就只是一般的變數，如果是從其他語言跳來的朋友，記得Ruby的local variable並不需要先宣告才能使用。不過在呼叫時，如果是完全沒有提及過的變數，就會產生錯誤。例如：\n\n```\nnumber = 10\n\nnumber\n# => 10\n```\n\n所以在Ruby當中，使用變數前並不用先宣告。唯一需要注意的是在進行數值比較或變數指定變數時，也就是在『使用』時，必須要先宣告：\n\n```ruby\na = b\n# => NameError: undefined local variable \"b\"\n\nif a == b\n\ta = 10\nend\n# => NameError: undefined local variable \"b\"\n\nc\n# => NameError: undefined local variable \"c\"\n```\n\n記得使用先務必要先指定一個值。\n\n## 2\\. @ instance variable 實例變數\n\n說實在，我永遠記不得這中文名字，因為大家學Ruby非得閱讀英文資料，久而久之知道有個東西叫instance variable，卻永遠不知道中文叫什麼。\n\ninstance variable代表的是可以在同一個class的各種method之間互相傳遞，出現時前面會加上`@`符號，在學習Rails時一開始就一定會碰到。例如Xdite的Rails 101當中(在此使用線上版的[Rails 101 S](http://rails101s.logdown.com/posts/210463-2-2)當作範本)，建立controller的第一步index當中一定會看到：\n\n```ruby\ndef index\n\t@groups = Group.all\nend\n```\n\n為啥要加上@呢？為什麼不能使用一般變數就好？因為只有這樣設定，才能夠把變數傳到view當中：\n\n```ruby\n# group controller\ndef index\n\t@groups = Group.all\n\tgroups = Group.all\nend\n\n# view\n<%= @group %>\n# => 顯示所有groups\n\n<%= group %>\n# => 錯誤：NoMethodError\n\n```\n\n又例如像前一篇文章在建立service object時，會在initialize裡面定義好一個要使用的變數，這樣所有的method當中都可以使用。\n\n```ruby\nclass Service\n\tdef initialize(value)\n\t\t@value = value\n\tend\n\n\tdef plus_one\n\t\t@value + 1\n\tend\nend\n\nService.new(2).plus_one\n# => 3\n```\n\n像local variable就沒辦法跨method使用，instance variable才可以。另外，如果沒有先宣告過的instance variable直接使用，Ruby會自動套用給他一個nil值，這點和local variable就非常不同。\n\n```ruby\n@variable\n# => nil\n```\n\n## 3\\. : 符號 Symbol\n\n符號並不是一個變數，但也是新手學習Rails時會有疑惑的部分。例如在一般show action中，都會指定一個要顯示的物件給變數：\n\n```ruby\ndef show\n\tpost = Post.find(params[:id])\nend\n```\n\n這裡頭有兩個需要解釋的地方，一個是params，一個是:id。\n\nparams是在瀏覽器發送http request給伺服器時，除了指定網址以外，也會帶一些參數給伺服器。例如使用者登入的時候，就要將帳號和密碼傳給伺服器。在Rails的controller裡面，就是用params這個變數來代表http request送出的參數。\n\n由於params這個物件裡面包含非常多的資料，所以我們利用讀取物件的[]引號來指定:id。為什麼不是像一般javascript物件一樣用`params[\"id\"]`讀取呢？很簡單，因為這不是javascript物件(什麼爛解釋)，在Rails當中不管是從ActiveRecord資料庫當中查資料、或是從params中讀取資料，都是使用符號來查詢。\n\n符號也可以在hash中套用變數來查詢，就跟一般物件的查詢一樣：\n\n```ruby\nhash = {:name => \"John\", :email => \"john@gmail.com\"}\nvariable = :name\nhash[variable]\n# => \"John\"\n```\n\n在Ruby版本1.9以後，`:name => \"John\"`也可以簡化成將冒號放在後方：\n\n```ruby\nhash = {name: \"John\", email: \"john@gmail.com\"}\n```\n\n完全看自己習慣而定，只要記得冒號在前面和在後面的差異即可，建議所有用法要統一。\n\n## 4\\. Constant 常數\n\n開頭大寫的變數就是常數，在Rails當中，任何model、class、module的名稱都是常數，所以才會看到這些很普遍的寫法：\n\n```ruby\nclass PostsController < ApplicationController\n\tdef new\n\t\t@post = Post.new\n\t\t# 代表準備要從model裡面寫入新的一筆記錄\n\tend\nend\n```\n\n幸好大部分編輯器都會幫我們將開頭大寫的常數給標示出來，不然光是一個開頭大寫，的確還蠻容易搞混的。\n\n另外，常數的後方常會接上`::`符號，代表承接的意思。例如我們要在專案裡設定專門給管理員使用的各種controller，那放在同一個資料夾底下會比較容易管理，這時候若在終端機中開啟新的controller，就輸入：\n\n```\n$ rails new controller admin::posts \n```\n\n就會看到 `posts_controller.rb`自動會歸類到admin這個資料夾裡面，代表承接的意思。\n\n* * *\n\n雖然這些變數和符號並不複雜，但像我在剛開始學時真的踢到不少鐵板，一度以為所有的變數都要以@開頭，也不知道為何有些東西要大寫有些不用。希望這些基本的小知識讓剛開始學習的朋友能有一些認識~\n\n## 延伸閱讀\n\n[Ruby variables](http://strugglingwithruby.blogspot.dk/2010/03/variables.html)\n\n[Ruby Quick Reference](http://www.zenspider.com/Languages/Ruby/QuickRef.html#variables)", slug: "20141009-rails-basic-variables", category_id: 6, author_id: nil, display_date: "2014-10-09", is_public: true, video_embed: nil},
  {title: "常見 block 說明和應用：do, map, collect", content: "\n![](https://farm8.staticflickr.com/7745/17159709427_0ef7dda2ac_o.jpg)\n\n## 1\\. each & do block基礎\n\n在剛開始接觸Ruby或Rails時，一定對於block感到很困惑(至少筆者是這樣認為啦...)，假如又傻傻用scaffold架起一個Rails專案，更是看不懂裡面在幹嘛。以下是常見的Ruby block用法：\n\n\n\n```ruby\n\nresult = 0\narray = [2,3,4,5,6]\n\narray.each do |value|\n\tresult = result + value\nend\n\nresult\n# => 20\n\n```\n\n1\\. 從`do`到`end`中間算是一個block。\n2\\. each 方法讓數列(array)中每個值都執行一次該block。\n3\\. `|value|`代表數列裡的變數。value變數在此不可省略，因為代表著數列中的每一個數值。當然，那只是個變數，你要叫他a或b也可以。\n\n由此可知，上頭的each block實際上執行的內容為：\n\n```ruby\n# 由於array數列中有五個值，因此總共會執行五次，帶入不同的值\nresult = result + 2\nresult = result + 3\nresult = result + 4\nresult = result + 5\nresult = result + 6\n```\n\n## 2\\. do 與 {} 的差異\n\n前一個章節的do...end例子，也可簡寫為以下：\n\n```ruby\narray.each {|value| result = result + value } \n```\n\n在作用一樣的情況下，由於邏輯較簡單，這樣的寫法較容易整理。\n\n不過什麼時候該用do，什麼時候該用括弧{}呢？在[Stackoverflow](http://stackoverflow.com/questions/533008/what-is-the-difference-or-value-of-these-block-coding-styles-in-ruby)上有許多相關討論，可以整理為以下邏輯：\n\n1\\. 如果邏輯簡單，可以用一行來處理，就盡量使用 {}\n2\\. 相對之下，如果邏輯複雜，則以分行寫的方式處理，使用do...end寫法\n\n例如以下的用法就不適合寫在同一行：\n\n```ruby\narray.each do |value| \n\tresult = result + value\n\tanother_array << result if i > 10\n\t# 牽扯的邏輯比較複雜，如果寫在同一行會很吃力且不必要\nend\n```\n\n另外，在Rails當中，常常遇到需要處理一整串從資料庫挖出來的資料，假如我有一堆個人資料要算平均年齡，可以用以下作法：\n\n```ruby\nhash_array = [{:name => \"John\", :age => 30},\n\t\t\t  {:name => \"Peter\", :age => 28},\n\t\t\t  {:name => \"Mary\", :age => 32},\n\t\t\t ]\nresult = 0\nhash_array.each {|person| result += person[:age] }\naverage = result / hash_array.length\n# => 30\n```\n\n讓整個加總在map裡面完成，簡單易懂。\n\n## 3\\. Rails中其他常使用的block：collect、map\n\nmap和collect兩個Ruby內建的method是專門產生數列用的，可針對每一個數值進行計算。在處理hash或object的時候，可以分別設定為key和value，就可以分開處理：\n\n```ruby\n# 用於數列\narray = [3,6,9]\narray.map {|value| value * 20}\n# => [60, 120, 180]\n\n# 用於物件\nhash = {:name => \"John\", :age => 30, :phone => \"0910111000\"}\nhash.map {|key, value| value }\n# => [\"John\", 30, \"0910111000\"]\n```\n\n補充：map和collect用法完全相同，主要是很多其他語言當中同樣的處理方法都叫做collect，因此Ruby也提供了相同的語法給不同習慣的開發者使用。\n\n## 4\\. 使用&:符號將block再簡化\n\n在Rails當中，假如我們要從資料庫挖出所有使用者的姓名，利用each可以寫法如下：\n\n```ruby\nnames = User.all.map {|user| user[:name] }\n# 組成一個全部都是名字的數列\n```\n\n但如果只針對數列中的每一個值使用一個method，那可以再更簡化為：\n\n```ruby\nnames = User.all.map(&:name)\n```\n\n那個很奇異的&:符號代表著一個block的縮寫，而name就是帶入各個User要使用的method。\n\n詳細的討論可以在[Stackoverflow](http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby)上找到。\n\n## 延伸閱讀\n\n[Block vs Brackets](http://stackoverflow.com/questions/2122380/using-do-block-vs-brackets)\n\n[Map & Collect](http://stackoverflow.com/questions/5254732/difference-between-map-and-collect-in-ruby)\n\n[&: to_proc](http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby)", slug: "20141010-ruby-block-map-collect", category_id: 7, author_id: nil, display_date: "2014-10-10", is_public: true, video_embed: nil},
  {title: "Debugging Rails：了解9個常見的錯誤訊息", content: "\n![](http://www.motion-express.com/wp-content/uploads/2014/10/Rails-error.jpg)\n身為一個開發者，與bug對抗根本是每天必備功課，而Rails也有非常完備的除錯(debug)方式可供使用。包括幾個強而有力的gem：better_errors、debugger、pry等等。\n\n\n\n不過！在使用這些強大的debug工具之前，是否有遇過根本連錯誤訊息都看不懂的情況呢？筆者自己剛開始開發Rails時有些錯誤訊息還要先上google去查才能得到解答。在這裡整理了9個常見到的錯誤以及可能原因，假如大家都能熟悉這些錯誤，以後遇到bug時就可以準確的知道錯誤出在哪裡囉！\n\n## 1\\. NoMethodError: undefined method\n\nmethod是Ruby當中所有利用`def...end`定義的方法都叫method，這段錯誤訊息的意思是你呼叫了一個method，卻沒有定義這個method。通常是由幾個原因造成的：\n\n### (1)打錯字\n\n最常出現的狀況是例如我們要把user的名字輸出到view當中，卻在view當中指定錯名稱。例如：\n\n```ruby\n# controller\n@user = User.find(params[:id])\n\n#view\nUsername: <%= @user.namme %> \n\n# name 拼錯造成NoMethodError\n```\n\n這樣就會在執行時出現`undefined method \"namme\"`的錯誤。打錯字的情況也常常出現在model或class的名稱當中，這時候就會出現Uninitialized Constant的錯誤訊息：\n\n```ruby\n@user = Users.find(params[:id])\n\n# NameError: Uninitialized Constant\n```\n\n### (2)在view當中使用controller method\n\nRails預設view當中是無法使用controller method的，只能使用helper。除非我們在controller當中設定某個method為helper method，才可以進行使用。以[Rails Cast中的user情況](http://railscasts.com/episodes/250-authentication-from-scratch)為例：\n\n```ruby\n# 在controller當中一定要定義這行，否則在view當中執行會出現undefined method錯誤\nhelper_method :current_user\n\ndef current_user\n  @current_user ||= User.find(session[:user_id]) if session[:user_id]\nend\n```\n\n### (3)instance method和class method混著使用\n\n在處理model物件時比較容易發生這類型的錯誤，在model中，處理整個class和處理單一物件的用法會不相同，例如我們在User這個class當中設定一個檢查各個欄位資料是否都有填入的method：\n\n```ruby\ndef has_blank_column?\n\t# ... 省略\nend\n\nUser.first.has_blank_column?\n# => true\n\nUser.has_blank_column?\n# => undefined method \"has_blank_column?\"\n```\n\n該method並未加上self，屬於instance method且只能使用於一個user，而非整個User class\n\n### (4)class類型使用錯誤\n\n在處理陣列(Array)與物件(Object)時，有些方法容易搞混，例如在合併時，merge、push是兩種class的方法，用錯時也會有錯誤訊息。\n\n```ruby\na = [1,2,3,4]\nb = [5,6,7,8]\n\na.push(b)\n# => [1,2,3,4,5,6,7,8]\n\na.merge(b)\n# => undefined method \"merge\"\n# => merge是用於合併object\n```\n\n## 2\\. NameError: undefined local variable or method\n\n其實這點跟剛剛的情況非常相像，但差別在於可能會有variable的scope用錯問題。\n\n在一個method內的local variable，無法在另一個method內使用；或是一個class內的class variable無法在其他class內使用。假設今天有一個Employee class，我們設定檢查bonus的method：\n\n```ruby\nclass Employee\n\tdef total_pay\n\t\ta = self.pay\n\t\tb = self.bonus\n\t\ta + b\n\tend\n\n\tdef double_bonus\n\t\ta + b*2\n\tend\nend\n\nUser.first.double_bonus\n# => undefined local variable \"a\"\n# => a和b都是local variable無法在另一個method中使用\n```\n\n## 3\\. TypeError: no implicit conversion of ____ into ____\n\n這樣的錯誤最主要都是試圖將一種資料型態，使用於另一種資料型態。同樣的錯誤訊息還有：\n\nArgumentError: comparison of ____ with ____ failed\n\nTypeError: nil can't be coerced into ____\n\n以上的空格可以自行套用至各種類型，包括Float, Fixnum, String, Decimal等等。遇到這種情況，請從該變數開始判斷該變數是否應用在錯的地方，例如：\n\n```ruby\na = 10\nb = nil\nc = \"string\"\n\na + b\n# => TypeError: nil can't be coerced into Fixnum\n\na + c\n# => TypeError: no implicit conversion of String into Fixnum\n```\n\n當然，許多情況也可能是gem本身的bug造成的，如果模糊不清的時候還是google看看有沒有相關issue。\n\n## 4\\. Unknown Action\n\n通常在view當中設定link，或是在routes.rb當中設定時會出現這個問題：\n\n```ruby\nget '/sign_in', :to => 'sessions#new', :as => 'sign_in'\n```\n\n假如今天並沒有在sessions controller當中設定new action，就會出現這個錯誤訊息。\n\n## 5\\. No Routes Match\n\n通常是打錯字了，例如posts_path打成posys_path，Rails會從路徑列表中搜尋這個名稱但找不到。\n\n另外一種可能是在routes中沒有定義，例如自訂的action一定要先放在routes.rb當中：\n```ruby\nresources :posts do\n\tcollection do\n\t\tget :old_entries\n\tend\nend\n```\n\n如果沒有放，那在尋找路徑old_entries_posts_path時，就會有這個錯誤訊息。\n\n## 6\\. ActionView::MissingTemplate\n\n意思是在controller當中有定義，但卻在view當中沒有相對應的檔案名稱，例如有一個show action，在view資料夾中就必須要有一個show.html.erb才抓得到。如果是設定輸出成json就沒有這個問題。\n\n## 7\\. ActiveRecord::PendingMigrationError\n\n意思是有新的migration檔案，卻還沒有進行migrate，Rails必須在migrate都完成的情況下才能啟動server。解決方法是執行`rake db:migrate`指令。\n\n## 8\\. SyntaxError\n\n代表文法有錯，依照錯誤訊息檢查是否if、do、each都有搭配一個end，所有括弧都是完整的{}、()、[]等等。假如有非常複雜的if...else邏輯時會容易出現這個問題。\n\n## 9\\. ActiveRecord::RecordInvalid\n\n通常是我們在使用ActiveRecord時用`.save!`方法時所跳出的訊息，如果我們只使用.save，就不會有錯誤訊息，但也不會正確存入。假如我們發現無法儲存，可以利用.save!所跳出的錯誤訊息來檢查為何無法儲存。但如果是到實際的producion環境，就改使用.save，比較不會整個網站爆掉，影響使用者體驗。\n\nCC圖片授權：[OpenClipart](https://openclipart.org/detail/109/red-round-error-warning-icon-by-molumen)、[WikiPedia](http://en.wikipedia.org/wiki/Nuclear_explosion#mediaviewer/File:Operation_Upshot-Knothole_-_Badger_001.jpg)", slug: "20141011-debugging-rails-9-message", category_id: 6, author_id: nil, display_date: "2014-10-11", is_public: true, video_embed: nil},
  {title: "利用module整理model", content: "\n![](https://farm8.staticflickr.com/7729/16746918733_1ebd858a79.jpg)\n\n在Rails當中有許多refactor model的邏輯和方法，本篇要說明要如何利用module整理model。\n\n\n\n## 1\\. 情境：每個model都需要使用同一個method\n\n例如今天人力資源部門的資料庫，有engineer、salesperson共兩個table，我們要計算每一個部門的平均薪資，因此先撰寫以下的method：\n\n```ruby\nclass Engineer < ActiveRecord::Base\n\tdef self.average_pay\n\t\tresult = 0\n\t\tall.map {|person| result = result + person[:pay] }\n\t\tresult / all.length\n\tend\nend\n```\n\n用這樣的方法，就可以利用`Engineer.average_pay`算出整個部門的平均薪資。其他部門也照本宣科。\n\n## 2\\. 利用module簡化重複的方法\n\n雖然這樣看起來很ok，但假如整個人力資源的資料庫有20個table都要這樣算呢？這樣完全不符合Rails的DRY原則，要是計算方式有改動，就要改超多個，所以我們要使用module來簡化。\n\n首先在model資料夾的concerns底下開一個專門存取module的檔案。以剛才為例，開啟一個`pay.rb`的檔案，專門處理與pay相關的method。Rails在model資料夾當中設置了一個concerns資料夾，裡頭專門存放各種module，而這個concerns是利用Rails內的ActiveSupport::Concern將所有module串連起來。\n\n資料夾結構看起來會長這樣：\n\n![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-11-上午12.54.08.png)\n\n接著進入該pay.rb檔案，輸入以下內容：\n\n```ruby\n# 依照Rails設定，module的名字必須與檔案名稱相同\nmodule Pay\n\textend ActiveSupport::Concern\n\n\t# 將原本計算薪資的method放入\n\tdef average_pay\n\t\tresult = 0\n\t\tall.each {|person| result = result + person[:pay] }\n\t\tresult / all.length\n\tend\nend\n```\n\n這樣的話我們可以在每個需要計算平均薪資的model內簡單設定即可：\n\n```ruby\nclass Engineer\n\textend Pay\nend\n\nEngineer.average_pay\n# => 正確回傳平均薪資\n```\n\n補充：`extend ActiveSupport::Concern`這行是用於有很多module彼此互相取用method時使用的，如果只有一個method的話可以拿掉。\n\n## 3\\. extend vs include\n\n前面使用的是class method，假如我們只是要使用instance method呢？例如我們要知道一個人員有哪些資料還沒填寫，寫成：\n\n```ruby\nmodule Pay\n\t# 檢查該人員有多少欄位是nil\n\tdef blank_count\n\t\tresult = 0\n\t\tarray = serializable_hash.map { |key, value| value }\n\t\tarray.each {|value| result = result + 1 if value.nil? }\n\t\tresult\n\n\tend\nend\n```\n\n這時我們在model當中就要使用include而非extend：\n\n```ruby\nclass Engineer\n\tinclude Pay\nend\n\nEngineer.first.blank_count\n# => 正確回傳nil欄位有多少個\n\nEngineer.blank_count\n# => NoMethodError: undefined method \"blank_count\"\n```\n\n看得出差異嗎？extend使用於class method，也就是針對整個class進行套用，而include只能使用於instance method。\n\n## 4\\. module vs service object\n\n慢著！這用法不就是[先前service object的概念](http://www.motion-express.com/?p=3229)嗎？如果已經有service object的存在，為何還需要使用module呢？\n\n的確在使用上稍微有點不同，但結構上是差不多的，就以剛剛的方法為例，我一樣可以創造一個service object寫一樣的內容。\n\n```ruby\n# => 使用service object看起來會長這樣\naverage_pay = Pay.new(Engineer.all).average_pay\n\n# => 使用module看起來長這樣\nextend Pay\naverage_pay = Engineer.average_pay\n```\n\n看起來module的用法比較乾淨簡單一點，但在維護上，可能會因為有多個module造成有多個include、extend，在維護時無法直接判斷哪個method是在哪個module當中。而利用service object時，可以從class名稱很直接的得知是從哪個檔案讀取出來的method。\n\n我個人建議，如果module檔案只有一個，共用的功能也很簡單，那使用module會讓畫面看起來比較乾淨，但如果module很多，那使用service object會在維護時比較容易辨認及追蹤。\n\n## 延伸閱讀\n\n[ihower](http://ihower.tw/blog/archives/3949)\n\n[Stackoverflow](http://stackoverflow.com/questions/14541823/how-to-use-concerns-in-rails-4)", slug: "20141011-rails-module-model", category_id: 6, author_id: nil, display_date: "2014-10-11", is_public: true, video_embed: nil},
  {title: "Debugging Rails 遇到Bug別慌！先看懂錯誤訊息！", content: "\n![](https://farm8.staticflickr.com/7680/17159732967_2f14b88ca7.jpg)\n\n在新手學習Ruby & Rails時，可能完全不知道error或exception要如何處理，一跳出錯誤訊息就傻掉了，但大多的情況都可以從錯誤訊息中判斷出問題所在，省下Google或發問的時間。\n\n\n\n在這邊簡單說明如何閱讀錯誤訊息：\n\n## 1\\. 看懂Ruby irb當中的錯誤訊息\n\n學習Ruby最開始都是在console的IRB(Interactive Ruby)當中(除非你跳過這個階段)。在IRB當中，錯誤訊息顯示方式非常直接、原始。以下是一個很典型的錯誤：\n\n![](https://farm8.staticflickr.com/7724/17367207685_8cfd113840_b.jpg)\n\n簡單將這個訊息分為幾個部分：\n\n### (1) 標題：NoMethodError\n\nRuby中有非常多error及exception的類型，分別代表不同的錯誤。例如NoMethodError代表使用者試圖呼叫一個不存在的method，通常是打錯字造成誤判或是根本就還沒宣告。\n\n詳細的列表可以從下方的延伸閱讀中找到。\n\n### (2) 內容：undefined method `merge' for [1, 2, 3]:Array\n\n這段訊息較長，但基本上就是標題的延伸，指出哪個地方有問題。以這個錯誤為例，他指出使用者要在[1,2,3]使用merge這個method，但一個數列(Array)並沒有merge這個method，他好心告訴我們應該要先宣告以後才能使用。\n\n### (3) 來源：from (irb):3\n\n這串來源告訴我們是在哪個檔案、哪一行出了問題，叫做stack trace，目前程式很小，只有2行，如果程式很大，stack trace列表會非常長。由於我們是在irb當中，因此他首先秀出irb這個位址，並告訴我們是在第3行的地方產生這個錯誤。\n\n下方會列出其他的檔案，告訴我們這整串的程式運作過程。由於整個Ruby程式是連動的，所以一個複雜的程式會牽動很多檔案，從這裡我們就可以看出每一個檔案在哪個環節出了問題。例如在這裡，我們irb的檔案是存在`bin`這個資料夾內，他就把檔案位置給我們看，並說明是在main區塊內。\n\nfrom /Users/hsiehadler/.rvm/rubies/ruby-2.1.2/bin/irb:11:in 'main'\n\n什麼是main區塊？代表他不屬於任何一個class，如果我們是在class內產生的錯誤例如：\n\n```ruby\nclass Post\n\tdef draft\n\t\tDraft.create(@post)\n\tend\nend\n```\n\n如果這個method有產生什麼錯誤，他會在最後標註class: Post代表是在Post這個class當中產生的錯誤。\n\n### (4) 看懂了就來debug\n\n總和來說，以上的例子我們宣告了`a`和`b`為數列(Array)，但數列並沒有包含`merge`這個method，所以出現了錯誤訊息，告知我們在Array這個class當中並沒有merge這個用法，可以改為使用.push。\n\n## 2\\. 看懂Rails Expection頁面\n\n在Rails當中，錯誤的呈現方法相同，但包裝得比較漂亮一點，比較能看出構造來。以下是一個很典型的Rails錯誤畫面：\n\n![](https://farm8.staticflickr.com/7750/17159743937_d0b858e18c_b.jpg)\n\n分類說明：\n\n### (1) 標題\n\n比起irb當中的標題，這裡的標題構造要稍微複雜一些，我們可以分成兩個部分：\n\n<span style=\"color: green\">ActiveRecord::RecordNotFound</span> in <span style=\"color: blue\">PostsController#show</span>\n\n前面的部分一樣是錯誤類別，而ActiveRecord是Rails使用的資料庫框架，底下引發了RecordNotFound這個錯誤，告訴我們無法找到相對應的資料。\n\n後面的部份點出是在哪一個部分造成的錯誤，記得Rails的MVC架構，就可以看懂這裡是在post controller裡面的show action造成的錯誤。\n\n### (2) 內容： Couldn't find Post without an ID\n\n這告訴我們詳細的錯誤內容，可以看出由於find這個method是搜尋資料庫內的id，所以一定是要使用數字帶入查詢。他告訴我們：『你不給我id是要找什麼鬼？』\n\n### (3) 來源：@post = Post.find(params[:post_id])\n\n同樣的，這邊點出主要錯誤的範圍、行數、前後文為何。\n\n### (4) 來源： stack trace\n\n這邊有三種trace可選，進階的開發者可以選擇full trace來看整體rails架構以及運算的邏輯。入門開發者只要觀看預設的application trace就夠了，只會顯示我們自己操作的內容。\n\n### (5) 參數： {\"id\"=>\"1\"}\n\nRequest這個部分會顯示我們傳送給伺服器的參數。\n\n### (6) 看懂了就來debug\n\n這邊可以看出我們傳送了參數{ \"id\" => \"1\"}給伺服器，要求回傳一個單獨的post內容，但很明顯的在show action中有一個錯誤，將搜尋用的find method後方參數誤打成params[:post_id]。我們在request中並沒有回傳任何post_id變數，造成Rails無法用任何值去搜尋資料庫，也導致最後找不到任何資料。\n\n只要將post_id改為id，就可以解決這個問題了。\n\n在了解要如何閱讀錯誤訊息後，下一步就可以來看看有哪些常見的錯誤類型，以及最有可能發生的原因。\n\n## 延伸閱讀\n\n[Ruby Exceptions Reference](http://rubylearning.com/satishtalim/ruby_exceptions.html)\n", slug: "20141013-debugging-rails-read-messages", category_id: 6, author_id: nil, display_date: "2014-10-13", is_public: true, video_embed: nil},
  {title: "Debugging Rails 使用 better_errors 在瀏覽器中直接進行除錯", content: "\n\n![](https://farm8.staticflickr.com/7750/17365285062_764c4314f1.jpg)\n\n[上一篇](/debugging-rails-9-message/)提到在發生錯誤時，要先學會閱讀錯誤訊息。但假如無法一時之間了解發生什麼事，那最好有一個可以操作的平台，讓我們了解現在網頁上的variable及method執行起來是什麼情況。\n\nbetter_errors這個gem就是針對Rails在產生錯誤訊息時，提供開發者非常完整的資訊來看看錯誤是發生在哪裡。另外搭配binding_of_caller，可以顯示錯誤發生當下的variable列表。\n\n\n\n## 安裝\n\n在Gemfile中列出以下gem：\n\n```ruby\ngroup :development, :test do\n\tgem 'better_errors'\t\n\tgem 'binding_of_caller'\nend\n```\n\n並在command line 中執行`bundle`進行安裝。\n\n之後再遇到錯誤畫面，會變成以下樣貌：\n\n![](https://farm9.staticflickr.com/8882/17159772367_e03459e543_b.jpg)]\n\n## 1. 檢查 stack trace 找到自己的檔案\n\n首先，左邊是一整串檔案列表，跟先前提到的邏輯相同，是整個Rails的檔案列表。進階開發者可以查看整個邏輯，方便debug，初階開發者建議點選左邊的`Application Frames`並找到自己輸入的檔案即可，因為90%的錯誤都是在自己輸入的檔案裡。如圖，其中`posts controller`就是我們自己輸入且出錯的地方。\n\n再次提醒，如果是由於使用各式各樣的gem而產生了從來沒聽過的錯誤，有50%機率是gem本身的問題，請先到google上搜尋相關錯誤訊息。\n\n## 2. 使用 console\n\n如圖，我們看到在畫面右邊的欄位中，有一個即時互動的console可以使用，我們在這裡可以像在irb中一樣，直接使用Ruby語法來操作各種指令，所有你想得到在irb當中能用的東西，在這裡都能用。建議可以就以下幾個步驟執行：\n\n<span style=\"color:red\">(1)檢查變數</span>：檢查各個instance variable以及正在計算的variable有沒有照你心理想的執行。或利用is_a?或.class這兩個method來檢查變數是否型態正確。\n\n<span style=\"color:red\">(2)檢查method</span>：建議將method套用成不同的variable來使用，例如`calculate(3)`這個method替換成`calculate(8)`，替換不同的變數看執行結果是否如你的意。\n\n<span style=\"color:red\">(3)檢查資料庫檢索</span>：用同樣的method或換個method來搜索資料庫，確認資料庫可以呼叫得出你想要的資料。\n\n<span style=\"color:red\">(4)檢查傳入的參數</span>：可輸入params，檢查傳入的值是否如預期。\n\n## 3. 檢查數值\n\n假如一下想不到是哪個參數有問題，可以參考畫面右下方的數值，這裡有Request Info和Variables兩個區塊，我們可以先檢查這個request當中傳出了什麼數值，並且有哪些variable可以使用。通常這時候就會發現一些很基本的錯誤，例如字串(String)使用成數字(Integer)，或是物件的字串(String)帶成符號(Symbol)，都可以在這裡檢查。\n\n如果有發現可疑的狀況，可以直接在console裡面操作。\n\n## 4. 實際Debug\n\n![](https://farm8.staticflickr.com/7687/17341292466_4695c20029_b.jpg)\n\n看得出來我們正在實作一個模糊比對的搜尋功能，在console中反覆試了幾次之後，發現不應該使用find，而是使用where method，才可以找到東西。因此就知道應該把搜尋功能改成@post = Post.where('title LIKE ?', \"%\#{params[:search]}%\")\n\nbetter_errors的妙用在於不必利用debugger或pry等工具進入rails console，而是直接把console搬到瀏覽器上，非常直覺，也為所有開發者省下非常多的時間。幾乎成為每個專案都必裝的gem。\n\n## 延伸閱讀\n\n[RailsCast](http://railscasts.com/episodes/402-better-errors-railspanel)\n\n圖片CC授權：[Wikimedia](http://commons.wikimedia.org/wiki/File:Fighting_Nyalas.JPG)", slug: "20141014-debugging-rails-better-errors", category_id: 6, author_id: nil, display_date: "2014-10-14", is_public: true, video_embed: nil},
  {title: "Debugging Rails 沒有錯誤訊息卻還是有bug！要如何即時除錯？", content: "\n![pry](https://farm9.staticflickr.com/8838/17181067459_ca83e4e669.jpg)\n\n大家應該都遇過這個情形，給了一個method，沒有錯誤訊息，出來的結果卻是錯的！\n\n遇到這樣的情況，要如何判斷是哪裡錯呢？一個一個試嗎？\n\n## 你需要pry當朋友\n\n強大的即時debugger工具：pry，他就像rails 內建的[debugger](https://github.com/cldwalker/debugger)一樣，擁有強大的除錯功能，但更花俏，也更實在。有以下特點：\n\n1\\. 排版比起一般的rails console易讀\n2\\. 可選擇不同的操控邏輯\n3\\. 即時攔截，debug當下的variable、method\n4\\. 提供step、next等逐行debug功能\n\n## 安裝與執行Pry\n\n安裝pry非常簡單，在Gemfile中加入：\n\n```ruby\ngem 'pry'\ngem 'pry-rails'\ngem 'pry-nav'\n```\n\n接著在console中輸入`bundle`就完成了。\n\npry有非常多外掛，包括pry-byebug, pry-nav等一大堆外掛，但隨著版本進步，很多特色都直接放入pry當中了，在這邊介紹幾個比較有特色的。\n\n### 載入環境\n\n一般來說，直接在console當中輸入`pry`，就會進入irb環境，而在rails專案資料夾底下輸入`pry`預設並不會載入rails環境，因此需要在執行pry時必須同時執行以下指令：\n\n```$ pry -r ./config/environment```\n\n這樣就像直接輸入`rails console`指令一樣，可以讀取專案內的內容。\n\n如果你有安裝`pry-rails`這個gem，就只要執行：\n\n```$ rails c```\n\n就可以切換至pry並載入rails環境了。\n\n### 攔截rails執行內容\n\n這是本篇最大的重點，pry提供的debug功能讓開發者可以在程式間插入一段用法：\n\n```ruby\ndef index\n\t@post = Post.all\n\tbinding.pry\nend\t\n```\n\n只要程式執行時，遇到那段binding.pry，就會自動在console當中進入debug模式，如下圖：\n\n![](https://farm9.staticflickr.com/8729/17179490138_0e3d3c5413_b.jpg)]\n\n畫面上會出現一個console可以使用，這有什麼特別的？重點在於，通常我們需要攔截除錯的時候，都是因為有些variable和method回傳的內容不符期待，才會有這樣的問題。在這個pry console當中，我們可以直接觀看變數的情況，並立刻進行實驗、修正。\n\n## Pry使用重點\n\npry console比起一般rails console可以下的指令更為精確。\n\n### cd\n\n啥？cd是啥？\n\n意思是可以直接進入某個變數或class當中操作，例如：\n\n![](https://farm8.staticflickr.com/7676/17367297335_b46d765609_b.jpg)\n\n我們可以利用這個階層的觀念，一層一層進入物件或變數當中檢查。\n\n### self\n\n檢查目前在哪個scope當中，並且自己有什麼樣的variable或symbol。\n\n### ls、methods\n\n這兩個指令可以看到現在的這個class或scope內有什麼樣的variable或method可以使用。\n\n當然，列出來的指令一定非常多，我建議使用methods指令時，看最上面的指令即可，因為那些才是我們自訂的指令。或是可以利用include來看我們想要查看的method存不存在。\n\n```$ self.include? :new```\n\n有的話，我們就可以實際在pry中執行並帶入參數看看結果為何。\n\n### next、step\n\n這兩個可說是debug神器，因為在較複雜的method當中，我們會需要一行一行的檢視，看variable和其他method計算的結果到底是在哪個點出錯的。\n\n-> step意思是請pry執行這一行，並在下一行停止。\n\n-> next意思是請pry執行這一段block，並在下一段block開始時停止。\n\n這兩個方法大同小異，但next所跨越的範圍稍微大一點點，因為會把一小段code執行完畢，而step是真的要逐行檢視的時候使用。而這兩個方法都會跨越到rails的source code裡面，算是超級精密的檢視。\n\n### continue\n\n如果是初學者，可能不需要這麼精細的step和next檢視。建議在幾個關鍵的地方綁上binding.pry，接著在一個地方檢視完畢以後，使用continue指令，程式就會繼續執行，到下一個binding.pry的地方才會停止。\n\n此外，有些gem將這些特色全部合在一起，變成只要裝1~2個gem即可，例如pry-byebug或pry_debug等等，可以參考這些說明文件看有何不同(基本上大同小異)。由於pry功能真的很豐富，我也還沒有全部嘗試過，在延伸閱讀當中有更多資料可以查看。\n\n### exit-all\n\n直接跳出pry除錯，繼續執行程式。\n\n## 在瀏覽器中直接debug\n\n另一種作法是使用先前介紹的better_errors，可以直接在瀏覽器畫面中debug。\n\n作法是在覺得有問題的地方加上`raise`，rails會在該行指令處產生一個RuntimeError，就會進入錯誤畫面了。例如：\n\n```ruby\ndef index\n\t@post = Post.all\n\traise\nend\t\n```\n\n如果不喜歡在console中debug，這也是一個好方法，但個人認為較pry的功能不完全，且指令打多了畫面會很亂。若是要進行比較陽春的除錯，就可以考慮用這個方法。\n\n![](https://farm9.staticflickr.com/8811/17365367252_8e47721eed_b.jpg)\n\n## 延伸閱讀\n\n[Rails除錯指南](http://rails.ruby.tw/debugging_rails_applications.html)\n\n[Pry官網](http://pryrepl.org/)\n\n[xdite部落格](http://blog.xdite.net/posts/2012/08/13/pry-the-new-debugger)\n\n[RailsCast](http://railscasts.com/episodes/280-pry-with-rails)\n\nCC授權圖片：[pixabay](http://pixabay.com/p-31832/?no_redirect)", slug: "20141015-debugging-rails-pry", category_id: 6, author_id: nil, display_date: "2014-10-15", is_public: true, video_embed: nil},
  {title: "Debugging Rails：前端後端到底哪裡出錯？用DevTools來檢視整個流程", content: "\n數值回傳到前端就是錯！到底是前端的問題還是後端的問題？\n\n通常Rails都會配合複雜的前端框架，例如Ember.js或Angular.js，彼此之間用ajax和json來溝通。在前後端越長越複雜的時候，這種癥結點就會出現了。最好是能先抓出是哪邊的問題，這樣debug才能精確！如果後端工程師debug一整天，結果發現錯是在前端...這...\n\n不過這樣的情況，可以依靠瀏覽器內建的除錯工具，可以幫助我們判斷前後端送資料的詳細內容，可以用這個地方來判斷到底是哪個環節出錯。\n\n\n\n\n\n>1\\. 如果在發送ajax request的時候就已經有問題，那問題就在前端。\n\n>2\\. 如果是從後端回傳的數值有問題，那問題就在後端。\n\n>\n\n例如有一個全台灣50歲人口平均收入計算程式，要從資料庫抓出所有人的收入並計算平均。前端傳送一個ajax request到後端資料庫去查詢所有50歲人口的收入，假如送出去的資料是40歲而非50歲，那後端再怎麼精準，傳回前端的數值一定是錯的。反之，如果送出的數值是正確無誤的，那就可以合理懷疑在資料庫進行query時是否有什麼問題？\n\n## 1\\. 使用Chrome DevTools\n\n身為一個專業開發者，使用Firefox也是很合理的事情。不過這邊篇幅有限，就先拿市佔率最高的Chrome來示範。Firefox有相對應的firebug，功能非常相近；如果非常熱愛IE，也有IE Developer Toolbar可以使用。\n\n### 啟動\n\n非常簡單，在開啟Rails app後，在網頁上按下滑鼠右鍵，選擇『檢查元素』這個選項，或是直接使用鍵盤熱鍵`ctrl(command) + shift + I`就會出現一個DevTools視窗。\n\n預設視窗是Element，用來檢視網頁中有什麼html元素，而左上角有一個『Network』選項，點進去以後就是列表，列出所有在網頁上執行的動作。如下圖：\n\n![](https://farm9.staticflickr.com/8776/17367323205_a561eaedff_b.jpg)\n\n接下來要從最左邊的Name欄位來尋找瀏覽器送出的request，雖然畫面上有很多項目，但例如包含js?字串的檔案很明顯就是在抓取js檔案，而.jpg結尾的項目就是在下載圖片。\n\n我們要看的是最眼熟的部份，例如第一個posts很明顯就是我們在controller中設定的action，這裡除了action名稱之外，也會使用id當做送出request的名稱。這些項目就是我們要檢查每次送出與接回的request。\n\n### 檢視瀏覽器送出的request內容\n\n在檢視畫面當中，我們可以從header這個標籤來看瀏覽器送的內容是什麼，例如我要向伺服器端需求總共有多少個post，就設定如下：\n\n```ruby\n<%= link_to \"count\", post_count_posts_path(request: \"I want to see post count\"), method: :post %>\n```\n\n這樣點選連結，就會在DevTools中出現以下畫面：\n\n![](https://farm9.staticflickr.com/8854/17365407212_e2ec881fda_b.jpg)\n\n可以注意到有一個Query String Parameters的項目，裡面包含了我們剛才送出去的字串。如果是用ajax，則會出現一個request payload的標籤，裡面同樣是送給伺服器的參數。這邊就可以檢查到底送出了什麼樣的內容。\n\n### 檢視伺服器回傳值\n\n根據剛剛的需求，假如我們這樣設定controller：\n```ruby\t\ndef post_count\n\tpost_count = Post.all.size\n\tstring = \"Total post: \" + post_count.to_s \n\trender :json => string\nend\n```\n\n同樣在DevTools的檢視畫面中，我們可以點選右邊的response標籤，來看看回傳的內容是什麼。就會很明顯看到回傳的內容是總共有多少的post數量如下：\n\n![](https://farm9.staticflickr.com/8780/17181116559_1f8960dd87_o.png)\n\n這樣一來，送出和回傳的值都一目了然，可以很明確的將前後端的範圍切開，如果是送出有問題，那就修正前端；反之如果是回傳值有問題，就來檢查後端。\n\n## 2\\. 使用Rails Panel\n\n另一項有用的工具是Chrome當中的<a target=\"_blank\" herf=\"https://chrome.google.com/webstore/detail/railspanel/gjpfobpafnhjhbajcjgccbbdofdckggg\">Rails Panel</a>，他可以檢視Rails在後端所接收到的參數、執行的controller、action，所花的時間等等，提供的資訊非常詳細。\n\n### 安裝\n\n\n\n>1\\. 在chrome store中安裝\n\n>2\\. 在Rails Gemfile中安裝`gem 'meta_request'`，並執行bundle\n\n>\n\n使用方法與DevTools相同，呼叫DevTools視窗後，會看到最右邊出現一個Rails的標籤。\n\n### 使用\n\n以剛剛為例，當我們送出request時，就可以點選Rails Panel，並看到一個列表，每一個項目都代表串入伺服器的request，同樣點擊進行詳細檢視。\n\n在點擊剛剛的post_count項目後，右方params標籤可以列出這個request所要執行的controller、action，以及帶有什麼參數，一目了然，尤其在get和post容易搞混的情況下，這邊的method可以很方便的看到到底傳進來的是post還是get method (當然剛才介紹的DevTools畫面上也看得到)。\n\n![](https://farm9.staticflickr.com/8759/17179564478_66237ba51d_b.jpg)\n\n另外一個很厲害的是ActiveRecord標籤，因為他就像在console一樣，會直接顯示查詢資料庫的狀況，console的排列比較雜亂，而在這裡就分得很清楚。如果今天我們預期是查詢`:age > 10`，但發現實際查詢超出這個範圍，就可以知道搜尋的方法是有問題的。\n\n![](https://farm9.staticflickr.com/8896/17159904167_7d56d8a4c0_o.png)\n\n兩個瀏覽器工具，希望對大家整合前後端有幫助！\n\n## 延伸閱讀\n\n[RailsCast](http://railscasts.com/episodes/402-better-errors-railspanel?view=asciicast)\n", slug: "20141016-debugging-rails-dev-tools", category_id: 6, author_id: nil, display_date: "2014-10-16", is_public: true, video_embed: nil},
  {title: "Debugging Rails入門：五個必備技巧", content: "\n從第一天學寫code開始，bug就隨之而來。就算只是不小心把true打錯成truee，程式也會很無情的賞你一個大大的錯誤訊息。在學Rails的路上我們都不孤單，不是因為有很棒的Rails社群，而是因為每天都有新的bug相伴左右。\n\n我開發Rails的時間不長，但在一路跌跌撞撞之下，碰過的bug也實在不少。在這邊彙整一些前人的經驗及自身的學習，提供幾個有用的技巧、技巧，希望新手都能快速了解遇到bug時該用什麼樣的方法來應對。\n\n\n\n以下分為五篇文章：\n\n##[第1篇：看懂錯誤訊息](/blog/20141013-debugging-rails-read-messages/)\n\n遇到bug，第一件事就是要把訊息看清楚！本篇以非常入門的角度介紹在irb以及Rails當中遇到錯誤時，畫面中的訊息分為哪些區塊，以及該如何解讀。\n\n##[第2篇：九個常見的錯誤訊息](/blog/20141011-debugging-rails-9-message/)\n\n看懂錯誤訊息以後，如果能自己快速處理掉，那真是再好不過。本篇介紹九個常見的錯誤訊息，分享一些常見狀況，看到底有哪些狀況可以直接照邏輯判斷錯誤的地方。\n\n##[第3篇：遇到bug直接在瀏覽器除錯](/blog/20141014-debugging-rails-better-errors/)\n\n一般來說，遇到bug都是回到code當中瀏覽、思考，但更直接的方法是在遇到bug時直接從瀏覽器的當下狀況直接進行分析。儘管從Rails 4.2.0開始已經有內建的web console可以直接debug，但就功能完整度及畫面精細度來看，`better_errors`這個gem還是大勝一籌。他在瀏覽器當中直接建立一個console，使用者可以在console當中解析各個method、variable的狀況。例如我們有以下的code：\n\n```ruby\ndef comment\n\tComment.create(:post_id => @post[:id])\nend\n```\n\n如果在這個method產生錯誤，就可以在console中分別執行@post、@post[:id]、Comment、Comment.create!，看各個指令有哪一項不如預期，就知道要從哪邊下手修改了！本篇介紹better_errors的安裝及使用方法。\n\n##[第4篇：沒有錯誤訊息，卻有錯誤的結果](/blog/20141015-debugging-rails-pry/)\n\n有些時候我們的計算方法就是不如預期，卻沒有錯誤訊息的出現，那該怎麼處理呢？反覆測試是一個方法，但更直接的方法是使用`gem 'pry'`在code當中設定斷點，只要程式執行到這個斷點，就會在console當中剖析，這個gem最棒的是可以用step和next兩個指令來逐行掃描，遇到複雜的method可以說是非常好的幫手。\n\n##[第5篇：用DevTools檢查前端及後端的溝通](/blog/20141016-debugging-rails-dev-tools/)\n\n在使用複雜的前端框架時，常常會需要搭配ajax進行資料庫的調整，而在Rails與javascript溝通的過程中，難免會產生奇怪的結果。這時候到底要從哪邊開始看呢？大家都不希望Rails的程式碼看半天結果錯在javascript的variable名稱打錯了。這時使用Chrome的DevTools或Firefox的Firebug可以了解從前端發送的ajax request以及收到的response為何。\n\n如果是request有問題，就請從javascript開始debug；如果是response有問題，就從Rails開始觀察。\n\n免費好工具，不學嗎？\n\n* * *\n\n以上五篇文章介紹了基本debug的概念及工具，想必大家應該對於基本的debug都已經有很完整的了解。希望大家都能漸入佳境喔！\n", slug: "20141017-debugging-rails-5-skills", category_id: 6, author_id: nil, display_date: "2014-10-17", is_public: true, video_embed: nil},
  {title: "ActiveRecord Command Line基本操作指令", content: "\n\n![db](https://farm8.staticflickr.com/7701/16747148723_9885d7b6c2.jpg)\n\n## Commaned Line常用指令列表\n\n在Rails資料夾底下，執行以下指令，就可以針對資料庫有不同操作，記得前面要加上rake：\n\n- *db:create* 在目前環境當中產生一個空白的資料庫\n- *db:create:all* 在所有環境當中產生空白資料庫\n- *db:drop* 刪除目前環境的資料庫\n- *db:drop:all* 刪除所有環境的資料庫\n- *db:migrate* 依照未執行過的migration檔案更新資料庫\n- *db:migrate:up*依照未執行過的migration，執行一次migration更新資料庫\n- *db:migrate:down* 依照已執行過的migration，退回一次migration\n- *db:migrate:status* 顯示目前migration到哪個地步\n- *db:rollback* 退回一次migration\n- *db:forward* 更新一次schema檔案\n- *db:seed* 執行 seed.rb 檔案\n- *db:schema:load* 依照目前schema.rb檔案架構資料庫\n- *db:schema:dump* 依照資料庫架構現況重繪一份schema.rb\n- *db:setup* 執行 db:schema:load, db:seed\n- *db:reset* 執行 db:drop db:setup\n- *db:migrate:redo* 執行 db:migrate:down db:migrate:up\n- *db:migrate:reset* 執行 db:drop db:create db:migrate\n\n## 如何產生migration檔案以及操作說明\n\n一下列出那麼多指令，想必也很難消化。本篇簡單說明幾個常用指令，讓各位大概了解操作情況。\n\n### 如何開新的資料庫\n\n一般來說是在執行$ rake db:migrate時，Rails就會自動去開啟新的資料庫了。除非你有執行過db:drop指令，並且需要一個全新乾淨的資料庫，才會使用\n\n```$ rake db:create```\n\n### 撰寫完migration檔案以後資料庫就會直接更動了嗎？\n\n可惜不會，必須使用`db:migrate`指令，資料庫才會進行更新。請看下方。\n\n### 利用rake指令進行migrate\n\n在創造一個model或migration以後，必須進行migrate指令，才能啟動rails server，否則會出現Migration Pending的錯誤。也就是說Rails server必須在資料庫已完全更新的情況下才能使用。\n\n```$ rake db:migrate```\n\n他會依照我們在migration檔案中的描述來更動資料庫，例如新增或刪除欄位。\n\n### 啊...寫錯了...可以回復嗎？\n\n1\\. $ rake db:rollback (倒車，回到剛剛的狀態)\n2\\. 修改程式碼\n3\\. $ rake db:migrate (重新進行一次migrate)\n\n有另一種替代方案是直接產生新的migration檔案進行修改，但由於未來migration檔案會越來越多，強烈不建議這麼做。簡單的狀況最好就用rollback解決就好，就像活到一定歲數以後就會覺得錢能解決的事情都是小事一樣。\n\n不過並非所有migration都可以直接rollback，詳細撰寫方法可參考後續文章。\n\n### 資料一筆一筆加好麻煩，有沒有快速方法？\n\n一般來說都是在網頁介面中新增資料，但如果已經有知道要新增的資料，那可以到seed.rb這個檔案中新增，利用create方法可以將東西都寫出來，接著在command line中執行：\n\n```$ rake db:seed```\n\n他就會去執行seed.rb檔案，將檔案新增到資料庫中。裡面的寫法大概如下：\n\n![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-19-上午10.21.39.png)\n\n當然你要寫任何Ruby code都可以，不過根據Rails convention，這個檔案就是專門處理資料庫的，寫些有的沒的只會讓維護更困難而已。\n\n### 資料庫死不讓我改，可以清掉全部內容嗎？\n\n```$ rake db:drop db:create db:migrate```\n\n首先，migration指令是可以串在一起執行的。`db:drop`會將資料庫整個刪除，然後db:create會開啟一個全新且乾淨的資料庫，並且執行migrate。裡面會什麼資料也沒有。\n\n### 悲劇，整個玩壞了，怎麼救？\n\n同上，但記得如果migration檔案內有衝突，會讓migrate失敗，記得先把這些衝突清乾淨。例如下了一個delete_column去刪除一個不存在的欄位就會產生錯誤，要把這類的code刪去。\n\n不過記得，不管使用哪一個reset方法，一定會把資料庫清空，所以如果有需要的資料，務必要先從資料庫備份出來。\n\n### 為何migrate遇到錯誤，改了以後還是錯？\n\n在migration當中有一個很容易遇到的錯誤是重複跑同一個migrate檔案，結果已經執行過的指令產生衝突，例如：\n\n```ruby\nadd_column :post, :content, :text\ndelete_column :post, :commennt\n```\n\n第一行我們要在post這個tabel新增一個欄位叫做content；第二行是要在post這個table刪除comment這個欄位。\n\n執行`db:migrate`時，跳出『找不到要刪除的欄位commennt』錯誤，這時我們才發現打錯字了！應該要刪除的是comment欄位，打錯成<span style=\"color:red\">commennt</span>欄位！\n\n注意！接下來即便我們改完錯字，再執行一次db:migrate，他會跳出另一個錯誤說『content欄位已經存在』。為什麼？因為第一次執行時，第一行add_column已經執行過了，就算遇到錯誤，已經執行過的code就不會再倒車回去，讓資料庫呈現一個『做一半』的狀態。所以第二次再執行時，他會發現資料庫裡面已經有了一個content欄位，導致無法再新增一個重複的。\n\n這時候，請將第一行add_column刪除，執行db:migrate，然後再把第一行加回去，就解決這個問題了。\n\n但為什麼要加回去呢？如果已經解決，那其實就不用再加回去了吧？\n\n因為我們要保持整個migrate程序可以完整跑完，假如有另一個開發者需要使用同樣的資料庫結構，但我們把add_column這行拿掉，他跑了db:migrate指令結果並沒有執行add_column這個指令，那他的資料庫就少了一個欄位，造成後續的migration錯誤。\n\n啥？叫他改用db:schema:load嗎？請不要造成其他人的困擾...\n\n### db:schema指令是做什麼用的？\n\n其實這個指令開發者不太常使用到，因為是包含在db:migrate和其他指令當中的。主要有兩個指令：\n\n```$ rake db:schema:load```\n\n我們在進行migration時，Rails會依照尚未執行的migration檔案來進行資料庫操作，並寫用現有的資料庫建構出一個schema.rb檔案，如果我們打開這個檔案，就會看到裡面有我們整個資料庫的table、欄位、屬性等詳細資料。\n\n因此，rake db:schema:load這個指令會依照schema.rb檔案裡面的描述，把資料庫裡面建構成schema.rb裡面指定的模樣。注意，他純粹只有建構而已，裡面並不會有任何資料，而且任何既存的資料都會被清除。\n\n為什麼這個指令我們不會用到呢？因為不管是新增資料庫、打掉重練，都已經將這個指令包含在裡面，也就是說不管是db:reset、db:setup，都會執行這個指令。一般來說我們不用特別把這個指令再拿出來執行一次。\n\n[Stackoverflow](http://stackoverflow.com/questions/5905287/rake-dbschemaload-vs-migrations)上也有相關討論。\n\n```$ rake db:schema:dump```\n\n在[Stackoverflow](http://stackoverflow.com/questions/3815447/does-rake-dbschemadump-recreate-schema-rb-from-migrations-or-the-database-itse)當中有提到，db:schema:dump其實是db:migrate裡面程序的一環，也就是說進行rake db:migrate時，會進行以下幾個動作：\n\n1\\. 依照所有migration檔案進行資料庫調整\n2\\. 依照資料庫現在的模樣，寫一份schema.rb檔案，描述資料庫內現在的狀況\n\n也就是說，他和`db:schema:load`的順序是相反過來的，一般來說都是包含在migrate指令裡面，同樣也不需要再拿出來執行一次。除非...真的有狀況我們把schema.rb改壞了(誰沒事要去改那個檔案？)，然後也沒有做版本控制(誰到今天了還不做版本控制？)，那我們就會需要這個指令。否則...先看看就好。\n\n* * *\n\n## 延伸閱讀\n\n[Rails Guide: Migration](http://guides.rubyonrails.org/migrations.html)\n\n[完整指令表](http://stackoverflow.com/questions/10301794/difference-between-rake-dbmigrate-dbreset-and-dbschemaload)\n\nCC授權圖片：[barrymieny](http://www.deviantart.com/art/Layered-Database-Source-Documents-348798124)", slug: "20141018-activerecord-commands", category_id: 6, author_id: nil, display_date: "2014-10-18", is_public: true, video_embed: nil},
  {title: "開始跟Rails ActiveRecord當好朋友", content: "\n![db](https://farm9.staticflickr.com/8786/17159965387_7ca53b74e2.jpg)\n\n開啟新的Rails專案以後，第一步就是要資料庫操作開始，也就是產生model檔案。(啥？你不需要用資料庫？那用Rails幹嘛？)本篇簡單說明Rails當中基本的資料庫概念。\n\n## 1. 為什麼Rails需要使用資料庫？\n\n假如今天我們要儲存部落格所有的post，用.html或.rb檔案來儲存在專案資料夾中，未來這些所有post還要依照開發者的需求來查閱、排序、修改，如果都用文字搜尋的方法來查找，是極其沒有效率的。\n\n因此我們需要一個專門管理資料的系統，讓我們方便對所有資料進行操作，資料庫裡面是各種表格，就像一堆excel的表格一樣，有了這樣的架構，要查找就方便多了！\n\n如果你真的對資料庫一點概念都沒有，建議可以在下方延伸閱讀或是Wiki、Google上大概了解資料庫的意義及目的。\n\n## 2. Rails的資料庫在哪？\n\n首先要先知道幾件事情：\n\n1. Rails專案資料夾內並不會有『資料庫』這個東西。\n2. 如果在安裝Rails過程中有安裝過sqlite和mysql，這些套件才是真正的資料庫。\n3. Rails專案資料夾裡面只有讀取和操作資料庫的描述。\n4. Rails專案跟資料庫是可以分開的兩個東西。\n5. Rails操作資料庫的模式稱為ActiveRecord，而寫入的動作稱為Migration。\n\n如果Rails專案和資料庫是分開的，那如果在本機開發，最後佈署到伺服器上，資料庫的內容會一起佈署過去嗎？答案是不會，因為資料庫是裝在自己的電腦上，如果要一起佈署過去，必須從資料庫裡面複製資料出來，copy到伺服器上的資料庫內，這跟Rails本身就比較沒有關係了。\n\n## 3. 如何開始操作資料庫？\n\n當我們開始Rails專案開發時，都會先設定一個model，並與資料庫連結產生一個table可供儲存、讀取。通常我們會在command line中輸入：\n\n```$ rails generagte model post <span style=\"color:blue\">content:text</span>```\n\n(藍色部分為增加欄位的名稱及屬性，非必要)\n\n這樣子我們就產生了一個叫做post的model，另外也產生了一個migration檔案。我們可以到db/migrate資料夾底下找到這些檔案，打開以後會看到：\n\n![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-19-上午1.25.41.png)\n\n假如跟Rails不太熟悉，這個畫面其實還不太需要了解細節，但主要要知道，這個檔案就是在描述資料庫內要執行的內容。例如裡面使用了create_table這個指令，意思是他要在資料庫中建立一個table叫做posts，就像在excel裡面開一個新的空白表格一樣，用來儲存資料。\n\n## 4. 如何進行Migration？\n\n有了Migration檔案，代表Rails已經知道該怎麼去操作資料庫了，接下來我們就可以進行Migration。\n\nMigration中文意思是遷居到某個地方，在這邊的概念比較像是我們先描述資料庫要進行什麼樣的調整，再實際『遷移』到資料庫當中。\n\n在command line輸入：\n\n```$ rake db:migrate```\n\n就可以看到Rails跳出幾行訊息，說明migration的狀況。如果沒有錯誤訊息，那我們就成功的修改完資料庫了，可以使用以下指令進行查看。\n\n```\n$ rails console\n$ Post.inspect (注意第一個字母大寫)\n$ exit (看完以後離開)\n```\n\n就可以看到我們已經在資料庫中有Post這個table，裡面會儲存id和content這些資料。到此就完成Migration了，可喜可賀。\n\n## 5. Migration的順序\n\nRails是依照步驟來對資料庫進行操作，已經執行過的Migration就不會再執行。例如現在我們有7個Migration檔案如下：\n\n![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-19-上午1.17.04.png)\n\nmigrate資料夾當中的所有檔案都是Migration檔案。我們可以利用以下指令新增另一個Migration檔案：\n\n```$ rails generate migration <span style=\"color:blue\">add_index_to_posts</span>```\n\n(藍色部分自由命名)\n\n這個Migration就會是第8個Migration檔案，也就是說假如我們再執行一次`$ rake db:migrate`那Rails只會執行這第8個檔案，其他先前已經執行過的就不會再執行。\n\n## 6. Migration的修改\n\n因為Migration是有順序的，因此有一個很重要的部份，就是每次要更改資料庫，就必須依靠Migration，不是說改完程式碼就沒事了。\n\n例如在執行完rake db:migrate指令以後才發現欄位名稱寫錯了，要重跑一次，要怎麼做呢？資料庫的操作與一般修改程式不同，一般我們只要回去程式碼上修改，再執行一次就可以了。但Rails資料庫的操作必須是：\n\n1. $ rake db:rollback (倒車，回到剛剛的狀態)\n2. 修改程式碼\n3. $ rake db:migrate (重新進行一次migrate)\n\n假如有一個已經老早就執行過的Migration要修改，就一定要先倒車回到當時尚未migrate的狀況，修改以後再進行migrate。如果真的要倒車到很久以前去修改...那還是開一個新的Migration檔案來改吧~\n\n## 7. 利用schema.rb觀看資料庫全貌\n\n所有Migration完成以後都會更新一次schema.rb這個檔案，裡面描述整個資料庫的table和欄位狀況，不管我們的Migration是在哪一個階段，都可以到這個schema.rb檔案當中了解目前資料庫的整體模樣。\n\n為什麼需要這個檔案呢？因為每次Migration的檔案都只會紀錄片面的增加、修改、刪除指令，沒辦法看到完整的全貌。如果這個專案需要請人來接手，其他人就可以透過這個schema.rb檔案來檢視資料庫目前的樣貌。\n\n因此，一般來說不會需要更動這個檔案，讓他自動更新即可。\n\n## 延伸閱讀\n\n[資料庫說明](http://www.wkb.idv.tw/study/dbase/)\n\n[ActiveRecord: 資料表操作](http://ihower.tw/rails3/activerecord.html)\n", slug: "20141019-knowing-rails-activerecord", category_id: 6, author_id: nil, display_date: "2014-10-19", is_public: true, video_embed: nil},
  {title: "Ruby Splat(*)符號使用", content: "\n*符號英文稱為Asterisk或Splat，中文尚未看到統一稱呼，一般是稱為乘號或星號。一般常見於乘法，但在乘法用途中，是當做雙元運算子。當用作單元運算子的時候，他會有非常豐富多元的用途。\n\n\n\n## 多個變數轉換為數列\n\n*用於單元運算子，第一種用法是將一串變數轉換為數列：\n\n```ruby\n*a = 1,2,3\n# a = [1,2,3] \n```\n\n反過來，也可以將數列轉換為一串變數，並帶入method中使用：\n\n```ruby\ndef sum(*args)\n\tputs args.inject(:+)\nend\n\nsum(1,2,3)\n# => 6\n```\n\n也可以先指定第一個變數為主要用途，再帶入剩餘的變數：\n\n```ruby\ndef say(person, *words)\n\twords.each { |w| puts person + \": \" + w }\nend\n\nsay(\"John\", \"Hello\", \"My name is john\", \"I am 30 years old\")\n# => John: Hello\n# => John: My name is john\n# => John: I am 30 years old\n```\n\n利用*符號，可以讓一個method帶入多個變數而不會出現Wrong number of argument的錯誤。\n\n同樣的方法可以交換順序使用，把數列放在最前面，而最後面是固定使用的變數：\n\n```ruby\ndef say(*words, person)\n\twords.each { |w| puts person + \": \" + w }\nend\n\nsay(\"Hello\", \"My name is john\", \"I am 30 years old\", \"John\")\n# => John: Hello\n# => John: My name is john\n# => John: I am 30 years old\n```\n\n看得出來嗎？整個功能與上個例子的相同，只有帶入的順序不同。另外，splat符號也可以將數列切成一串的變數帶入method中，以上方的say method為例：\n\n```ruby\nsentences = [\"Hello\", \"Nice to meet you\", \"How are you?\"]\n\nsay(\"Nancy\", *sentences)\n# => Nancy: Hello\n# => Nancy: Nice to meet you\n# => Nancy: How are you?\n```\n\n這樣一來，就可以利用splat將數列整個帶入method當中，不需再多做處理。\n\n## 多重指定變數Parallel Assignment\n\n大家應該都知道Ruby當中可以在同一行指定變數：\n\n```ruby\na,b = \"hello \", \"world\" \n\nputs a + b\n# => hello world\n```\n\n而使用splat符號，可以大幅增加指定變數的空間：\n\n```ruby\nfirst, *all = [1,2,3,4,5]\n# first = 1\n# all = [2,3,4,5]\n\n*all, last = [1,2,3,4,5]\n# all = 1,2,3,4\n# last = 5\n\nfirst, *all, last = [1,2,3,4,5]\n# first = 1\n# all = [2,3,4]\n# last = 5\n```\n\n## 其他用法\n\n還有一個奇妙用法，就是用來避開method的錯誤訊息。設定如果帶入太多參數，其他不用的就捨棄：\n\n```ruby\ndef plus(a, b, *)\n\tputs a + b\nend\n\nplus(1, 2, 3, 4, 5)\n# => 3\n```\n\n上述例子中，只有1和2有實際帶入method中計算，不過這種防呆機制不易察覺有bug，無法及時補救，不建議使用。\n\n## 參考資料\n\n[The Strange Ruby Splat](http://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/)\n\n[Splatt用法範例](https://github.com/rubyspec/rubyspec/blob/master/language/splat_spec.rb)", slug: "20141020-ruby-splat", category_id: 7, author_id: nil, display_date: "2014-10-20", is_public: true, video_embed: nil},
  {title: "ActiveRecord Migration 初級演練", content: "\n在看完先前幾篇有關ActiveRecord的解說，本篇進行一次實際操作，調整資料庫並觀看實際結果。\n\n## 開啟新專案\n\n```$ rails new <span style=\"color:blue\">activerecord</span>```\n\n藍色部分為檔名，可以隨意替換。\n\n\n\n## 建立model及資料\n\n首先產生model檔案，開始進行資料庫管理：\n\n```$ rails g model post title:string content:text```\n\n接著我們可以使用`rails console`來查看資料庫內容。如果你有sequel pro之類的GUI，也可以在裡面進行查看。不過因為我們都是初學，可以多操作練習rails console的使用方法。\n\n```\n$ rails c\n$ Post.inspect\n(在console中model的名稱第一個字母要大寫)\n```\n\n這時我們會發現有個Table doesn't exist的錯誤，因為我們只在Rails專案中產生檔案，卻沒有移植到資料庫中，所以這時需要先執行：\n\n```$ rake db:migrate```\n\n接著再回Rails console，重複執行上述方法，就可以看到：\n\n[![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-22-下午10.08.28.png)](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-22-下午10.08.28.png)\n\n以上是我們在產生model檔案時指定他為我們產生的資料庫內容，看起來無誤！\n\n接著來產生一筆資料：\n\n```\n$ Post.create(:title => \"This is a post\", :content => \"This is content\")\n$ Post.first\n```\n\n[![](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-22-下午10.09.48.png)](http://www.motion-express.com/wp-content/uploads/2014/10/螢幕快照-2014-10-22-下午10.09.48.png)\n\n一樣這時候可以看到我們產生的資料，另外也可以用`$y Post.first`來看比較有條理的排列。\n\n## 產生另一個model\n\n接著我們要在產生另一個model叫做comment，附屬於post底下：\n\n```$ rails g model comment content:text```\n\n接著進行migration將資料寫入資料庫中。\n\n```$ rake db:migrate```\n\n噗，突然想到，如果要為兩者建立關係，必須在Comment這個model中加入post_id這個欄位，為Rails提供識別。執行：\n\n```$ rake db:rollback```\n\n資料庫倒車回去，我們重新在migration檔案中加上內容，變成：\n\n```ruby\nclass CreateComments < ActiveRecord::Migration\n  def change\n    create_table :comments do |t|\n      t.text :content\n      t.integer :post_id\n      # 這行是新增的\n\n      t.timestamps\n    end\n  end\nend\n```\n\n重新執行：`$ rake db:migrate`就可以囉！\n\n若要真正為兩者建立關係，還必須在model檔案中建立關連才行。\n\n```ruby\n# models/post.rb\nclass Post < ActiveRecord::Base\n\thas_many :comments\nend\n\n# models/comment.rb\nclass Comment < ActiveRecord::Base\n\tbelongs_to :comments\nend\n```\n\n藉由belongs_to和has_many這種簡單明白的描述，我們就將post和comment建立起關係了。由於本篇專注講解migration的部份，往後的篇章再來詳細說明model檔案如何撰寫。\n\n## 從seed產生資料\n\n接下來我們要在資料庫中建立多筆資料，為的是平常在開發系統時，會因為設計排版、功能測試等情況，需要先有幾筆資料當做範例。\n\n我們進入專案中的`db/seed.rb`檔案，撰寫如下：\n\n```ruby\n10.times do\n\ttitle = \"This is title\"\n\tcontent = \"This is content\"\n\tPost.create(:title => title, :content => content)\n\tPost.first.comments.create(:content => content)\nend\n```\n\n以上會產生10筆內容相同的post，並且在第1筆post底下產生10筆內容相同的comment。撰寫完成存檔，回到terminal，執行：\n\n```\n$ rake db:seed\n```\n\nRails會去執行seed.rb裡面的檔案，這時我們再進入Rails console裡面查看：\n\n```\n$ rails c\n$ Post.all\n$ Comment.all\n```\n\n這幾個指令都可以讓我們看到seed.rb檔案產生出來的內容。\n\n最後，如果開發完成，需要把整個資料庫清空，可以執行：\n\n```\n$ rake db:drop db:create db:migrate\n```\n\n或者是用清空model的方式：\n\n```\n$ Post.delete_all\n$ Comment.delete_all\n```\n\n以上方法二擇一執行以後，再執行檢查指令，就可以看到乾淨的資料庫囉~\n\n這樣實際操作過一遍，各位有比較熟練了嗎？\n\nCC圖片授權：[ajmexico](https://www.flickr.com/photos/ajmexico/3281139507/in/photolist-5ZWGsP-ewxdfS-8hJS6-7mWNDB-2uKxo-9t4GcE-5afKQf-cYVcXN-4BRwYz-g5axJ-7inUS-igfwC-6MwYFo-o9C9T-bUdb9u-gwY6Zj-4vuXRf-AzPfe-2NMyB7-4LZpGt-5AUZPz-75Rj9c-8CJnvM-H1VD-6YcxK7-fRYLeC-6q4rRY-5KmyXg-8URCHQ-6zAkhZ-axeGkk-9czfc7-5ost5N-5dCNYU-h39BkM-3qEQ1f-7BXxGN-aaevvU-p1cY92-h35jL5-exhoA-oJBbzL-itjysg-eYsMdq-ip2u3-66WntN-ACBTJ-3BxGt-7aCeV9-dqzF4p)", slug: "20141022-activerecord-migration-practice", category_id: 6, author_id: nil, display_date: "2014-10-22", is_public: true, video_embed: nil},
  {title: "ActiveRecord Migration撰寫方法", content: "\n開啟rails專案以後，常常會需要對資料庫進行更動，這時就必須依靠Migration的協助。啥？你說為什麼不直接用GUI介面操作資料庫嗎？等有20個以上的table，再這樣做也不遲。本篇列出在撰寫migration檔案時會用到的指令。\n\n\n\n## 指令表\n\n\n### 針對table編修\n```\n-> create_table :table_name do |t|\n\tt.type :column_name\n\t# 例如 t.integer post_id\nend\n-> drop_table :table_name\n-> rename_table :old_table_name, :new_table_name\n-> change_table :table_name do |t|\n\tt.action :column_name\n\t# 例如 t.remove post_id\nend\n```\n\n### 針對column編修\n```\n-> add_column :table_name, :column_name, :type, options\n-> rename_column :table_name, :old_column_name, :new_column_name\n-> remove_column :table_name, :column_name\n-> add_index :table_name, :column_name, options\n-> remove_index :table_name, :column_name\n```\n\n## 欄位屬性\n\n在上面提到所有`:type`的部份，就是要填上欄位屬性。在此僅列出最常用的幾個：\n\n```\n:string, :limit => 255\n# 有限長度的字串，可以設定長度多少\n:text \n# 無限長度的字串，在裡面寫小說也可以\n:integer, :limit => 11\n# 整數，limit通常不會設定，預設為11，詳細請看延伸閱讀\n:date\n# 日期\n:decimal, :precision => 3, :scale => 4\n# 十進位數，就是有小數點的數字，precision代表小數點要幾位，而scale代表允許存入幾位數，[與二進位的float時常混淆](http://stackoverflow.com/questions/8514167/float-vs-decimal-in-activerecord)\n:boolean\n# 布林，單純的true和false\n```\n\n## 我忘了如何產生migrate檔案\n\n複習一下，通常產生Migration有兩種方法，一個是產生model時一併產生的檔案，大概都是長這樣：\n\n```$ rails generate model <span style=\"color:blue\">post</span>```\n\n另一種方法是用migration指令：\n\n```$ rails generate migration <span style=\"color:blue\">add_comments_to_post</span>```\n\n這兩種方法都會產生migration檔案，存放在`db/migrate`資料夾底下。\n\n## 檔案內容撰寫\n\n我們打開model產生的migration檔案，大概是長這樣：\n\n![](https://farm8.staticflickr.com/7665/17159993287_1b0e324aa1_b.jpg)\n\n裡面使用create_table在資料庫中產生新的table。\n\n當然我們也可以在這個create_table block的外面補充別的內容：\n\n![](https://farm9.staticflickr.com/8892/17179667048_b27602e9a3_o.png)\n\n不管怎麼寫，最後就是在terminal進行`$ rake db:migrate</span>來更動資料庫即可。\n\n## up & down\n\n在Rails當中雖然預設都是用新式的change當做method，但有時會看到使用舊式的up和down當做method，為什麼呢？因為我們除了migrate以外也會執行rollback指令取消migrate，如果請Rails將資料庫倒車，不一定每次Rails都知道該怎麼做，所以我們利用up和down的寫法跟Rails說明要怎麼往前migrate和往後rollback。\n\n一般來說，『新增』和『刪除』兩個動作都可以在change methdo裡面完成，只有在rename column或change column時才會有這個困擾。\n\n```ruby\n# up代表往前migrate\ndef up\n\tchange_column :post, :content, :text\nend\n\n# down代表往後rollback\ndef down\n\tchange_column :post, :content, :string\nend\n\n# Rails 4 之後加入的新寫法，看起來比較美觀\ndef change\n  reversible do |r|\n    change_table :post do |t|\n      r.up   { t.change :content, :text }\n      r.down { t.change :content, :string }\n    end\n  end\nend\n```\n\n嗯...不過我個人還是比較喜歡將up和down分開來寫比較簡單明瞭。如果真的很不確定Rails到底有沒有辦法rollback的時候，就用這個up和down方法來寫吧！\n\n## 延伸閱讀\n\n[Decimal vs Float](http://stackoverflow.com/questions/8514167/float-vs-decimal-in-activerecord)\n\n[Integer屬性的limit](https://ariejan.net/2009/08/20/once-and-for-all-rails-migrations-integer-limit-option/)\n\n[Ruby on Rails實戰聖經](http://ihower.tw/rails3/migrations.html)\n", slug: "20141022-activerecord-migration-writing", category_id: 6, author_id: nil, display_date: "2014-10-22", is_public: true, video_embed: nil},
  {title: "Ruby及Rails當中的:symbol代表什麼意思？", content: "\n在學習Rails時，不免剛開始就會看到一堆冒號開頭的東西，例如:post、:model、:controller、:action等等，如果你跟我一樣是程式語言的新手，腦袋一定是滿滿的WTF！\n\n這其實是Ruby當中的symbol符號，會用冒號`:`當做開頭。簡單說明一下為何會有符號這個東西：\n\n\n\n## Ruby每一個物件都是新的物件\n\n大家都知道Ruby是一個物件導向的語言，也就是說每一個變數、文字、數字都是物件，所以我們才可以寫出：`5.times { puts \"hello\" }`這樣簡單直白的語句，`5`是一個物件，所以才可以在後面加上method。\n\n大家都是物件，很棒，但這跟符號有什麼關係呢？Ruby在處理每一個物件時，會在記憶體中產生一個新的物件，所以每一個東西都不相同，這點可以使用object_id這個method來證明：\n\n```ruby\n\"hello\".object_id\n# => 70318367784340\n\n\"hello\".object_id\n# => 70318367777740\n```\n\n大家可以發現，明明都是同一個字串hello，為何會有不同的object_id呢？這是因為對Ruby來說，每碰到一個新的東西，都是讓Ruby去讀取、寫入記憶體，也因此每個物件都是不同的物件。也就是為何Rails要強調DRY原則，不撰寫重複的程式碼。只要有重複的程式碼出現，不只在修改和維護上會有困難，更重要的是讓Ruby會去讀取多餘的記憶體，降低效能。\n\n如果我們有重複的字串，務必使用變數來儲存：\n\n```ruby\na = \"hello\"\na.object_id\n# => 70318367761840\na.object_id\n# => 70318367761840\n```\n\n這樣就能不重複產生新物件。\n\n## Ruby符號是獨特的物件\n\n有了剛剛的觀念，現在就可以提到，符號是一個獨特的物件，每次我們重複提到符號，他並不會消耗多餘的記憶體。\n\n```ruby\n:hello.object_id\n# => 538888\n\n:hello.object_id\n# => 538888\n```\n\n當我們使用符號時，我們使用的是同一個符號，而非像字串一樣會產生新的物件。\n\n## Ruby method會自動產生symbol\n\n在定義method時，Ruby會自動幫我們為method產生一個symbol，例如：\n\n```ruby\nclass Greeting\n\tdef self.hello\n\t\tputs \"hello world\"\n\tend\nend\n\nGreeting.hello\n# => \"hello world\"\nGreeting.send(:hello)\n# => \"hello world\"\nsay_hello = Greeting.method(:hello)\nsay_hello.call\n# => \"hello world\"\n```\n\n先定義好class及method之後，使用以上三種呼叫method的方法都可以呼叫hello這個method。\n\n在例子當中可以發現一件事情，也就是當提到:hello時，他所對應到的就是我們定義好的hello method。是一個『所見即所得』的概念，也就是說我們可以指定不同數值給一個變數，但提到符號時，所指的就一定是一個定義好的method。\n\n## 為何Rails會常常帶入symbol到method當中\n\n我們可以從『所見即所得』延伸回Rails，在Rails當中常常看到一些很奇妙的地方會帶入符號，例如controller當中：\n\n```ruby\ndef show\n\t@post = Post.find(params[:id])\nend\n\ndef create\n\t@post = Post.create(post_params)\n\tif post.save\n\t\tredirect_to posts_path\n\telse\n\t\trender :new\n\tend\nend\n```\n\n1. 首先在show action當中，:id代表的是從瀏覽器的http request傳送回來的id，為何不用字串`id`而要假掰的使用符號`:id`呢？因為id可能是一個字串變數，假如我在前面加上：\n\n```id = 10```\n\n那這樣使用字串id時，所代表的就不一定是我們從http request傳回來的那個id了，因此，使用:id可以確保開發者了解我們要抓取的是回傳的id。\n\n2. 同樣的道理，在create action當中，可以看到要是儲存失敗的話，就會回到new的畫面。這裡同樣因為我們有先定義過new這個method，所以可以直接使用:new來當做呼叫method的方法。為何要用符號？同樣是為了『所見即所得』的概念，使用symbol來代表那個我們要使用的東西。\n\n## Rails當中帶入符號的方法\n\n在Rails的其他地方，常常可以看到類似的用法，例如在migration當中我們會看到：\n\n```ruby\nadd_column :post, :content, :string, :limit => 255 \n```\n\n許多Ruby和Rails的method都是用這種方法來帶入變數，簡單解釋一下，通常在source code的某處，都會有這樣的method存在：\n\n```ruby\ndef add_column(table, column, type, *options)\n\t# 利用table變數找到table\n\t# 利用column變數創造一個欄位\n\t# 利用type變數確定column的屬性\n\t# 檢查是否還有額外的options變數\nend\n```\n\nadd_column這個migration是為我們在資料庫中新增欄位，因此我們帶入的都是符號而非變數，代表我們所描述的內容。定義method的方法有很多種，但每次要帶入大量符號時，大概就可以了解是這種模式在運作。\n\n另外，由於我本人並沒有閱讀這段的source code，因此add_column這個method不一定是長這樣。\n\n## 延伸閱讀\n\n[Ruby Learning](http://rubylearning.com/satishtalim/ruby_symbols.html)\n\n[Understanding Symbols in Ruby](http://stackoverflow.com/questions/2341837/understanding-symbols-in-ruby)\n\n[Ruby Doc](http://ruby-doc.org/core-1.9.3/Object.html#method-i-method)", slug: "20141024-ruby-on-rails-symbol", category_id: 7, author_id: nil, display_date: "2014-10-24", is_public: true, video_embed: nil},
  {title: "Rails 基本 Helper 介紹", content: "\n剛開始撰寫Rails時，假如你跟我一樣看不懂一個html.erb檔案裡面有非常多看不懂的東西，也不知道helper是什麼，那你找對地方了，本篇文章簡單說明基本的helper概念，讓你看得懂helper在幹嘛。\n\n## Helper是什麼\n\nHelper是一種輔助方法，目的是將Ruby code帶入view當中，而不是單純的平舖直敘。這點也是Rails分工的一環，model和controller的method不能在view當中直接使用，只有helper method才行。\n\n\n\n## Helper和Helper method差在哪裡？\n\nHelper是一個概念，而在Rails架構中helper自己有一個資料夾，我們可以在裡面定義helper method，定義完以後就可以在view當中使用。Rails當中有提供很多內建的helper，只要是.erb結尾的檔案，都可以使用helper，包括html.erb、js.erb等等。\n\n當然，helper這個詞並不會使用於controller和model當中。\n\n## <% %>和<%= %>\n\n複習一下，在.erb結尾的檔案當中，可以利用<% %>符號將Ruby code包覆起來，在裡面執行程式碼。而加上一個等號的<%= %>會將裡面執行的結果print出來。例如：\n\n```ruby\n<% i = 1 %>\n<% if i == 1 %>\n<p>title</p>\n<% end %>\n# => title\n\n<%= i %>\n# => 1\n```\n\n在第一個例子當中，只要if情況成立，就會將html標籤顯示出來，若不成立則不顯示。第二個例子則是直接將i的數值顯示出來。而helper也是要放在這個區塊裡面執行，與一般Ruby code相同。\n\n## 最常見的 link_to\n\n了解.erb是如何將Ruby code放到html文件當中以後，接下來先了解最常用的`link_to` helper，用法如下：\n\n```html\n# 公式\nlink_to display_text, link_ref, url-options, html-options\n\n# link_to會產生以下html code\n<a href=\"link_ref\">display_text</a>\n\n# 常見樣貌\nlink_to \"Home\", root_url, :id => 5, :class => \"root-link\"\n```\n\nlink_to總共會帶有四個變數，最前面兩個必填，後面是選填。\n1\\. display_text: 這個連結會產生什麼文字\n2\\. link_ref: 要連結到哪個位置\n3\\. url_options: 與連結有關的內容，例如要送參數就是放在這裡\n4\\. html_options: 跟html前端直接相關的內容，例如給予class和id\n\n看一個非常典型會使用的例子：\n\n```html\n<table class=\"table\">\n\t<tbody>\n\t\t<% @posts.each do |post| %> \n\t\t\t<tr>\n\t\t\t\t<td> <%= post.content %> </td>\n\t\t\t\t<td> <%= link_to \"Edit\", edit_post_path(post) %>\n\t\t\t\t<%= link_to \"Delete\", post_path(post), :method => :delete %></td>\n\t\t\t</tr>\n\t\t<% end %>\n\t</tbody>\n</table>\n```\n\n從第3行開始，依照邏輯逐步講解：\n1\\. 通常這種情況，在controller裡面我們都已經有指定一個@post的instance variable，可以直接在view當中使用。\n2\\. @post是一個陣列，所以使用`.each`這個method，讓每一個element都執行一次do..end的內容。\n3\\. 後面的`|post|`代表在這個do...end的block當中，我們要指定`post`為每一個@post當中的element的變數。\n4\\. 在do...end當中，首先`post.content`會讀取帶入的post的content屬性。\n5\\. 使用link_to helper進行連結，配上顯示文字Edit，以及Rails連結的路徑，以這個寫法來看就是連結到post這個class底下的edit action，並在後方指定傳送參數post到後端。\n6\\. 第二個delete的連結，最後帶有一個method為delete，這是發送html request時會指定的method，如果純粹是抓取資訊，就會用get，而非delete\n\n## form_for\n\nform_for是Rails用來產生表單的helper，通常會長這樣：\n\n```html\n<%= form_for @post do |f| %>\n\nTitle: <%= f.text_field :title %>\n\n  <%= f.text_area :content %>\n  <%= f.submit \"Create\" %>\n<% end %>\n```\n\nform_for同樣會用do...end block包覆起來，裡面使用f變數來代表表格本身。裡面通常會包含填寫的地方如text_field和text_area，加上最後有一個submit的按鈕或連結，只要點擊就可以傳送表單。\n\n## render\n\n在view當中，常常也會看到以下三種用法：\n\n```ruby\n# 1\n<%= render partial: \"posts/_form\" %>\n\n# 2\n<%= render template: \"posts/new\" %>\n\n# 3\n<%= render file: \"views/posts/new.html.erb\" %>\n```\n\nrender顧名思義就是產生某些內容，而在Rails當中可以在view中利用render來產生html。\n\npartial代表會去尋找view當中底線_開頭的檔案，partial本身就是一個要拿來重複利用的樣板，所以讀取設計上也比較直接。通常重複出現的元素會放在partial方便讀取，例如表格_form。\n\ntemplate讀取寫法使用的是\"controller/action\"，他所產生出來的內容就是該action對應到的template。\n\nfile基本上沒什麼好說的，就是讀取檔案，把所有html讀取出來；最直接但閱讀起來最麻煩。\n\n## 延伸閱讀\n\n[Rails實戰聖經：helpers](http://ihower.tw/rails3/actionview-helpers.html)\n\n[Form Helper](http://guides.rubyonrails.org/form_helpers.html)", slug: "20141025-rails-helper", category_id: 6, author_id: nil, display_date: "2014-10-25", is_public: true, video_embed: nil},
  {title: "Rails當中的params是什麼？", content: "\n我們常在Rails的controller中看到以下code：\n\n```ruby\ndef show\n\t@post = Post.find(params[:id])\nend\n```\n\n大家都知道一般的show action是要顯示單一項目的資料，但為什麼是`params[:id]`而不單純就是id或:id呢？\n\n\n\n這邊先解釋一下http request：當使用者點擊連結的時候，會把一個http request送回伺服器，讓伺服器根據需求來將內容傳回瀏覽器。最簡單的例子就是我們輸入google.com時，傳送了一個http request給google的伺服器，他才將首頁內容回傳到瀏覽器上並顯示。\n\n在Rails當中，http request會經過ActionController這個內建的機制來消化，並將可用的變數轉換為`params`這個變數，交由controller處理。底下會包含許多例如填寫表格的內容或其他變數，以hash的方式呈現：\n\n```ruby\nparams = {:post => \"Rails is Good\", :content => \"I love Ruby on Rails\"}\n```\n\n因此我們在controller當中使用params時，就是在讀取瀏覽器回傳的http request。\n\n不過要注意，params不等於http request本身，因為request本身的資訊量很多，Rails並不會全部包到params裡面，因此如果有使用開發者工具來觀看從前端傳送的http request，會發現跟我們在後端可以使用的params並不相同。\n\n我們在controller當中撰寫params[:id]時，所指的其實是從前端回傳的:id。\n\n## params 在 Strong Parameters當中的意義\n\n在Rails 4當中有strong parameters的機制，限定必須是我們設定可以在這個action當中進行設定的參數，才可以傳入，詳細解釋可在延伸閱讀中查詢。\n\n為了將前端傳回的變數儲存到model當中，我們會在controller撰寫一個private method：\n\n```ruby\nprivate\n\tdef post_params\n\t\tparams.require(:post).permit(:title, :content)\n\tend\n```\n\n在這邊可以看到，我們要先定義一個method來回傳允許通過的params，其中分成兩個部分：\n\n1\\. require會把:post這個model相關的參數給抓出來，如果根本沒有回傳:post相關參數，就會產生錯誤訊息。\n2\\. permit就是設定有哪些參數可以傳入，例如上面沒有寫參數，就算你從http request當中傳入，也會回傳nil當做沒東西。例如：\n\n```ruby\npost_params = params.require(:post).permit(:title, :content)\n\npost_params[:title]\n# => \"Rails is Good\"\n\npost_params[:user_id]\n# => nil\n```\n\n在Strong parameters的機制當中，就是依靠params來控制參數。從今以後，看到params就知道是什麼意思了！\n\n## 延伸閱讀\n\n[Rails實戰聖經](http://ihower.tw/rails3/actioncontroller.html)\n\n[Rails API](http://api.rubyonrails.org/classes/ActionController/Parameters.html)\n\n[Xdite部落格：Strong Parameters](http://blog.xdite.net/posts/2012/08/12/strong-parameter-mass-assignment-solution)", slug: "20141026-rails-params", category_id: 6, author_id: nil, display_date: "2014-10-26", is_public: true, video_embed: nil},
  {title: "認識Rails ActiveRecord系列：文章導讀", content: "\n剛開始學習Ruby on Rails時，不知你有沒有跟我一樣遇到幾個問題：\n\n\n\n>1. 為什麼在安裝Rails環境時需要使用『資料庫』這個玩意兒？\n\n>2. model儲存的資料在哪裡？怎麼專案資料夾都找不到？\n\n>3. db:migrate是什麼意思？\n\n>\n\n對我這種半路出家直接挑戰Rails的人來說，每次遇到『資料庫』這個用詞是一點頭緒都沒有。本系列就是簡單帶領各位讀者了解Rails與資料庫的關係，以及基本操作方法，由於本人並非本科系出生，因此會由幾個比較『世俗』一點的角度來說明資料庫的概念，希望大家都能夠有個初步認識。\n\n## [1. 開始跟ActiveRecord當好朋友](/blog/20141019-knowing-rails-activerecord/)\n\n-> Rails為何需要資料庫\n-> Rails與資料庫如何進行連結\n-> 操作及讀取資料庫的方法\n\n## [2. Command Line基本操作指令](/blog/20141018-activerecord-commands/)\n\n-> 如何從Command Line環境中操作Rails資料庫\n-> 指令表\n-> 新增、修改、刪除、重置資料庫\n-> schema.rb及seed.rb檔案說明\n\n## [3. Migration撰寫方法](/blog/20141022-activerecord-migration-writing/)\n\n-> 從Command Line產生Migration檔案以後該如何下一步操作\n-> 常用撰寫指令\n-> 資料庫更新及復原的寫法\n\n## [4. 綜合演練](/blog/20141022-activerecord-migration-practice/)\n\n-> 在實際情境下，從開始、修改、儲存整體演練\n-> Command Line演練\n-> Migration檔案撰寫演練\n-> 從seed新增資料及重置", slug: "20141027-knowing-activerecord-guide", category_id: 6, author_id: nil, display_date: "2014-10-27", is_public: true, video_embed: nil},
  {title: "Ruby 用 inject 和 each_with_object 來組 hash", content: "\n在本期Ruby Weekly上[有一篇很有趣的討論](http://andycroll.com/ruby/benchmarking-each_with_object-against-inject-when-building-hashes-from-arrays/?utm_source=rubyweekly&utm_medium=email)，關於在Ruby當中組成Hash的方法。\n\ninject是用來處理陣列的方法，例如數列加總：\n\n```ruby\narray = [1,2,3,4,5]\narray.inject(0) {|result, number| result + number}\n# => 15\n```\n\n\n\n首先，inject會帶入我們設定的變數(0)當做初始值，而這個初始值就是block中的第一個變數(result)，接下來帶入數列中的數值到第二個變數(number)，最後將回傳值儲存到result，重新再跑一遍。最後回傳result給使用者。\n\n## 針對整理Hash的三種解法\n\n整理資料庫時，也會使用inject整理，一般來說是為了方便查找資料，例如在Rails當中先把user的名字和電話先對起來：\n\n```ruby\nUser.all.inject({}) do |result, user|\n\tresult[user[:name]] = user[:phone]\n\tresult\nend\n```\n\n這樣一來，我們就有一個hash可以直接用名字來查詢電話號碼。\n\n但在這樣的組合方法中，有一個很不符合Ruby風格的地方，就是在第3行的地方，因為inject每一次重跑時會取用前一次的回傳值當做result，因此最後需要使用result變數回傳，否則依照Ruby回傳值的邏輯會產生錯誤。\n\n如果要把User這段code用一行解決，可以選擇用merge：\n\n```ruby\nUser.all.inject({}) do |result, user|\n\tresult.merge(user[:name] => user[:phone])\nend\n```\n\n不過對於[原本文章](http://technology.customink.com/blog/2014/10/14/better-hash-injection-using-each-with-object/)作者Chris Mar而言，這依然不夠直觀，因為他喜歡原本直接用等號(=)的方式，因此他想到了另一個解法，使用`each_with_object`：\n\n```ruby\nUser.all.each_with_object({}) |user, result|\n\tresult[user[:name]] = user[:phone]\nend\n```\n\n這裡和inject有幾個不同的地方：\n1. 所帶的變數順序與inject相反，要累積的result會放在後方\n2. 每一次跑完不取回傳值，而是取原本的result值，不需擔心回傳值的問題\n3. 只能使用於object、hash、array等型態，無法用於數字和字串。例如：\n\n```ruby\n[1,2,3].each_with_object(0) {|number, result| result + number}\n# => 0\n# => 永遠都是原始值，並不會改變\n```\n\n以上總共提到三種解法。\n\n## 三種解法的效能問題\n\n不過另一位網友Andy Croll從效能的角度來討論，merge的速度是最快的。他使用了[Benchmark ips](https://github.com/evanphx/benchmark-ips)這個gem，可以將不同的code丟進去檢查效能，並分別在幾個方法上丟入1000筆資料，得出以下結果。\n\n```\n第一種：inject方法         => 3136.7 i/s\n第二種：merge方法          => 5.9 i/s\n第三種：each_with_object  => 3220.8 i/s\n```\n\n這...也太打臉的吧，前一篇文章整理出來最好的方法是each_with_object，但效能卻是最差的，反而是中途使用的merge方法最簡單。筆者認為其實測量單位非常的小，即便以上幾個方法有著600多倍的差距，但實際在程式或網站上執行的速度，應該跟前端讀取和資料庫讀取比起來，還是快如閃電。各位覺得呢？\n\n## 延伸閱讀\n\n[三種解法](http://technology.customink.com/blog/2014/10/14/better-hash-injection-using-each-with-object/)\n\n[三種解法的效能](http://andycroll.com/ruby/benchmarking-each_with_object-against-inject-when-building-hashes-from-arrays/?utm_source=rubyweekly&utm_medium=email)", slug: "20141027-ruby-inject-each-with-object-hash", category_id: 7, author_id: nil, display_date: "2014-10-27", is_public: true, video_embed: nil},
  {title: "Rails使用 include 和 join 避免 N+1 query", content: "\nRails當中要連結model之間的關係非常簡單，不過也因為由於建立關係是這樣的簡便，造成許多指令會在讀取資料庫時有記憶體的浪費。例如我們建立以下關係：\n\n\n\n```ruby\n# Post\nhas_many :comments\n\n# Comment\nbelongs_To :post\n```\n\n並在helper中寫下：\n\n```ruby\nComment.each do |comment|\n\tcomment.post.title\nend\n```\n\n如果我們有很多個comment，就會產生非常多的資料庫查詢記錄：\n\n![pic](https://farm9.staticflickr.com/8899/17181288779_0fe9d34074_b.jpg)\n\n每一筆查詢對資料庫的效能都是一種消耗，因此身為後端開發者，查詢資料庫的次數是越少越好。以上寫法讓我們在查詢post的title時都透過comment的關連去查詢，所以執行每一個comment時，都會查詢一次post，增加大量的資料庫查詢比數。這就是一般資料庫容易產生的N+1 query問題，意思是我們在迴圈當中大量查詢N筆資料，再加上開頭查詢的那1筆，稱為N+1。\n\n為了避免在幾千筆資料查詢時大量消耗不必要的記憶體，Rails提供joins和include方法可以在第一次查詢時將所有我們需要的資料一次查完。\n\n記住，只要從model把資料抓到controller之後，剩下的我們就可以自行處理。越少的find和where指令越好。\n\n例如剛才的情況，可以用includes的方式解決：\n\n```ruby\ncomments = Comment.includes(:post)\nComment.each do |comment|\n\tcomment.post.title\nend\n```\n\n使用這個include方法，會在載入comments時，就先把各項內容載入，解決剛剛N+1的狀況。include這種查詢方法稱為eager loading，先將需要的資料一次查好，避免未來其他\n\n## join和include的區別\n\n雖然join和include的字義相像，在model中的用法也相像，但主要差別在於：\n1\\. join主要用於過濾model之間的關係，但對查詢筆數來說並無太大幫助\n2\\. include主要用於將大量資料在同一筆查詢內一次查好\n\n以剛剛的post和comment為例：\n\n```ruby\ncomments = Comment.joins(:post)\n# 回傳所有comment內含有post_id的項目\n# 並不會同時查詢關連資料，所以剛剛的comment.post.title會產生新的查詢指令\n\ncomments = Comment.includes(:post)\n# 回傳所有comment\n# 會查詢關連資料，因此查詢comment.post.title並不會產生新的查詢指令\n```\n\n以上是join用在belongs_to的用法，如果用在has_many，會有不同的狀況：\n\n```ruby\nposts = Post.joins(:comments)\n# 查詢全部含有post_id的comment，並回傳該comment所屬的post\n# 如果有很多筆comment屬於同一個post，那會回傳大量相同的post，可用.uniq來刪除重複的項目\n\nposts = Post.includes(:comments)\n# 回傳所有post\n# post和comment內容皆已在本次查詢，之後不產生額外的查詢筆數\n```\n\n不管是joins還是include，都可以搭配where來查詢符合條件的項目：\n\n```ruby\ncomments = Comment.joins(:post).where(\"title like ?\", \"my_title\")\n# 在1筆query內查詢所有post的title是\"my_title\"的項目\n# 回傳符合的post所擁有的comment\n```\n\n有些時候也會遇上有趣的狀況：\n\n```ruby\nposts = Post.includes(:comments).where(:comments => {:content => \"hello\"})\n# 只要有comment的content為\"hello\"，就回傳該post\nposts.first.comments\n# 只會回傳content是\"hello\"的comment\n# 兩個指令只產生一筆查詢\n\nposts = Post.joins(:comments).where(:comments => {:content => \"hello\"})\n# 同上\nposts.first.comments\n# 回傳該post的所有comments，不管content為何\n# 兩個指令產生兩筆查詢\n```\n\n以上狀況，可看出include比較能達到我們要的效果。記得每次寫code時都要注意是否會有N+1查詢次數的問題，利用join和include能夠節省許多記憶體的資源，達到更快的效率。\n\nCC圖片授權：[Wikimedia](http://commons.wikimedia.org/wiki/File:Digging_in_permafrost.jpg)", slug: "20141028-rails-include-join-avoid-n-1-query", category_id: 6, author_id: nil, display_date: "2014-10-28", is_public: true, video_embed: nil},
  {title: "Rails 基本命名及關連", content: "\n剛開始進入Rails，對於命名這件事情一定非常不習慣。之所以命名這麼重要，也是因為Ruby是物件導向的語言，而Rails更是把許多class、module、method都拆散在不同檔案中，方便管理。如果沒有將命名處理好，很容易不知道一個method是拿來做什麼用的。\n\n以下說明幾個基本命名原則，讓新手可以更快掌握。\n\n\n\n## 檔案命名與呼叫名稱\n\n首先，檔案名稱都是小寫並加上底線(underscore)：\n\n```posts_controller.rb```\n\n但在呼叫這個class時，是用大寫，也就是CamelCase，跟駱駝的背部一樣有很明顯的高低起伏：\n\n```PostsController```\n\n所以如果你在檔案名稱上看到大寫，最好趕快改成小寫並加上底線。資料庫的table名稱、column名稱也建議都是使用全小寫加上underscore的命名方式。\n\n## Model\n\n首先，在command line中產生model，要使用單數。想像model是一個table的名稱，所以用單數來當做整體的概念。\n\n```$ rails generate model <span style=\"color:red\">post</span>```\n\n而在一般controller或其他地方呼叫model時，就是使用常數(constant)，開頭大寫的單數。\n\n```ruby\ndef index\n\t@posts = Post.all\nend\n```\n\nRuby當中大寫的單數是module或class的名稱，而model算是一個class，同樣是用常數來讀取。如果未來有使用concerns或service object，也會使用大寫開頭的常數來呼叫。\n\n### 與:symbol搭配使用\n\n在建立model關連時，會有以下寫法：\n\n```ruby\n# Post\nhas_many :comments\n\n# Comment\nbelongs_to :post\n```\n\n在Rails當中，建立model以後，該名稱的symbol也就代表著那個model，因此使用:post就等於呼叫Post這個model。\n\n而在這裡由於有數量上的關聯，因此has_many後面的model名稱要加上複數。一般來說都是使用單數，只有關聯時才會使用複數。\n\n## Controller\n\n與model相對應的controller要與model取相同名字，但使用複數。\n\n```$rails generate controller <span style=\"color:red\">posts</span>```\n\n取相同名字是因為posts_controller.rb就是專門處理與post model相關的內容。這邊記得controller當中會有很多的action，所以是用複數，並在結尾加上 _controller.rb。\n\n然後記得，同一個資料夾底下預設的`application_controller.rb`活得好好的就不用特別去改動名稱，加一個s反而會造成Rails讀不到。\n\n## View\n\nview的資料夾名稱要與controller相同，檔案名稱則要與action名稱相同。例如posts_controller有兩個action如下：\n\n```ruby\ndef index\n\t# 省略\nend\n\ndef show\n\t# 省略\nend\n```\n\n則在view當中就會有一個資料夾叫做posts，底下會有兩個檔案：`index.html.erb`和`show.html.erb`。當然如果有很多種view格式，就會有不同的檔名結尾例如`show.pdf.prawn`，但前面的index和show並不會變。\n\n## helper\n\nhelper最常與view搭配使用，所以檔案名稱會與view資料夾的命名方式相同，例如`posts_helper.rb`，這樣一來Rails就會自動讀取這個檔案內的method提供view使用。以這個情況為例，在所有posts資料夾底下的view，都可以使用這個檔案裡面的helper。其他的controller會搭配其他的helper，但結尾一定都是`_helper.rb`\n\n如果你耍叛逆，硬要取一個叫`posting_helper.rb`，那預設是讀不到的，必須手動require進到檔案當中。不過這比脫褲子放屁還更沒效率，強烈建議就依照Rails的命名方式即可。\n\n## Migration\n\nMigration檔案當中，會調整資料庫，因此使用symbol時，所指的都是table名稱，而非model名稱。table名稱通常是model名稱的小寫並在結尾加上s變成複數，例如Post變成posts，所以在migration檔案當中調整時指定的是table名稱：\n\n```ruby\nadd_column :posts, :user_id, integer\n```\n\n以上的情況就不會使用:post。\n", slug: "20141030-rails-naming", category_id: 6, author_id: nil, display_date: "2014-10-30", is_public: true, video_embed: nil},
  {title: "部落格新居落成", content: "\n<!-- ![](https://farm8.staticflickr.com/7557/15719590372_0846056807_m.jpg) -->\n\n<img src=\"https://farm6.staticflickr.com/5603/15714283746_cf02268376_o.jpg\" width=\"840\" height=\"311\">\n\n花了兩個禮拜的時間，終於將新的部落格完成，有一種莫名的感動。未來都會在這個新網址 blog.motion-express.com 為大家繼續更新。\n\n\n\n為什麼要換新的樣貌呢？主要原因有幾個：\n\n## 1\\. 網站速度\n\n原本是用WordPress當做部落格框架，但本人剛好選了個不是很快的網域，是在加州的BlueHost主機商，速度就是勉強ok而已，再加上WordPress各種外掛搭配，整個速度都會被拖慢。因此，這次選擇用Hexo當做部落格框架，完全使用靜態網頁，不用資料庫讀取，因此速度可以說快上了好幾倍，除了讀取圖片以外，整個頁面幾乎是一瞬間就可以完成載入。\n\n## 2\\. 寫作速度\n\nWordPress的編輯器勉強可用，從前寫作也不會有太多問題，但最近轉戰網站開發技術，很多技術相關文章都需要貼code，並且加上很多html和markdown的語法，這些功能都需要WordPress載入其他外掛才能完成(外掛又會拖慢網站載入速度)。最重要的是WordPress編輯器並不支援`tab`這個按鈕，一般來說寫作時按下`tab`是要進行縮排，但在網頁上若按下`tab`是要跳到下一個網頁元素上。在以WordPress進行寫作時，按`tab`卻不是縮排，對我這種常常需要縮排的人來說真的無比困擾。\n\n再者，Hexo的寫作方式是本機編輯，也就是說可以用任何自己愛用的編輯軟體，像本人幾乎不管是寫作或編輯code都是用sublime text編輯器，可以利用內建的snippet功能，讓貼code的速度飛快。\n\n## 3\\. 喜新厭舊\n\n其實這不算什麼很正當的理由，但因為本人常常在換部落格版型，希望可以有不同設計感，因此也想要來個不一樣的感覺。由於最近轉戰到軟體開發技術Ruby on Rails，也希望整個網站可以配合該技術的設計主題『紅』一點。\n\n***\n\n未來就會在這裡繼續為大家服務，謝謝各位，希望能持續收看！ ", slug: "20141108-new-blog", category_id: 4, author_id: nil, display_date: "2014-11-08", is_public: true, video_embed: nil},
  {title: "Why Hexo?", content: "\n<img src=\"https://farm4.staticflickr.com/3948/15725082406_8831c559f4_o.jpg\" width=\"840\" height=\"199\">\n\n算一算，線上寫作大概有10年時間，前5年用的是MSN附屬的MySpace，後來改用WordPress直到這個月換成Hexo。用了這麼久的WordPress，為何要搬遷到Hexo？這一切都得從為何要使用WordPress開始講起。\n\n<!-- more -->\n\n## 一般線上部落格服務的缺陷\n\n一般部落格撰寫，首先都是使用例如Xuite、Blogger、痞客邦等普遍線上的部落格服務，方便、快速、免費。對於一般書寫的人來說非常好用，可以專心在寫作上。我剛開始用的是MySpace，由於和當時流行的MSN綁在一起，要分享給其他人非常方便，大部分心情、文章、甚至小說都放在上頭。\n\n不過隨著時間推移，胃口就越來越大。之所以要拋棄MySpace，主要是因為自己做起創業夢，希望有一個看起來非常專業的部落格，彰顯自己的能力和專業氣息。像MySpace這種一般線上部落格平台就有許多無法解決的問題：\n\n\n\n>1. 側欄會有官方置入的廣告，無法移除，且廣告收入並非自己的\n\n>2. 站方logo會明顯到一個不行，例如Blogger會有一個置頂導覽列，想移也移不開\n\n>3. 版型主題狹隘，大多類似\n\n>4. 外掛整合參差不齊，例如並非每家都可以掛Google Analytics，如果想要置入Gallery也沒辦法\n\n>5. 無法自訂網域\n\n>6. 無法自訂CSS\n\n>7. 匯入及匯出工具參差不齊，未來若想搬遷，還要看運氣\n\n>\n\n說實在，如果要追求專業形象，那在網站頁面上看到許多奇奇怪怪的東西，的確並非明智之舉。例如站方的logo只會凸顯我是附屬在這個網站之下的一個用戶而已。我希望讀者可以更專心的把視線放在網頁內容上。\n\n## 初識WordPress\n\n後來看到[WordPress](https://tw.wordpress.org/)，才發現一道曙光。WordPress可自訂的程度，真的非常驚人，基本上已經是一個非常完整的架站工具，甚至現在線上許多主流的內容網站都是用WordPress架設，例如[TechCrunch](http://techcrunch.com/)就是一例。基本上WordPress有三個最大優點：\n\n\n\n>1. 擴充性滿分，一切皆可自訂，包括任意修改JS、CSS、甚至PHP原始碼自訂各種功能\n\n>2. 外掛超多，所有功能都有人幫你寫好了，免費\n\n>3. 無名小站關閉時，部落客哀鴻遍野，WordPress由於是自行架設的部落格，因此不會有停止服務的困擾\n\n>\n\n由於剛開始接觸時就懷著一股創業夢，希望不單純是以部落格的形式存在，而是具有一個非常強大的擴充性，未來可以連接金流和各種多媒體服務；因此，對我當時來說，WordPress是一個不可多得的選擇。由於當時沒有免費的[WordPress.com](https://wordpress.com/)，因此就先找了一家虛擬主機商，租用以後將WordPress架在上面，外加自訂domain(也就是你現在正看到的motion-express.com)，開始部落格經營之旅。\n\n在這幾年內，大部分都是以video blogging的方式經營，因此整體內容都是在[YouTube頻道](https://www.youtube.com/playlist?list=PLV3umi5uuzU0R5dyCYdTLdTpehqOR-eG1)上，部落格上就是用一個[索引頁面](http://www.motion-express.com/?page_id=2615)的方式呈現，有點像是形象網站的感覺。\n\n## 轉換Hexo\n\n年紀越長，越覺得創業夢還沒辦法這麼快實現；也慢慢覺得，一件事情就該專注在一件事情的本質上，例如餐廳的重點就是要『好吃』，像王品可能服務很好，但好不好吃就見仁見智。一個部落格如果沒辦法把『閱讀』這項體驗發揮到極致，那玩其他的也沒什麼意義。\n\n加上近期轉戰網頁技術的關係，WordPress已經慢慢無法滿足我的需求。最主要的兩個原因：\n\n\n\n>1. WordPress資料庫讀取速度真的是差強人意\n\n>2. 線上編輯器功能很有限，拖慢寫作速度\n\n>\n\n早在幾個月前就因為這些原因，開始尋找不同的網頁框架，而Octopress剛好可以解決這兩個問題。\n\n### Octopress\n\n在Xdite對於Octopress的[介紹文章](http://blog.xdite.net/posts/2011/10/07/what-is-octopress)中已經有很清楚講到對於開發人員來說WorePress真的很差強人意，而Octopress有非常多優點：\n\n\n\n>1. 離線編輯，可用自己愛用的編輯器\n\n>2. 支援Markdown語法，排版超快\n\n>3. 支援Github或Heroku佈署，免錢，沒有需要管理伺服器的問題\n\n>4. 自由度跟WordPress一樣高，可以隨意更改功能和配置\n\n>5. 可加入Git版本控制，不怕改壞內容\n\n>6. 全靜態網頁，讀取速度超快\n\n>\n\n看了真的是非常心動，對開發人員來說，以上這些優點根本就是爽歪歪，加上我還有自己租用的虛擬主機，網域和伺服器的自由度更高。\n\n首次試用Octopress時對於他整個操作流程印象非常深刻，因為都是在自己本機的編輯器內完成，所有的程式碼都可以用syntax highlight，真的很爽。加上所有撰寫和上傳流程都是在command line中進行，對一個開發人員來說是非常舒服且很有效率的。\n\n不過Octopress並非沒有缺點，他寫新文章的流程都是`撰寫`、`編譯`、`佈署`三項，而偏偏在`編譯`的時候，只要文章數量一多，就會變得非常慢，我自己雖然沒有真正嘗試過大量編譯，但根據網路上各路好友的說法，只要到達100篇文章以上，就會開始感受到速度上的差異。要是每次寫新文章，都要編譯個兩三分鐘，那豈不是要我的命嗎...\n\n## Hexo\n\n對於編譯速度很慢的問題，就需要Hexo來解決了。Hexo是一個非常非常新的部落格框架，由同是台灣人的[Tommy351](https://github.com/tommy351)所撰寫，他本人在自己的[介紹文章](http://zespia.tw/blog/2012/10/11/hexo-debut/)中有寫到，Hexo是為了解決Octopress編譯速度過慢問題而生，儘管目前功能上跟Octopress的完整性還無法媲美，但在編譯的速度上是完全超越的。\n\n在我實際試用後...回不去了，根本超快。\n\n整體而言，他跟Octopress所擁有的優點完全相同，就是改善了速度的問題。本來對Octopress已經很心動的我，毫不猶豫的轉換到Hexo來。大概就是這樣，一個非常簡單的部落格心路歷程，假如你跟我一樣，對於部落格本身有非常多想法，歡迎參考[Hexo](http://hexo.io)網站上的訊息，或等我之後寫一些安裝、設定、實際撰寫文章的分享，就可以大概了解為何我對他這麼激賞了！\n\n### 補充：為何不用Ghost或Logdown等專門給開發人員的部落格服務？\n\n嗯...主要是自己hosting習慣了，就不喜歡把內容交給別人來保管了，外加這些服務還是沒辦法大肆的自行調整功能。如果你是開發人員，對於寫作沒有像我這麼雞蛋裡挑骨頭，那我是還蠻推薦Logdown的，他的編輯器非常的好用，速度也算不錯。\n\n", slug: "20141109-why-do-i-use-hexo", category_id: 4, author_id: nil, display_date: "2014-11-09", is_public: true, video_embed: nil},
  {title: "Rails複製資料庫內容：開發環境 -> 測試環境", content: "\n進行Rails開發時，有時需要將開發環境(development)的資料庫內容複製到測試環境(test)當中，方便我們在整合測試時，有時需要撈取一些特定資料。我們這次要利用db:seed的方式，指定將資料seed到測試環境的資料庫當中。\n\n分成三個步驟：\n\n1\\. 開設一個專門的seed資料夾\n2\\. 將目前的開發環境資料庫內容複製到seed檔案當中\n3\\. 利用db:seed將資料倒入測試資料庫中\n\n\n\n* * *\n\n## 1. 開設專門的seed資料夾\n\n由於會有許多測試檔案，因此我們不動到原本rails內建的`db/seeds.rb`，另外再開一個新的資料夾，放入所有我們需要的seed檔案。我們可以在`db`底下再增加一個資料夾`seeds`。整個結構變成：\n\n\n\n>db\n\n>|--> seeds\n\n>|----> posts.rb\n\n>|----> comments.rb\n\n>\n\n裡面所有的`.rb`檔案就是我們要產生的seed檔案。\n\n## 2. 使用gem 'seed_dump' 來複製資料\n\n[gem 'seed_dump'](https://github.com/rroblak/seed_dump)就是專門拿來把資料庫複製到seed檔案內的gem，這邊我們依照一般程序安裝。首先在Gemfile輸入：\n\n```ruby\ngem 'seed_dump'\n```\n\n接下來在command line執行：\n\n```\n$ bundle\n```\n\n安裝就完成了。雖然他文件中有說明許多不同的操作方法，不過在這邊我們重點是將資料複製出來，只要在command line輸入：\n\n```\n$ rake db:seed:dump\n```\n\n就可以將開發環境的資料庫內所有table都寫在`seeds.rb`內。<span style=\"color:red\">注意</span>：seeds.rb裡面所有內容都會被覆寫掉。\n\n不過我們沒有要直接覆寫掉原本的檔案，因此要加上檔案的變數；另外假如我們有20多個table，倒資料的速度也會很可觀，因此我們只選擇測試真正會用到的table即可。\n\n```\n$ rake db:seed:dump <span style=\"color:red\">MODELS=Post</span> <span style=\"color:yellow\">FILE=db/seeds/post.rb</span>\n```\n\n後面兩個是變數，第一個可以指定我們要倒出的model名稱，後面則是要倒出來的檔案名稱。這時候，他就會將所有\n內容複製出來。可以直接到該檔案內檢查是否有東西即可。\n\n## 3. 執行指定的seed檔案\n\n原本Rails內建的`$ rake db:seed`只會執行seeds.rb檔案，現在要增加一個設定，讓我們可以自行決定要執行的檔案名稱。\n\n到`lib/tasks/`資料夾內，開啟新.rb的檔案，並進行編輯。\n\n```ruby\nnamespace :db do\n  namespace :seed do\n    Dir[File.join(Rails.root, 'db', 'seeds', '*.rb')].each do |filename|\n      task_name = File.basename(filename, '.rb').intern    \n      task task_name => :environment do\n        load(filename) if File.exist?(filename)\n      end\n    end\n  end\nend\n```\n\n這樣設定並儲存以後，我們就可以執行自訂的seed檔案，只要在後方加上檔案名稱即可，要注意自訂資料夾名稱和code裡面的名稱有沒有對應。\n\n最後，seed指令如下：\n\n```cmd\n$ rake db:seed:post RAILS_ENV=test\n```\n\n在seed後方加上檔案名稱，去掉.rb；並再加上指定的資料庫環境。執行以後，就可以到資料庫內查看，新增的資料應該都已經在裡面囉！\n\n\n\n>有時會使用 $rake db:test:prepare 或其他整理測試環境資料庫的指令，這些指令都會清空資料庫，因此若有任何資料庫架構的變動，記得再執行一次db:seed來填入資料喔！\n\n>\n\n## 延伸閱讀\n[gem 'seed_dump'](https://github.com/rroblak/seed_dump)\n[自訂seed路徑](http://stackoverflow.com/questions/19872271/adding-a-custom-seed-file)\n[指定seed環境](http://stackoverflow.com/questions/4768361/how-can-i-add-my-seed-data-to-my-test-database-using-rake-dbseed)", slug: "20141112-rails-test-db-seed", category_id: 4, author_id: nil, display_date: "2014-11-12", is_public: true, video_embed: nil},
  {title: "Ruby 當中的attr_accessor是什麼意思？", content: "\n在[Stackoverflow](http://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby)上看到一篇關於`attr_accessor`非常入門的文章，對於我這種Rails用習慣卻對Ruby原理不熟的人來說獲益良多。\n\n\n\n一個Ruby程式當中會有許多`class`，但內容空無一物的class並不會任何變數，例如：\n\n```ruby\nclass Car\nend\n\ncar = Car.new\ncar.color # NoMethodError: undefined method \"color\"\ncar.color = \"blue\" # NoMethodError: undefined method \"color\"\n```\n\n我們要讀取及修改這個class當中的`color`變數，但因為什麼都還沒有設定，所以出現錯誤。我們要設定一個變數：\n\n```ruby\nclass Car\n\tdef color\n\n\tend\nend\n\ncar = Car.new\ncar.color # nil\ncar.color = \"blue\" # NoMethodError: undefined method \"color=\"\n```\n\n因為什麼都還沒設定，因此`car.color`回傳值是空白；不過更值得注意的是當我們要指定數值給`color`這個變數的時候，Ruby會自動去抓`color=`這個method，因此我們也需要先建立一個相對應的method。\n\n```ruby\nclass Car\n\tdef color\n\n\tend\n\n\tdef color=(string)\n\n\tend\nend\n\ncar = Car.new\ncar.color # nil\ncar.color = \"blue\" # nil\ncar.color #nil\n```\n\n注意我們雖然有設定了`color=`這個method，但我們裡面需要一個變數，否則都只是空的method。\n\n```ruby\nclass Car\n\tdef color\n\t\t@color\n\tend\n\n\tdef color=(string)\n\t\t@color = string\n\tend\nend\n\ncar = Car.new\ncar.color # nil\ncar.color = \"blue\" # blue\ncar.color # blue\n```\n\n這樣就完成囉！但由於在Ruby當中這是非常基本的用法，常常出現，因此Ruby已內建幾個method來幫我們建立這樣的模式。\n\n```ruby\nclass Car\n\tattr_reader :color\n\tattr_writer :color\nend\n```\n\n兩個method將讀和寫分開，會自動建立一個`@color`變數給我們。更簡略的寫法是：\n\n```ruby\nclass Car\n\tattr_accessor :color\nend\n```\n\n非常簡單的完成了！\n\n假如還想知道為什麼是pass `:color`這個前面加上:的變數，而非一般的變數，那就要了解一下[Ruby當中symbol的意思](/20141024-ruby-on-rails-symbol/)囉！簡單來說，由於符號是獨特的，因此才能代表我們真正要使用的物件，所以這種時候都會帶入符號，而非一般字串或變數。\n\n\n\n", slug: "20141115-ruby-attr-accessor", category_id: 7, author_id: nil, display_date: "2014-11-15", is_public: true, video_embed: nil},
  {title: "想要給一點希望，卻是少一點信任", content: "\n溝通的時候，很多人喜歡給一個range當做緩頰的空間，這種情況在談錢的時候最常碰到。\n\n\n\n>求才：『徵行銷企劃，月薪30000~50000元』\n\n>=> 談成的薪水是剛好30000元，而且是加上勞健保+餐費補助+工作獎金的結果\n\n>\n\n>E-mail：『本專案預估價格為10萬~15萬元』\n\n>=> 結論是剛好15萬元，不含修改的價格，後續還會有其他雜費\n\n>\n\n>廣告：『月月抽，最高金額10000元』\n\n>=> 三個月只會有1個人中10000元大獎，其他人都是中100元\n\n>\n\n\n\n這種給range的溝通方式，其實結果可想而知，必定都是『對發言者最有利的數字』。而且不只在數字上，在決策上也會用相同方式，例如：\n\n\n\n>『公司決定將縮減貴部門的人數，或視情況裁撤整個部門。』\n\n>\n\n聽到這種話，想都不用想了，最後絕對是整個部門裁撤掉。這種『或』的句型，比較像是英文中討論到最後靈光一閃的補充句，通常這種補充句都是最佳解答，拿來當做溝通的技巧，也只是剛好而已，聽多了有點麻木。\n\n隨著年齡增長，拿這套出來溝通的人卻是越來越多。有時候聽到就很想翻白眼，因為所謂的『二選一』或是『最大值和最小值』都只是一個緩頰的空間而已，最後的結果必定是對發言者最有利的結果，或是對聽的人最糟糕的結果。就像小丑在《黑暗騎士》裡面說的一樣，人類都是為了『希望』而活。只要先將一些可能性釋放出來，我們就會在心中祈禱這些可能性會發生。但對說的人來講，事情早已定案，根本沒有什麼可能性。\n\n另外，我認為這個句型真正不好的地方，是因為他是一種談判技巧，偏偏很多時候都是拿來對自己人用。如果拿來對自己人用擺明就是增加不信任感。就以談薪水這件事情來看，假如我根本還沒進公司，面試時談到的薪水就是最低薪，這代表的不只有希望落空，而是會增加對這間公司的成見。對新進員工防得這麼兇，是否公司體制保守，老員工都囂張跋扈？\n\n例如以前在某家公司談加薪，主管說：『一般來說一次是加1000~2000』(數字隨便掰的)聽到的當下，我白眼差點沒翻到頭頂上，因為這擺明就是1000。我很相信那位主管，但他還是用這種方式來跟我溝通，擺明了是有一種非常強大的距離感，不當自己人看。我當下沒說什麼，只能點頭，但實際上是離職了還記恨到現在。\n\n我用過這個技巧，對客戶很好用，拿來行銷也很好用。就像剛提到的『月月抽，最高金額10000元』，把最大的利潤說出來，非常誘人，包括『下殺一折』、『按讚抽手機』這類的標語，給了好多好多的希望，也吸引了好多好多人。不知不覺，這套技巧就被搬到生活中了。『現在部門還在發展階段，你先進來做一陣子，等擴張以後你就可以當小主管。』這樣的話大家應該多少都聽過，也是一樣的概念，聽多了大家都知道是在吹汽球。\n\n給出去的希望真的做得到嗎？我覺得真誠一點比較實在，被比較熟的人用這個技巧耍弄時，都會有種想衝上去揍一拳的衝動。", slug: "20141116-why-giving-a-range-in-communication", category_id: 1, author_id: nil, display_date: "2014-11-16", is_public: true, video_embed: nil},
  {title: "Rails修改預設顯示格式為json", content: "\n在Rails當中撰寫controller時，一般都是用`respond_to`來調整輸出的格式，讓使用者可以自由選擇。例如常見的一般html及json兩種格式：\n\n```ruby\nrespond_to do |format|\n\tformat.html { redirect_to @post }\n\tformat.json { render :show, status: :ok, location: @post }\nend\n```\n\n這樣不管是連結到html頁面，或是指定輸出為json格式，都可以輕鬆應付。\n\n***\n\n不過有時我們希望整個controller都是輸出成json格式，不需要html，則可以用幾種方式處理：\n\n\n\n## 1. 直接輸出json格式\n\n一般來說要指定輸出json，都必須在網址列上輸入`http://example.com/posts.json`，在結尾加上json才會有json格式出現。\n\n如果要強制html輸出成json格式的話，只要在controller action結尾撰寫如下：\n\n```ruby\nrender :json => @posts\n```\n\n就會將`@posts`輸出成json格式。\n\n## 2. 指定輸出json檔案\n\n有時搭配其他gem例如jbuilder來打造特別的輸出方式，由於jbuilder就無法使用簡單的`render`方式輸出，因此除了原本在網址列最後加上json的方法之外，可以直接指定輸出的template：\n\n```ruby\nrespond_to do |format|\n  format.html {render template: \"posts/index.json.jbuilder\"}\nend\n```\n\n可以達到同樣預設輸出json格式的效果。有關jbuilder的用法可以參考[以前的文章](/20140829-ruby-gem-jbuilder/)。\n\n## 3. 指定整個controller使用json格式輸出\n\n對於喜歡乾淨code的人來說，如果整個controller預設就是該使用json格式，則要如何乾淨俐落的寫呢？首先到`routes.rb`檔案：\n\n```ruby\n# config/routes.rb\nresources :posts , defaults: {format: :json}\n```\n\n這個設定會讓整個controller的輸出方式都是json。\n\n接著到controller的頂部，加上`respond_to`及`respond_with`\n\n```ruby\nclass PostsController < ApplicationController\n\t# 設定會回應的輸出格式\n\trespond_to :json\n\n\tdef index\n\t\trespond_with Post.all\n\tend\nend\n```\n\n`respond_with`的用法比較特別，就是不管使用者呼叫什麼樣的格式，Rails伺服器就是以指定的資料回應，假如我設定多種回應格式包括xml、pdf等等，都會用同樣方式回應。在此就是將所有posts內容以json回傳，寫起來變得非常簡便。未來擴充的方便性在於如果要回應更多種格式，只需要在最前面的`respond_to`那邊增加格式即可。有關respond_with的用法，可參考[APIdock](http://apidock.com/rails/ActionController/MimeResponds/respond_with)。\n\n\n\n>補充：有許多Rails開發者認為在routes檔案內設定輸出格式是不專業的作法，因為就像Rails所強調的各司其職，routes就應該只管routes的內容即可，以避免未來維護會有找不到修改處的問題。當然這只是一種論點，對於實務上的使用可以再斟酌。當然，整個controller都用前面提到的`render :json => @posts`也是一個替代方案。\n\n>", slug: "20141124-rails-default-render-json", category_id: 6, author_id: nil, display_date: "2014-11-24", is_public: true, video_embed: nil},
  {title: "Ruby當中的class method和instance method差在哪？", content: "\nRuby新手剛開始都知道，class method就是在定義method時加上self，就變成class method。例如：\n\n```ruby\nclass Greeting\n  def hello\n    \"hello\"\n  end\n\n  def self.hello\n    \"hello\"\n  end\nend\n```\n\n這樣不管我們執行`Greeting.hello`還是`Greeting.new.hello`都會有一樣的結果，而這兩種method到底有什麼差別呢？\n\n\n\n\n\n>可以想像一個class是一個大團體，裡頭的每一個人都是一個instance，假如我們要對整個團體下命令，就是在執行class method；反之假如是對其中一個人下命令，則就是執行instance method。\n\n>\n\n概念如下圖：\n![](https://farm8.staticflickr.com/7548/15789065958_04d66b94f7_n.jpg)\n\n## 從Rails來理解\n\n在學習管理Rails的model時，這樣子的概念比較好解釋，假如我需要針對個別的Post來檢視其去掉空白的內容長度，則可以進行以下設定。\n\n```ruby\nclass Post < ActiveRecord::Base\n  def content_length\n    self.content.tr(\" \",\"\").length\n  end\nend\n\n# 實際使用\nPost.first.content_length\n```\n\n像這樣的method，我們就會呼叫個別的post出來執行，而不會執行在整個`Post`這個class上頭，這種就是instance method的概念。反之，在呼叫個別的post時我們會使用例如`Post.first`或是`Post.find(1)`這樣的method，這些搜尋用的method就是class method，會套用在整個class上面，而非個別的instance上面。\n\n## 風格上的差異\n\n我們跳脫Rails來看，平常在設定class時，這兩種method就會有觀念上的差異。因為今天我們用的是Ruby，是一種物件導向的語言，所有的東西都是物件，因此『各司其職』這件事情就顯得非常重要。Nick Sutterer在[Are Class Methods Evil](http://nicksda.apotomo.de/2011/07/are-class-methods-evil/)文章中也提到，物件導向語言最重要的是不能讓觀念搞混，否則編修和維護的難度都會大幅提高。\n\n儘管Nick Sutterer相當反對使用class method，但才書學淺的本人覺得在初學階段，還是必須將兩者分清楚，並且在適當的情況下使用。至於那些高深的辯論和用法，等到已經變成專家了再來煩惱。\n\nMichael Lomniki在其[評論文章](http://mlomnicki.com/programming/ruby/2011/07/20/class-vs-instance-methods.html)當中有提到，使用instance method和class method是風格的問題。例如以下兩種寫法，就完全是兩種不同風格：\n\n```ruby\n# 以instance method為主\nclass Greeting\n  def initialize(name)\n    @name = name\n  end\n\n  def hello\n    \"Hello, \#{@name}\"\n  end\n\n  def question\n    \"How are you, \#{@name}?\"\n  end\nend\n\n# 實際執行\ngreeting = Greeting.new(\"John\")\ngreeting.hello\ngreeting.question\n```\n\n以上風格比較符合Rails以及一般認為物件導向的寫法，以下直接用class method來做相同的事情，看看差在哪裡：\n\n```ruby\n# 以class mehtod為主\nclass Greeting\n  def self.hello(name)\n    \"Hello, \#{name}\"\n  end\n\n  def self.question(name)\n    \"How are you, \#{name}?\"\n  end\nend\n\n# 實際執行\nGreeting.hello \"John\"\nGreeting.question \"John\"\n```\n\n在第一個例子中，由於`Greeting.new`預設會執行`initialize`這個method，因此一般來說任何變數都是在產生新的instance時帶入，並且藉由instance variable在class當中傳遞。這樣的好處是只要在`initialize`當中將變數設定好，接下來就可以寫得非常精簡。\n\n反之，在第二個例子中，所有變數都要帶到method當中，看起來顯得有些多餘，這也是class method一個不小心就會讓class變得很冗長又難讀的原因。但對於有些人來說，寫code時可以直接用class method，就可以省去多一個`new`的困擾。\n\n## 小結\n\n對新手來說，學習Ruby應該都是從Rails起步，因此還是遵照ActiveRecord那種寫法，將class method和instance method的用法完全隔開，各司其職，避免在維護上自己踩到自己的地雷。等較熟練以後，再來看是否有功能可以直接實作成class method。", slug: "20141208-class-method-and-instance-method", category_id: 7, author_id: nil, display_date: "2014-12-08", is_public: true, video_embed: nil},
  {title: "Ruby class 基本的覆寫(override)及繼承(inheritance)", content: "\n首先考考大家，以下寫法，如果呼叫`Greeting.hello`出現的是哪一個結果呢？\n\n```ruby\nclass Greeting\n  def self.hello\n    \"hello\"\n  end\n\n  def self.hello\n    \"say hi\"\n  end\nend\n```\n\n不知道各位猜對了嗎？比較晚出現的code，會將較早出現的code覆寫掉，所以答案是出現`\"say hi\"`。\n\n\n\n##1. 覆寫\n\n最近嘗試寫一些Ruby gem，才發現這些關於class很驚人的事情，從以上例子進行延伸，其實我們可以對Ruby當中既存的class和method進行任意的修改及延伸。這有什麼好處呢？主要是在設定不同class時，可以非常簡便的互相取用資源，也可以從既有的class取得內容、進行編修。\n\n假設我們需要針對所有字串(String)增加一個method，可以直接呼叫String出來修改：\n\n```ruby\nclass String\n  def hello\n    \"Hello \#{self}\"\n  end\nend\n\n\"John\".hello\n# => \"Hello John\"\n\n\"Pan\".hello\n# => \"Hello Pan\"\n```\n\n這個觀念最厲害的地方在於不管我們使用什麼字串，由於都是屬於String這個class底下的物件，所以設定的method都可以套用上去。假如我們對既有的method不滿，也可以用這個方式來增補，例如我們希望將字串的`downcase`和`reverse`這兩個method合併為一個`downswap`，那可以用以下寫法：\n\n```ruby\nclass String\n  def downswap\n    self.downcase.reverse\n  end\nend\n\n\"APPLE\".downswap\n# => elppa\n```\n\n這樣設定好以後，就可以在字串上使用。\n\n##2. 繼承\n\n另外，class也有繼承的概念，就像我們在Rails的controller當中，會看到`ApplicationController < ActionController`的寫法，意思是所有在ActionController當中能夠使用的功能，都會繼承到ApplicationController裡面，也因此我們才有很方便的callbacks可以使用，例如`before_filter`等等。\n\n我們也可以在自訂的class當中使用繼承的觀念：\n\n```ruby\nclass Feature\n  attr_accessor :feature\n  def initialize(feature=\"safe\")\n    @feature = feature\n  end\nend\n\nclass Product < Feature\n  def price\n    \"$500\"\n  end\nend\n\nfeature = Feature.new\nfeature.feature\n# => \"safe\"\n\nproduct = Product.new\nproduct.feature\n# => \"safe\"\n```\n\n從上面的例子可以看出，我們在`Product`這個class中雖然什麼都沒有寫，但因為已經開宗明義寫出是從`Feature`這個class繼承而來，所以所有變數、method都可以直接取用，算是非常方便的一個地方。另外還多了一個`price` method可以取用，會顯示跟幫助國民黨一樣可以拿到的500元。\n\n這兩個觀念對於class的編修非常基本，但對於了解整個Ruby和Rails的脈絡是非常有用，尤其是目標要自行撰寫gem或framework的朋友來說是非知道不可啊~\n\n## 延伸閱讀\n\n[Ruby Inheritance](http://rubylearning.com/satishtalim/ruby_inheritance.html)\n[Ruby Delegation](http://radar.oreilly.com/2014/02/delegation-patterns-in-ruby.html)", slug: "20141209-ruby-class-inheritance", category_id: 7, author_id: nil, display_date: "2014-12-09", is_public: true, video_embed: nil},
  {title: "Franky快速架構Sinatra框架", content: "\n## 什麼是Franky？\n\nFranky是一個Ruby gem，只用五個指令就可以建構一個web環境。\n\n## 為何要用Franky？\n\n假如你跟我一樣，常常有一些不同的Ruby的idea需要搭配web伺服器來測試，這時候可能會選擇最簡單的Sinatra框架來搭配，我們會在terminal中執行：\n\n```\n$ mkdir app\n$ cd app\n$ touch config.ru\n$ touch app.rb\n$ touch Gemfile\n```\n\n接著到三個檔案中將rack基本的程式碼撰寫完成，並執行`bundle`，就可以開始測試idea。\n\n俗話說得好，沒有最懶，只有更懶。有沒有辦法只用更少的步驟來架構一個環境呢？\n\n\n\n## 怎麼不拿既有專案來改呢？\n\n1. 通常測試完，code丟著就忘了\n2. 通常無法好好保存\n3. 可能會把專案搞壞\n\n## Franky可以解決什麼問題？\n\n假如我們要增加一個專案，可以直接執行`franky new app`，Franky會自動幫我們產生一個叫做`app`的專案資料夾，只要進去裡面進行`bundle`，接下來就完成了整體環境測試，只要再執行`rackup`，就可以到瀏覽器瀏覽了。\n\n另外，Franky也提供了最簡易的模版，也就是sinatra最基本的三個檔案，就可以直接佈署到Heroku上。\n\n## 實際操作流程\n\n在Terminal中輸入：\n\n```\n$ gem install franky\n$ franky new project\n$ cd project\n$ bundle\n```\n\n接著開啟 app.rb，加入自己的程式碼：\n\n```ruby\nrequire 'sinatra'\n\nclass App < Sinatra::Base\n\tget \"/\" do\n\t\t# 程式邏輯寫在這裡...\n\t\terb :'index.html'\n\tend\nend\n```\n\n剩下的就可以到`views/index.html.erb`當中完成。最後在terminal中開機：\n\n```\n$ rackup\n```\n\n打開瀏覽器網址輸入`localhost:9292`就會看到熟悉的\"Hello World\"字樣囉！\n\n## 是否有詳細的使用說明？\n\n\n- 使用方法及詳細說明文件請看 [Github](https://github.com/nkj20932/franky)\n- 原始碼內的各種class、methods拆解說明請看 [Rdoc](http://www.rubydoc.info/github/nkj20932/franky/master)\n\n希望大家都可以快速的測試及實現各種web idea喔~", slug: "20150204-introduce-franky", category_id: 8, author_id: nil, display_date: "2015-02-04", is_public: true, video_embed: nil},
  {title: "我的Vim第一週", content: "\n![Vim](https://farm8.staticflickr.com/7432/16346519668_ed5670acb1_m.jpg)\n\n從上週開始學習Vim到現在七天，真是滿滿的痛苦，但也有滿滿的心得。\n\n## 簡介\n\n假如你不知道Vim是什麼，說明一下，Vim是一套免費的文字編輯軟體，從1976年的Vi演變而來，1991年由Bram Moolenaar開發成Vi Improved軟體，發展至今。由於功能強大，成為許多開發者的偏愛。\n\n## 雙手不滿足\n\n我前前後後到現在學code大概1年半，最早用notepad++，後來改用sublime text，說實在sublime text已經非常強大，要挑什麼缺點還挑不出來。不過正所謂人是不滿足的，sublime text用久了，有幾個地方希望可以加強：\n\n\n\n>1. 就像notepad++一樣，大部分的功能熱鍵都需要配合ctrl、cmd、option、shift四顆鍵。由於功能太多，有時候會出現三四顆鍵需要一起按的情況，例如ctrl + cmd + p，手的移動幅度非常大，很麻煩。\n\n>2. 接續第一點，使用方向鍵也會讓手在鍵盤上的移動幅度過大。\n\n>\n\n以上兩點，說穿了就是「懶」一個字，對一般文字工作者來說，按ctrl和方向鍵是稀鬆平常的事情。但在開發方面，「懶」同時也代表「效率」，`如果我們可以大幅減少手的移動，就可以相對讓開發速度快很多。`\n\n## Vim特色1：熱鍵\n\nVim最大的特色就是`熱鍵`，所有的熱鍵都可以在鍵盤中間完成，幾乎不需要移動手指，可以輕鬆放在homerow上(也就是一般手放在鍵盤上的標準位置)。\n\nVim有配備normal mode或稱command mode，在這個模式底下，所有按鍵都是「指令」。一般編輯器都是把指令和編輯功能放在一起，例如我要複製貼上一整行，會使用`ctrl + l`、`ctrl + c`、`ctrl + v`；但在vim當中，只要進入command mode，按`yy`再按`p`就完成了複製貼上的功能。如果要輸入文字，就按`i`即可進入編輯模式。\n\n當然這只是千萬個vim熱鍵中的其中一個，我們根本不用去移動手指去按ctrl，甚至比GUI用更少的步驟就完成複製貼上，這就是Vim最強大的地方。不過這也同時是他學習曲線最陡的地方，因為我們還要記y和p的功能同等於複製貼上，就像是學習一個新的輸入法一樣。\n\n## Vim特色2：Script\n\n許多編輯器沒辦法自訂function，而vim可以。Vim其中一個陡峭的學習曲線就是`.vimrc`，也就是vim設定檔案，裡面可調整各種熱鍵、顯示方式、自訂funciton。例如以下是一個很簡易的Vim Script：\n\n```vim\n\" 設定一個利用tab鍵來自動完成打字的功能，例如輸入'vari'再按下tab，自動會變成'variable'\nfunction! TabAutoComplete()\n  let col = col(\".\") - 1\n    if !col || getline(\".\")[col - 1] !~ '\\k'\n      return \"\\<tab>\"\n    else\n      return \"\\<c-n>\"\n  endif\nendfunction\n\n\" 將上述funciton綁訂到tab鍵上\ninoremap <tab> <c-r>=TabAutoComplete()<cr>\n```\n\n看起來似乎有點麻煩，但重點是我們可以在Vim Script裡面寫入各種特別的script，包括if...else判斷、迴圈等等，如果是其他編輯器呢？就勢必要包成一個外掛，再裝回本機才有可能使用，相對來說是更麻煩的。更別提說如果我要的功能只是10行code就是搞定的簡易function，只要寫在<snippe>.vimrc`設定檔中，用完以後刪掉，根本簡便到不行。\n\ntab自動完成功能在許多編輯器上已經內建，在Vim上並沒有，看似一個很怪的地方，但這也是包含在Vim的學習曲線當中。<span style=\"color:red\">如果你有能力自行撰寫tab自動完成功能，其他類似的功能是否也可以自行解決？這樣就不用非得搜尋各種外掛來協助。</span>\n\n## Sublime Text不也有Vintage mode？為何一定要學Vim？\n\n有玩過Sublime Text的人都知道可以開啟Vintage mode，也就可以用Vim的模式在Sublime中操作，兩種模式的混合操作，可以截長補短，更增加效率。\n\n不過這還是一個根本上的不同，Sublime Text的根本是GUI，Vintage Mode雖然將終端機介面的操作方式帶入了Sublime Text，但還是有許多無法「模仿」或「超越」的地方，例如：在Sublime Text當中無法直接撰寫Vim Script，以及許多細部設定。在[Quora上有一個討論](http://www.quora.com/How-do-Sublime-Text-and-Vim-compare-in-2013)提到幾個關鍵點：\n\n\n\n>1. Vim和Sublime的差異在於你會不會需要用到滑鼠：Vim在視窗切割及設定功能上比sublime強上許多，且完全不用動到滑鼠；不過Sublime Text可以讓你用滑鼠快速瀏覽多個檔案。\n\n>2. Vim最初的樣貌非常陽春，什麼功能都沒有，但相對之下可以高度客製化成自己想要的樣子；Sublime Text則是剛開始就把必要的功能幾乎都裝好了，相對來說這些已經裝好的功能就無法再去客製化成自己想要的樣貌。\n\n>(筆者翻譯)\n\n>\n\n在同一個討論串中，對於Vim持反對立場的人都是認為Vim學習曲線過高、.vimrc設定所需時間太長、易忘、投資報酬率太低(亦即花了很多時間去熟悉一個編輯器，但得到的效率提昇並不多)、以及Sublime Text畫面設計較為美觀等等。\n\n不過這並不表示Vim的優點會被掩蓋掉，本人是學Ruby起家的，在[SitePoint上一篇調查最多Ruby高手使用的編輯器](http://www.sitepoint.com/editor-rubyists-use/)當中，可以看出Vim是最多高手使用的編輯器，Sublime Text佔第二名，雖然調查的母數很少，但可以看出在高端開發者當中，使用Vim的絕不是少數。\n\n## 結論\n\n剛開始學Vim第一週，雖然大概知道Vim的強大之處，但還是有許多需要跨越的障礙。[Terminally Incogerent](http://www.terminally-incoherent.com/blog/2012/03/21/why-vim/)上有一篇[Why Vim?](http://www.terminally-incoherent.com/blog/2012/03/21/why-vim/)的文章，有個各編輯器的學習曲線圖讓我覺得非常幽默。\n\n![若圖片連結失效請至原部落格觀看](https://farm8.staticflickr.com/7316/16533690502_8c324461ae_z.jpg)\n\n除了Emacs的學習曲線是一個遙不可及的巨人以外，Vim(vi)的學習曲線可以說是最難的。至於Sublime Text和Textmate等常用的GUI工具，可能就是比notepad再難一些吧！\n\n關於Vim的特色和優點，以下的影片用非常幽默的方式呈現：\n\n<iframe src=\"//player.vimeo.com/video/6999927\" width=\"500\" height=\"367\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"https://vimeo.com/6999927\">Welcome to Vim</a> from <a href=\"https://vimeo.com/user1690209\">Derek Wyatt</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n\n歡迎大家討論、指教、修正！", slug: "20150215-learning-vim", category_id: 9, author_id: nil, display_date: "2015-02-15", is_public: true, video_embed: nil},
  {title: "正規表達式(Regular Expression)以及在Vim當中的用法 ", content: "\n正規表達式(Regular Expression，以下簡稱regexp)最主要用於比對文字，例如`搜尋`和`取代`時，有時我們的搜尋規則較為複雜，無法使用一般搜尋功能。\n\n### 範例一：刪除姓氏\n\n例如這邊有一份文件，是一個賓客名單，我們將所有名字列在上面。現在因為隱私的關係，需要把所有姓氏移除。但大家名字都不相同，要如何移除呢？\n\n```\n1. Jason Sanfer\n2. Jenniffer Rounder\n3. Richtor Jose\n4. Sam Johnson\n...\n```\n\n一行一行移除絕非好方法，用一般搜尋取代也無法找出較為符合的規則。這時使用regexp的話會非常簡單，我們只需要考慮兩個邏輯。\n\n\n\n>1. 所有姓氏都是一個英文單字\n\n>2. 所有姓氏都在整行的結尾\n\n>\n\n依此規則只需要在搜尋欄位輸入：\n\n```\n/\\w+$/g\n```\n\n就可以選取所有姓氏。\n\n「蛤？這什麼鬼？」\n\n簡單來說，前後兩個斜線`/`代表宣告我們要使用regexp，中間的`\\w`可以選取任何單一英文字母，而後面的`+`則是選取一個任何長度的英文單字，尾端的`$`代表選取句子的結尾。而在整句的最後還有一個`g`代表global，也就是將所有情況都選起來，如果沒有設定g，搜尋只會將第一個遇到的情況選擇起來。整段拼湊起來意思就是「選取所有在結尾的一個英文單字」。\n\n### 範例二：將tab替換為空白\n\n撰寫程式時會使用tab鍵來縮排，但常因為排版的關係，使用兩個空白鍵是較為理想的狀況。假如我們在修改其他人的程式時，需要將檔案內所有的tab都改成兩個空白鍵，可以進行以下搜尋：\n\n```\n/\\t/g\n```\n\n`\\t`代表tab字元，這樣就可以將文件內所有tab選起，至於取代功能，各編輯器的方式不一，以下用Vim當做例子。\n\n## Vim當中的正規表達式\n\n使用Vim作為文字編輯器，勢必要使用到不少regexp進行搜尋取代，每個文字編輯器都有內建的正規表達式使用方法，Vim相較於其他編輯器，有較為特殊的啟動方式。\n\n進入Vim以後，在Normal Mode底下按`/`開始搜尋，這時若輸入文字，就是進行一般的搜尋。如果要使用regexp，必須先輸入`\\v`代表進入\"Very Magic\"模式，當然...這是Vim裡面的術語，基本上就是我們平常用的regexp，只能說設計這個模式的人覺得正規表達式很神吧。\n\n若要了解各項模式的差異，輸入`:help magic`可以了解各模式的差異，包括了No Magic模式和Magic模式，用法和regexp稍微有點差異，但都是用於不同搜尋情況的功能。本人跟Vim還沒那麼熟，這邊只說明最普遍的Very Magic模式。\n\n以剛剛要刪除所有姓氏的情況來看，我們可以輸入：\n\n```\n/\\v\\w+$\n```\n\n第一個`/`是Vim的搜尋符號，後方的`\\v`代表進入regexp搜尋模式，接著才是我們剛進行的`\\w+$`搜尋。\n\n這邊還要注意一點，就是在Vim當中不使用兩個斜線`/`來宣告使用regexp，而是使用`\\v`切換模式來進行宣告，所以跟文章一開始使用的兩個例子稍有不同。\n\n若要進行取代，先複習一下Vim的取代指令：\n\n```\n:%s/要搜尋目標/取代內容/g\n```\n\n以下簡單說明用法。\n\n\n\n>1. %代表搜尋整個檔案\n\n>2. s代表開始進行取代功能(substitute)\n\n>3. 第一個斜線是分隔線，後方是搜尋目標\n\n>4. 第二個斜線是分隔線，後方是取代內容\n\n>5. 第三個斜線是代表結束取代內容的輸入\n\n>6. g代表每個找到的目標都取代\n\n>\n\n依照上方的模式，我們可以輸入：\n\n```plain\n:%s/\\v\\w+$//g\n```\n\n`\\v\\w+$`是我們的搜尋目標，因此填入兩個分隔線中間。另外，我們是要刪除所有姓氏，所以在取代內容的部份就輸入空白，直接用兩個分隔線帶過。\n\n這樣我們就在Vim中完成一個非常直覺的regexp搜尋取代啦！依照這個方式我們同樣也可以進行其他的regexp搜尋功能。\n\n## 教學資源\n\n1. [Derek Banas的YouTube教學三部曲](https://www.youtube.com/watch?v=DRR9fOXkfRE)：我個人很推這三部影片，很初級，只要在Vim當中跟著他操作一遍，大概就知道可以用在哪些地方了。\n\n2. [Vim Regular Expressions](http://vimregex.com/)\n\n3. [「三色傑克」的部落格文章](http://three-colors.blogspot.tw/2008/06/vim-regular-expression.html)：以上兩篇比較屬於瀏覽性質，大概看過去即可。如果有實際運用情況需要查詢，Google還是你最好的夥伴。\n\n4. [Regex101](https://www.regex101.com/)：所有練習都可以在這個互動式的編輯介面實作，旁邊還會有用法說明。\n\n5. [Tuts+](https://code.tutsplus.com/courses/regular-expressions-up-and-running)：這是我最推的教學資源，不過是付費的，Jeffery Way這個人雖然長相和講話聲音搭不太起來，但他說話非常清楚，內容也很有條理，我很愛。之前是看他的[Sublime Text 2](https://code.tutsplus.com/courses/perfect-workflow-in-su\u008B互動式的編輯介面實作，旁邊還會有用法說明。\n", slug: "20150222-vim-regular-expression", category_id: 9, author_id: nil, display_date: "2015-02-22", is_public: true, video_embed: nil},
  {title: "努力成為打字超快的工程師！", content: "![](https://farm1.staticflickr.com/178/441037582_cfdf182b70.jpg)\n\n\n\n每次看到其他工程師能夠用超快的速度打字，就非常羨慕。我認為「打字」是一個很基本，卻很難練習的技能。儘管在學習程式語言的過程中，已經大量使用英文打字，但若沒有刻意練習，似乎就有一道門檻在那邊，常常需要低頭去看按鍵，降低效率。尤其最近切換到Vim編輯器，更是高度倚賴鍵盤而非滑鼠。\n\n一般不看鍵盤直接打字稱為「盲打」(touch typing)，對於長期使用電腦的現代人來說好處多多，中文使用者因為長期使用BBS、MSN、Facebook、Line及各種聊天軟體的緣故，注音打字速度普遍都有一定水準，但對於英文熱鍵的操作就水準不一了。例如在Word當中要將段落文字加粗，可能連按Ctrl(CMD) + B 都需要低頭看鍵盤才能操作。大部分使用者對於英打的練習卻普遍不夠(拼音和嘸蝦米的使用者可能比較沒有這個困擾)。\n\n身為一個工程師，英打速度更是不可或缺的一個技能，除了撰寫程式碼以外，格式的調整也是大量倚賴鍵盤。啥？你都用滑鼠調整嗎？身為一個工程師，大家應該都會慢慢養成手就是放在鍵盤上的習慣，如果能不用滑鼠，對於工作效率絕對是一個大幅提昇。在一篇Coding Horror上的文章「[We Are Typists First, Programmers Second](http://blog.codinghorror.com/we-are-typists-first-programmers-second/)」就說到，開發者對於打字一定要熟悉，那無關乎任何程式語言、程式邏輯，而是一個基本的技能，最重要的是我們在工作時可以減少實作的時間。\n\n在逐漸摸索當中，以下有三個蠻推薦的學習資源：\n\n## [Typing.com](http://www.typing.com/)\n\n非常酷的打字教學網站，整個練習過程非常漫長，從最基本的home row到整篇艱難文章的練習，循序漸進。\n\n剛開始可能覺得無聊，但到了某些地方，就會發現自己的弱點。例如我的小拇指非常不靈活，而有些練習就是刻意要用小拇指瘋狂在幾個按鍵之間來回，這時候才知道自己在那些地方真的是很冏。\n\n個人最大心得：`要有耐心！`順的地方就讓他跳過去，錯很多的地方一定要反覆按「retake exercise」讓自己對那幾個單字的拼湊、手指的移動方式更熟悉。而且務必要讓手指放在指定的地方，不能左手去按右手負責的按鍵，也不能讓中指去按無名指負責的按鍵，這才是最值得我們練習、進步的地方。\n\n建議註冊，每次練習都先登入，比較知道自己練習進度。\n\n## [Typing.io](https://typing.io/)\n\nTyping.io是專門設計給程式設計師的打字練習網站，其中有非常多的source code可以練習，有基本的分析工具。如果要有較好的分析和追蹤工具，就需要付費。如果已經熟練所有基本的按鍵配置，建議可以來這邊練練招，畢竟程式語言和一般英打有一個很重要的差異：`程式語言有超多標點符號和排版`，一般打字可以讓我們知道哪顆按鍵在哪裡，但如果要熟悉開發者的工作方式，還是得在程式上多練習。\n\n很酷的是，除了各種程式語言的原始碼可以選擇之外，還可以自行上傳自己的code進行練習。個人認為比較可以改進的地方就是他並沒有需要我們用tab和額外的enter鍵進行排版，可以直接順打下去，而畢竟那也是程式開發時很需要的一環，如果有的話更可以模擬一般開發的流程。\n\n## [ShortcutFoo](https://www.shortcutfoo.com/)\n\n這個網站純粹是練習編輯器的熱鍵，聽起來好像沒什麼，但本人實測以後，發現要快速的執行熱鍵還真的是個問題，儘管腦袋裡想著，卻需要花額外一秒去想「這個功能是什麼熱鍵？」噗，聽起來好像蠻遜的，假如你跟我一樣對於編輯器熱鍵不太熟悉，也可以來這個網站試試。除了最基本的Command Line和Git以外，也包含Vim、Sublime Text、TextMate、XCode等大家常用的編輯器，甚至有Gmail和Chrome Dev Tools的熱鍵練習。如果你有常用的工具，請務必來這裡熟練一下。\n\n## 打字快速有什麼好處？\n\n[Learning Keyboarding](https://adamfortgo.wordpress.com/2014/06/25/benefits-of-touch-typing-skills/)上有一篇文章寫出了八個盲打的好處，但最重要的兩點就是「速度」和「心情」，一來是不用一直看鍵盤，二來是不會節奏被打亂。\n\n如果你已經對於鍵盤相當熟悉，也推薦例如Mac的[Alfred](http://www.alfredapp.com/)、[Vinium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb)等系統輔助工具，不需要滑鼠即可操作系統及瀏覽器。", slug: "20150224-improve-typing-speed", category_id: 5, author_id: nil, display_date: "2015-02-24", is_public: true, video_embed: nil},
  {title: "RSpec-Rails當中自訂methods及helpers", content: "\n在RSpec當中，常常會有些瑣碎的東西需要重複輸入，尤其是unit test，如果能夠包成helper methods，在不同檔案間重複利用，是再好不過的事情。以下提供兩個簡便的方法，可以撰寫專門給RSpec使用的methods，不會被Rails app本身觸發到。\n<!-- more -->\n## 1. 定義為Module\n\n最快也最簡便的方法，就是在`rails_helper.rb`或`spec_helper.rb`裡面定義這些methods，這樣就不用在每一個RSpec檔案當中重新載入(畢竟每次都要`require 'rails_helper'`就已經夠煩了)。\n\n例如要測試model之間的關係，我們會在測試當中這樣寫：\n\n```ruby\nrequire 'rails_helper'\n\nRSpe.describe User, :type => :model do\n  it \"has_many posts\" do\n    association = User.reflect_on_association(:post)\n    expect(association.macro).to eq(:has_many)\n  end\nend\n```\n\n當然，只要稍微複雜一點的網站或應用程式，這樣的敘述就會變得非常冗長。假如我們在一個model當中寫了20個這樣的測試，其實對可讀性來說非常沒有幫助。這時，可以把這個method包含到helper中，寫成這樣：\n\n```ruby\nmodule CustomHelpers\n  def expect_relation(model, relation, target)\n    association = model.reflect_on_association(target)\n    expect(association.macro).to eq(relation)\n  end\nend\n```\n\n包好之後，再重新調整原本的寫法：\n\n```ruby\nRSpe.describe User, :type => :model do\n  it { expect_relation(User, :has_many, :posts)}\nend\n```\n\n原本長得要命的兩句話，縮減成簡易又好懂的一句話，這樣就算連續測試10個以上的model relation，code也會乾淨簡潔。\n\n要將helpers納入測試當中，要進入`rails_helper.rb`或`spec_helper.rb`當中添加，筆者個人比較傾向於前者。接著在最前面幾行加上：\n\n```ruby\nrequire './spec/custom_helpers'\n# 檔名端看如何命名，個人會命名為cusom_helpers.rb\n```\n\n接著在下方的RSpec設定當中添加：\n\n```ruby\nRSpec.configure do |config|\n  config.include CsutomHelpers\n  # 僅添加此行即可\nend\n```\n\n就可以順利在測試中使用該module內包含的methods。\n\n當然，這個方法在[官方文件](https://www.relishapp.com/rspec/rspec-core/docs/helper-methods/define-helper-methods-in-a-module)上也有非常詳細的說明。\n\n## 2. 定義為shared_context\n\n如果用module的方式，那每一個測試都會自動載入該module。假如我們不希望每次都載入該module呢？這時就可以使用`shared_context`來指定要使用的helpers，shared_context的方法稍嫌囉嗦，但如果有特定method只希望其中幾個測試可以使用，那包在shared_context當中可以較為精確。\n\n首先在`spec`資料夾底下開一個`contexts`資料夾，裡面建立一個`helpers.rb`檔案。\n\n```\nRSpec.shared_context \"custom_helpers\" do\n  def my_helpers\n    # ...\n  end\nend\n```\n\n定義完成以後，shared_context運作的方式是需要在每個測試當中將context指定納入，才會可以使用，以確保只有在需要用的時候再呼叫這些methods。以剛剛的`User` model為例，寫法變成：\n\n```ruby\nrequire './spec/contexts/custom_helpers'\n\nRSpe.describe User, :type => :model do\n  include_context \"custom_helpers\"\n  # 開始用helper寫code\nend\n```\n\n除了讀取檔案之外，也要特別指定`include_context`才行。如果`require`檔案嫌麻煩，也可以整理到`rails_helper`檔案當中，這樣就不需要每次都特別`require`進來。\n\n[官方文件](https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-context)也有詳細說明Shared Context要如何使用。", slug: "20150320-custom-helpers-in-rspec", category_id: 6, author_id: nil, display_date: "2015-03-20", is_public: true, video_embed: nil},
  {title: "RSpec-Rails 針對module進行unit test", content: "\n本文概要：在RSpec describe中載入module必須寫成`MyClass.new { include MyModule }`\n\n\n\n若使用RSpec(v3.2)對Rails進行測試，不免俗要針對各種module進行unit test，尤其是helper、service object、或是各種model及controller當中的concern。不過問題來了，要如何在測試當中載入module？小弟一直以為方式是一樣的，但殊不知，在這裡也卡關許久。\n\n`rspec-rails`這個gem library針對helper module有提供非常簡便的載入方法，我們的測試會寫成這樣：\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe AppHelper, :type => :helper do\n  # 測試內容\nend\n```\n\n可以注意到`:type => :helper`這個敘述，等於直接載入了helper的內容，我們無需再另外考慮其他因素。\n\n不過這裡有個陷阱，也就是並非所有module都可以這樣載入。如果我們有個service object檔案是`greeter.rb`包含以下內容：\n\n```ruby\nmodule Greeter\n  def hello\n    \"hello world\"\n  end\nend\n```\n\n假如我們用同樣的邏輯思考，在測試檔案`greeter_spec.rb`中寫：\n\n```ruby\nrequire `rails_helper`\n\nRSpec.describe Greeter do\n  it { expect(Greeter.new.hello).to eq(\"hello world\") }\nend\n```\n\n這樣寫會產生`NoMethodError`，因為這樣預設的載入方法只能載入class，如果要載入module，必須跟class綁在一起，所以我們要載入有include該module的class(啥？你module只有單獨用嗎？那應該改成叫做class才對吧！)\n\n假如我們有個controller使用該module例如：\n\n```ruby\nclass AppController < ApplicationController\n  include Greeter\nend\n```\n\n那在spec檔案中就可以改寫如下：\n\n```ruby\nrequire `rails_helper`\n\nRSpec.describe AppController.new { include Greeter } do\n  it { expect(AppController.hello).to eq(\"hello world\") }\nend\n```\n\n這樣就可以囉！但需要注意兩個地方：\n1. 要用`AppController.new { include Greeter }`\n2. `AppController.hello`代表需要用controller來啟動module中的method，而非使用module\n\n說實在，這樣繞道有點遠，本人也還在想有什麼比較簡便的方法來載入module。大家有建議歡迎提供，謝謝。\n\n2009年時就已經存在這個寫法：[StackOverflow](http://stackoverflow.com/questions/1542945/testing-modules-in-rspec)", slug: "20150327-rspec-rails-testing-module", category_id: 6, author_id: nil, display_date: "2015-03-27", is_public: true, video_embed: nil},
  {title: "Ruby Script 基本檔案操作", content: "\n![](https://farm9.staticflickr.com/8689/17003243162_5c3666a0de_m.jpg)\n\nRuby除了web以外，最常使用的部份應該就是寫腳本語言(scripting)，不外乎是一些程式自動化、佈署、系統優化等工作。各種系統管理人員的職缺都會要求至少會一種scripting語言，除了基本的bash以外，perl、python、ruby都是很常見的選擇。\n\n雖然本人主要是開發Web，但最近接觸一些Ruby的scripting覺得很有趣，跟大家分享一些基本指令。\n\n\n\n## Ruby Script 執行\n\n系統如果有安裝Ruby，就直接在terminal底下新增`.rb`結尾的新檔，要執行時直接輸入`ruby filename.rb`即可。\n\n## 檔案新增、修改、刪除\n\nRuby當中最主要掌管檔案的是`File`、`Dir`、`FileUtils`這三個class，在[RubyDoc](http://ruby-doc.org/core-2.1.5/File.html)上都有非常詳盡的解說。不過也因為太詳盡了，這邊簡單說明幾個最常用的。\n\n#### 1. 新增、寫入\n\n```ruby\n# 只要把以下keyword的地方替換，就可以新增、編輯檔案，並寫入內容\nFile.new(\"檔案名稱\", \"變數\")\nFile.open(\"檔案名稱\", \"變數\") {|file| file.write(\"內容\")}\n# 後方的變數三個最常用的，如果你是新增檔案的話，不管哪個變數都沒差：\n# \"w\"：若有檔案則打開原檔，清空內容，從頭開始寫入。\n# \"a\"：若有檔案則打開原檔，將內容加在最後面。\n# \"r\"：若有檔案則打開原檔，將內容加在最前面。\n\n# 打開一個\"package.json\"並寫入一個JSON物件\nFile.open(\"package.json\", \"w\") {|file| file.write(\"{'hello': 'world'}\")}\n```\n\n#### 2. 讀取\n\n```ruby\n# 將內容讀取至content變數當中\ncontent = File.read(\"檔案名稱\")\n\n\n# 組合技：從一個檔案讀取特定內容，寫到另一個檔案當中\nrequire 'json'\ncontent = File.read(\"package.json\")\nobject = JSON.parse(content)\nFile.open(\"file.txt\", \"r\") { |file| file.write(\"Article Title: \" + object[\"title\"] + \"\\n\") }\n# 只插入title屬性至txt檔案第一行\n```\n\n#### 3. 刪除\n\n```ruby\nrequire 'fileutils'\n# 一般Ruby並不需要特別require 'fileutils'，如果是在irb之類的環境才要執行。\n\nFileUtils.remove \"filename.txt\"\n```\n\n#### 4. 指定路徑\n\n```ruby\n# 一般來說我們不一定在哪個地方執行檔案，所以有時需要使用絕對路徑\nFile.read(\"~/path/to/the/file.txt\")\n\n# 有時我們也不知道檔案在哪，需要相對路徑\nFile.expand_path(\"file.txt\")\n# => \"/Users/Motion Express/path/to/the/file.txt\"\n\n# 不過File.expand_path有一個很弔詭的地方，就是他吃兩個參數\n# 如果只有一個參數，就只列出該檔案的絕對路徑\n# 不過如果有兩個參數，他就會先讀取第二個檔案的絕對路徑，接著從該檔案開始讀取第一個參數的路徑\nFile.expand_path(\"sub-folder/index.html.erb\", \"folder/Gemfile\")\n# => 他會先抓取第二個參數，先讀出： \n# => \"/Users/Motion Express/path/to/folder/Gemfile\"\n# => 接著才從這個Gemfile開始抓第一個檔案的位置： \n# => \"/Users/Motion Express/path/to/folder/Gemfile/sub-folder/index.html.erb\"\n```\n\n`File.expand_path()`的[補充資訊](http://stackoverflow.com/questions/4474918/file-expand-path-gemfile-file-how-does-this-work-where-is-the-fil)\n\n#### 5. 檔案資訊\n```ruby\n# 判斷是檔案或資料夾\nFile.file? \"file.txt\"\n# => true\nFile.directory? \"file.txt\"\n# => false\nFile.file? \"folder\"\n# => false\nFile.directory? \"folder\"\n# => true\n\n# 不存在的檔案一定都是false (僅判斷存在與否也可以使用exist?)\nFile.file? \"no_such_file\"\n# => false\nFile.directory? \"no_such_file\"\n# => false\nFile.exist? \"no_such_file\"\n# => false\n\n# 取得附檔名\nFile.extname(\"file.txt\")\n# => .txt\n```\n\n## 資料夾\n\n#### 檢視\n```ruby\n# 目前所在的資料夾內容，回傳數列，其中數列前兩位的\".\"和\"..\"是系統預設。\nDir.entries(\".\")\n# => [\".\", \"..\", \"file.txt\", \"folder\"]\n\n# 回傳上一層資料夾的內容\nDir.entries(\"..\")\n# 不是資料夾會產生錯誤\nDir.entries(\"no_such_folder\")\n# => Errno::ENONET: No such file or directory\n```\n\n#### 編修\n\n```ruby\nrequire 'fileutils'\n\n# 單純的新增\nDir.mkdir(\"folder\")\n# 刪除\nFileUtils.rm_rf(\"folder\")\n# 連同內容一起複製\nFileUtils.copy_entry(\"folder\", \"another_folder\")\n\n# 組合計：在資料夾中只保留要的內容\nwanted_files = [\"package.json\", \"file.txt\"]\nDir.entries(\"folder\").each do |entry|\n  if File.file? entry\n    FileUtils.remove entry unless wanted_files.include? entry\n  end\nend\n```\n\n這樣基本的功能就都有了，可以用scripting來快速的到處編輯檔案囉！\n\n圖片使用：[PenDragon 1966](http://pendragon1966.deviantart.com/art/Steampunk-Victorian-Executable-script-File-Icon-338193788)", slug: "20150402-basic-file-manipulation-in-ruby", category_id: 7, author_id: nil, display_date: "2015-04-02", is_public: true, video_embed: nil},
  {title: "模擬class物件：Ruby當中Struct及OpenStruct的使用", content: "\n![](http://upload.wikimedia.org/wikipedia/commons/thumb/9/90/U_of_P_Stadium_-_2005-04-08_-_Construction_Pano.jpg/800px-U_of_P_Stadium_-_2005-04-08_-_Construction_Pano.jpg)\n\n為什麼我們需要模擬class物件呢？主要是一個物件有一些屬性需要存取，例如一篇文章`Post`底下需要`title`和`content`兩個屬性，用class來存取就是用牛刀殺雞，太過複雜，用簡單的`Hash`存取即可。\n\n但`Hash`其實在某些功能上過於簡單，存取的功能較不方便，假如要模擬的class更為複雜，就需要`OpenStruct`協助。\n\n\n\n## OpenStruct\n\n`OpenStruct`跟`Hash`一樣可以自帶屬性：\n\n```ruby\nrequire 'ostruct'\n# OpenStruct class不包含在原本Core物件當中，因此需要先require\n\nbook = OpenStruct.new(title: \"Harry Potter\", episodes: 7)\n\n# 讀取\nbook.title # => \"Harry Potter\"\nbook[:title] # => \"Harry Potter\"\nbook[\"title\"] # => \"Harry Potter\"\n\n# 存入\nbook.title = \"Holmes\" # => \"Holmes\"\nbook[:title] = \"Holmes\" # => \"Holmes\"\nbook[\"title\"] = \"Holmes\" # => \"Holmes\"\n\n# 隨意新增屬性\nbook.content = \"book content\"\nbook.content\n# => \"book content\"\n```\n\n以上可以看出，`OpenStruct`最方便的地方就是可以把屬性當做method來處理，可以直接指定屬性內容、直接讀取，且不管使用string或symbol當做key都通用。\n\n如果要把一整個Hash的數值import到裡面也很簡單：\n\n```ruby\nhash = Hash(:popularity => \"well-known\", :author => \"J.K. Rowling\")\n\nhash.each do |key, value|\n  book[key] = value\nend\n```\n\n`OpenStruct`的自由程度比較接近`Hash`，可以隨時新增及定義屬性，但沒辦法定義method。如果要加入method，則必須使用`Struct`。\n\n## Struct\n\n`Struct`稍微複雜一些，比較接近於原本class的使用。\n\n```ruby\n# 宣告時需要先行定義屬性\nBook = Struct.new(:title, :episodes)\nbook = Book.new(\"Harry Potter\", 7)\n\nbook\n# => #<struct Book title=\"Harry Potter\", episodes=7>\n\n# 讀取的方式與OpenStruct一樣自由\nbook.title\n# => \"Harry Potter\"\nbook[:title]\n# => \"Harry Potter\"\nbook[\"title\"]\n# => \"Harry Potter\"\n\n# 但無法隨時新增數值\nbook.content = \"book content\"\n# => NameError: no member 'content' in struct\n\n# 若在宣告Struct instance時，未帶入的變數會自動變成nil\nbook = Book.new(\"Harry Potter\")\nbook.episodes\n# => nil\n\n# 同樣的，宣告時帶入太多參數會產生錯誤\nbook = Book.new(\"Harry Potter\", 7, \"other stuff\")\n# => ArgumentError: struct size differs\n```\n\n但`Struct`很威的地方是可以在定義時帶入block，並定義method：\n\n```ruby\nBook = Struct.new(:title, :episodes) do\n  def excerpt\n    \"The book title is \#{title}, which contains \#{episodes} episodes.\"\n  end\nend\n\nbook = Book.new(\"Harry Potter\", 7)\nbook.excerpt\n# => \"The book title is Harry Potter, which contains 7 episodes.\"\n```\n\n## 實際應用\n\n我自己最常用於寫Rails測試的時候使用Struct，例如撰寫RSpec的unit test要將其他class物件使用mock區隔開來。\n\n#### 原本的code\n```ruby\nclass Post < ActiveRecord ::Base\n  def duplicate\n    Tool.new.duplicate\n  end\nend\n```\n\n一般撰寫unit test，為求獨立測試，所以會將其他class物件隔離，所以我們就用`Struct`將上方的`Tool`這個class給mock掉。\n\n#### 測試code\n```ruby\nrequire 'spec_helper'\ndescribe Post do\n  it \"#duplicate\" do\n    stub_const(\"Tool\", Struct.new(){\n      def duplicate\n        \"It is duplicated!\"\n      end\n    })\n    expect(subject.duplicate).to be_truthy\n  end\nend\n```\n\n執行時，由於`Tool`這個class已經被`stub_const`，所以就不會去讀取原本的class內容，而是讀取我在測試中設定的`Struct`，並回傳`\"It is duplicated!\"`字串。成功的執行了這個unit test！\n\n## 效能\n\n在效能比較上，`Struct`和`OpenStruct`有非常大的差異。如[StackOverflow上這篇比較所述](http://stackoverflow.com/questions/1177594/ruby-struct-vs-openstruct#answer-4459132)，可以看出在非常簡單的物件存取上，大概會有5~6倍的效能差異。如果在Application內實際應用大量的OpenStruct，可能會有效能的問題，建議優先refactory為`Struct`物件。\n\n延伸閱讀：[Logical Bricks](http://community.logicalbricks.com/node/235)\n圖片來源：[WikiMedia](http://commons.wikimedia.org/wiki/File:U_of_P_Stadium_-_2005-04-08_-_Construction_Pano.jpg)", slug: "20150406-ruby-struct-and-ostruct", category_id: 7, author_id: nil, display_date: "2015-04-06", is_public: true, video_embed: nil},
  {title: "require、require_relative是什麼意思？差在哪？", content: "\n![](https://farm9.staticflickr.com/8826/17066146512_427c093763_o.jpg)\n\n雖然Ruby本身已經有非常多的功能，但還是常常在Ruby檔案中看到`require 'something'`，例如要使用`JSON.parse`就必須先`require 'json'`，如果不require就無法使用這些功能。到底這些在檔案最開頭的玩意兒代表什麼意思呢？如果不require又會怎麼樣？\n\n\n\n## require最常見的意義\n\nRuby內建有許多library，在執行`.rb`檔案時就已經包含在程式內，包括常用的`File`、`Date`等等三不五時就會出現的class，這些因為大家常用，就直接在開始執行`.rb`程式時包含在Ruby內。但如果載入Ruby時就把所有libraries都放進去，啟動時間會太久，因此Ruby將許多比較沒那麼常用到的class抽出，需另外require。很常見的例子是`require 'digest'`，是一個專門產生亂數、轉碼的工具：\n\n```ruby\nDigest::SHA256.hexdigest(\"HelloWorld\")\n# => NameError: uninitialized constant Digest\n\nrequire 'digest'\nDigest::SHA256.hexdigest(\"HelloWorld\")\n#=> \"872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4\"\n```\n\n由於平常不一定會使用到`digest`的功能，因此要使用必須要require，以節省資源。\n\n## 使用require的理由\n\n`require`之所以會用來載入ruby的libraries，是基於兩個原因：\n\n##### 1. `require`的預設載入路徑會讀取各式ruby gems及libraries，接著才是載入檔案\n\n在[官方文件](http://ruby-doc.org/core-2.1.2/Kernel.html#method-i-require)中可以看到，require會預先搜尋`$LOAD_PATH`，這個東西是定義在Ruby的設定當中，在任何環境下輸入`$LOAD_PATH`就會看到目前的設定內容：\n\n```ruby\n$LOAD_PATH\n#=> [\"/Library/Ruby/Site/2.0.0\", \n#    \"/Library/Ruby/Site/2.0.0/x86_64-darwin13\", \n#    \"/Library/Ruby/Site/2.0.0/universal-darwin13\", \n#    \"/Library/Ruby/Site\", \n#    ...(省略)]\n```\n\n以Mac OSX 10.9內建的Ruby為例，會從最上方開始搜尋到最下方，可以看出都是針對系統library進行搜尋。\n\n##### 2. `require`在同一個環境下只會載入一次，如果出現第二次`require`就不會載入。\n\n若在同一個環境下require兩次相同的內容，則不會重複載入，節省資源。\n\n```ruby\nrequire 'digest'\n#=> true\nrequire 'digest'\n#=> false \n```\n\n## 使用require讀取檔案\n\n只要在`require`後方加上絕對路徑，require也可以用於讀取檔案，例如：\n\n```ruby\nrequire File.expand_path(\"../another_file\", __FILE__)\n# 或\nrequire \"\#{Rails.root}/app/models/another_file\"\n```\n\n看似有點麻煩，但必須如此。因為如果只寫檔案名稱例如`require 'another_file'`他並不會搜尋我目前的資料夾，也不會搜尋該檔案所處的資料夾。一定要用檔案的絕對路徑，才可以用require的方式來讀取其他檔案。\n\n另外一種作法是加上\"./\"代表是相對於你目前執行檔案的資料夾。例如`require './file'`也可以載入目前資料夾內的檔案。但這種作法有一個壞處，就是跟你執行檔案的地點會有關係，例如：\n\n```ruby\n# ~/folder/file_1.rb\nputs \"success\"\n\n# ~/file_2.rb\nrequire './folder/file_a'\n```\n\n看似完美的對比，假如我在使用者根目錄資料夾`~/`底下執行`$ruby file_2.rb`會皆大歡喜的看到\"success\"訊息。但如果我移動到`folder`資料夾內，從內部執行`$ruby ../file_2.rb`就會發生無法require的慘劇，因為在file_2.rb當中是根據我目前的位置來進行require，會試圖在我所處的\"folder\"資料夾內搜尋\"file_1.rb\"這個檔案，當然結果就是找不到。\n\n## 讀取檔案別忘了require_relative\n\n假如我們非常確定要require檔案的相對關係，那可以直接用乾淨漂亮的`require_relative`來處理。就以剛剛的例子來說，可以寫成：\n\n```ruby\nrequire_relative '../file_1.rb'\n```\n\n基本上`require_relative`並不會搜尋library，也完全不建議這樣做，寫起來很醜。在這樣方便的方法之下，我個人都是用`require`來讀取library和gem，而用`require_relative`來讀取其他檔案，比較不容易搞混。\n\n## 延伸閱讀\n\n[Stackoverflow上對於require的討論](http://stackoverflow.com/questions/3672586/what-is-the-difference-between-require-relative-and-require-in-ruby)\n\n[官方文件對於require的說明](http://ruby-doc.org/core-2.1.2/Kernel.html#method-i-require)\n\n[$LOAD_PATH解釋](http://stackoverflow.com/questions/10837900/how-is-the-default-ruby-load-path-determined)\n\n[對於各種load及require方式的分析](https://practicingruby.com/articles/ways-to-load-code)", slug: "20150407-ruby-require-require-relative-load", category_id: 7, author_id: nil, display_date: "2015-04-07", is_public: true, video_embed: nil},
  {title: "【影片教學】RSpec技術分享系列1 - 超基本使用方法", content: "\n## 概要\n\n1. 如何安裝RSpec\n2. 如何用單一檔案執行RSpec\n3. `describe`及`it`用法簡介\n4. 兩個使用案例\n\n\n\n<iframe src=\"//fast.wistia.net/embed/iframe/54l4tdrvj4?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen ></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n## 參考資料\n\n[http狀態代碼](http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81)\n\n## 筆記\n\n版本\n\n\n>Ruby版本： 2.1.2\n\n>RSpec版本： 3.2.0\n\n>\n\n安裝\n\n```cmd\n$ gem install rspec\n$ gem install httpclient\n```\n\n簡易數學\n\n```ruby\nrequire 'rspec'\n\ndescribe \"Math\" do\n  it 'do basic math' do\n    expect(1+1).to eq(2)\n  end\nend\n```\n\n執行\n\n```cmd\n$ rspec basic_spec.rb\n```\n\n薪水分類\n\n```ruby\nrequire 'rspec'\n\nclass Divider\n  def salary_divide(salary)\n    case salary\n    when 0..300000\n      \"年收入30萬以下\"\n    when 300000..600000\n      \"年收入30~60萬之間\"\n    when 600000..900000\n      \"年收入60~90萬之間\"\n    else \n      \"年收入90萬以上\"\n    end\n  end\nend\n\ndescribe \"salary\" do\n  it 'is categorized successfully based on input' do\n    expect(Divider.new.salary_divide(250000)).to eq(\"年收入30萬以下\")\n    expect(Divider.new.salary_divide(290000)).to eq(\"年收入30萬以下\")\n    expect(Divider.new.salary_divide(358000)).to eq(\"年收入30~60萬之間\")\n    expect(Divider.new.salary_divide(540000)).to eq(\"年收入30~60萬之間\")\n    expect(Divider.new.salary_divide(744000)).to eq(\"年收入60~90萬之間\")\n    expect(Divider.new.salary_divide(950000)).to eq(\"年收入90萬以上\")\n  end\nend\n```\n\n確認連線正常\n\n```ruby\nrequire 'rspec'\nrequire 'httpclient'\n\ndescribe \"connections\" do\n  it 'are stable' do\n    expect(HTTPClient.new.get(\"http://rspec.info/\").status).to eq 200\n    expect(HTTPClient.new.get(\"http://rspec.info/\").body).to include(\"Behaviour Driven Development in Ruby with RSpec\")\n    expect(HTTPClient.new.get(\"https://evernote.com/intl/zh-tw/\").status).to eq 200\n    expect(HTTPClient.new.get(\"https://www.linode.com/\").status).to eq 200\n  end\nend\n```", slug: "20150409-rspec-training-series-1", category_id: 7, author_id: nil, display_date: "2015-04-09", is_public: true, video_embed: nil},
  {title: "用Node.js撰寫CSS測試", content: "\n![](https://farm9.staticflickr.com/8722/16931470439_12da1f3276_o.jpg)\n\n目前主流CSS的測試方法都是「截圖比對」，這跟一般寫測試的邏輯不太一樣。\n\n因為撰寫CSS測試是一件拐彎抹角的事情，主要是測試大多以「是否完成某個目的」為判斷基準。但對於CSS測試來說，CSS完全是排版的東西，很難有一個目的來判斷，例如我們可以測試`1+1是否等於2`但卻很難測試`這個div是否距離左邊3px`，一來會有優先權的問題導致某些設定好的數值無法發揮效果，二來又會有z-index等不同的因素導致DOM互相遮蔽。\n\n因此，目前最主流的測法就是用截圖，直接用最後的執行結果畫面當做比對基準，先截一張圖當做標準，再用第二張圖來比對。\n\n\n\n## BackstopJS demo\n\n這邊簡單用`BackstopJS`當做範例，示範要如何進行CSS測試。由於要測試CSS一定都跟前端有關，所以目前有在檯面上的CSS測試framework幾乎都是用javascript所寫。[CSS-Tricks](https://css-tricks.com/automating-css-regression-testing/)上有非常詳盡的說明，但有點過於囉嗦，我這邊稍微整理一下。\n\n## 安裝\n\n這部份最囉嗦，因為本人對NodeJS並沒有很熟，導致踩到很多地雷。首先要確定所有相關套件都有裝上。\n\nNodeJS\n\n```cmd\n$ brew install node\n$ node --version (確認有安裝成功)\n```\n\nBower\n\n```cmd\n$ npm install -g bower\n$ bower --version\n```\n\nPhantomJS\n\n```cmd\n$ npm install -g phantomjs\n$ phantomjs --version\n```\n\nCasperJS\n\n```cmd\n$ npm install -g casperjs\n$ casperjs --version\n```\n\nGulp\n\n```cmd\n$ npm install -g gulp\n$ gulp --version\n```\n\n如果你的brew不是安裝在root底下，所有npm要安裝的內容都會需要加上`sudo`，這比較是個人習慣問題，沒有強迫的方式。\n\n\n\n>這邊要提醒一下，如果沒有加上`-g`，就會在你當前的資料夾底下新增`node_modules`資料夾，並把套件裝在裡面，這會造成之後的安裝有問題。因為npm管理套件是以資料夾為單位，如果你的上層已經有`node_modules`資料夾，他會把目前的資料夾當做子資料夾，而去抓上層的`node_modules`資料夾。請務必確認`node_modules`資料夾只會存在於你的專案資料夾內，就像你不會把自己的系統根目錄放一個`.git`資料夾一樣。\n\n>\n\n## 產生專案設定檔\n\n要到你的一個專案資料夾內(開一個新的空專案也可)，在專案的根目錄底下執行(請注意執行的資料夾位置，這會影響到後續的步驟)：\n\n```cmd\n$ bower install backstopjs\n$ cd bower_components/backstopjs\n$ npm install\n$ gulp genConfig\n```\n\n順利的話會出現一個`backstop.json`的檔案，但他並不會出現在目前的資料夾內，而是出現在專案資料夾的根目錄內，所以請執行：\n\n```cmd\n$ cd ../..\n$ ls\n```\n\n順利的話就會看到`backstop.json`檔案。\n\n## 設定\n\n設定檔分為兩塊，首先看到`viewports`的部份：\n\n```javascript\n\"viewports\": [\n  {\n    \"name\": \"phone\",\n    \"width\": 320,\n    \"height\": 480\n  },\n  {\n    \"name\": \"tablet_v\",\n    \"width\": 568,\n    \"height\": 1024\n  },\n  {\n    \"name\": \"tablet_h\",\n    \"width\": 1024,\n    \"height\": 768\n  }\n]\n```\n\n這部份代表你要測試的裝置列表，這三個裝置都是手機和平板，你可以自行加上桌機的寬高，記得不要把json格式打亂，要將所有裝置都塞在viewports數列內。\n\n```javascript\n\"scenarios\": [\n  {\n    \"label\": \"http://getbootstrap.com\",\n    \"url\": \"http://getbootstrap.com\",\n    ,\"hideSelectors\": [\n    ]\n    ,\"removeSelectors\": [\n    ]\n    ,\"selectors\":[\n      \"nav\"\n      ,\".jumbotron\"\n      ,\"body .col-md-4:nth-of-type(1)\"\n      ,\"body .col-md-4:nth-of-type(2)\"\n      ,\"body .col-md-4:nth-of-type(3)\"\n      ,\"footer\"\n    ],\n    \"readyEvent\": null,\n    \"delay\": 500\n  }\n]\n```\n\n這邊有幾個可以修改的部份，但最主要會用到的有幾個：\n\n\n\n>1. `label`：你的測試要叫什麼名字\n\n>2. `url`：抓取的位址\n\n>3. `hideSelectors`：主要用於測試動態內容，因為許多網頁DOM會從資料庫抓檔案，動態內容的截圖必定會比對錯誤，所以我們可以隱藏動態內容顯示的地方。例如顯示隨機文章的欄位，我們要將文章內容隱藏，只擷取文章的外框，則可以填入css selector `\"div.container .post-content\"`，而在下面selector的欄位，填入`\"div.container\"`，這樣他就只會抓取container class的div，而會忽略裡面post-content class的div。\n\n>4. `removeSelectors`：如果網頁內的DOM會有無法預期的大小，例如隨機寬高，那這裡可以填入該元素，他便會設定該元素為`\"display: none\"`直接省略。同樣使用css selector寫。\n\n>5. `selectors`：使用的css selector名稱，可以用一般的`.`代表class、`#`代表id\n\n>.6 `delay`：進入網頁以後需要等待多久再開始抓取，一般預設的500其實已經足夠，除非網頁肥大或有許多ajax request需等待完成，這時才需要較久的時間。\n\n>\n\n預設的設定檔可以看到他會去`http://getbootstrap.com`抓取資料，假如我們依照自己的需求修改完成，這時在專案根目錄底下的`/bower_components/backstopjs`執行：\n\n```cmd\n$ gulp reference\n```\n\n\n>記得，如果執行的目錄位置不對，他會請你`npm install`，如果你已經裝過了，請確認執行的位置是否正確即可。如果不小心再npm install一次，會產生其他的`node_modules`資料夾，這些都會產生混淆和錯誤。\n\n>\n\n假如沒發生錯誤的話，這個指令會把要比對的資料先擷取圖片，存檔，當做判斷基準。這時再執行：\n\n```cmd\n$ gulp test\n```\n\n這時他會用`http://localhot:3001`開啟一個網頁，裡面就是我們的測試內容，他會逐一比對跟reference所抓的圖片是否有任何不同。\n\n## 其他\n\nCSS測試跟一般軟體測試最大的不同在於他沒有TDD，一定要先把網頁內容寫好，才能用截圖的方式產生reference。也就是說CSS測試最主要的功能是修改網站設計時，預防你改一個class設計卻因為剛好有其他DOM採用相同的class而爆掉。\n\n## 參考資料\n\n[CSS Selector寫法](http://www.w3schools.com/cssref/css_selectors.asp)\n[CSS-Tricks](https://css-tricks.com/automating-css-regression-testing/)\n[BackstopJS關方說明文件](https://github.com/garris/BackstopJS)\n\n## 圖片來源\n\n[Pixabay](http://pixabay.com/p-155121/?no_redirect)", slug: "20150411-css-testing", category_id: 2, author_id: nil, display_date: "2015-04-11", is_public: true, video_embed: nil},
  {title: "將Rails佈署(Deploy)到VPS上", content: "\n![](https://farm6.staticflickr.com/5326/17016985457_7c8a4f5d0d_c.jpg)\n\n一般來說，Rails佈署是非常麻煩的事情，尤其整個技術的變遷實在太過快速，很多網路上的資料都舊了。自己最近在研究佈署，發現很多資料都已經過期，在這邊彙整自己將Rails佈署到VPS上的心得。以下示範的是非常精簡的版本，沒有效能調教、沒有安全措施，基本上就只是個能動、稍微對Ruby增加一點彈性的佈署結果。如果有需要更深入的佈署，網路上有非常多關於主機調教的教材。\n\n\n\n\n\n>本機環境：Mac OSX 10.9\n\n>Capistrano版本：3.4.0\n\n>VPS主機：[Digital Ocean](https://www.digitalocean.com/)\n\n>遠端主機作業系統：Ubuntu 14.04\n\n>遠端Ruby版本：2.2.0\n\n>遠端Rails版本：4.1.2\n\n>遠端資料庫：mysql\n\n>Web Server：nginx\n\n>App Server：passenger\n\n>\n\n## 0.登入VPS\n\n首先，在Digital Ocean開啟一個新的droplet，這在任何VPS應該都相同，接著利用terminal的ssh登入該主機。\n\n```cmd\n$ssh root@111.222.333.444\n```\n\n請將`111.222.333.444`換成你的主機ip。\n\n## 1.切換至新的user\n\n所有事情用root來做，事後都會有權限的問題需要解決，因此登入後第一件事情就是開另一個user來用。\n\n```cmd\n$adduser motionex\n(新增user需要輸入密碼)\n$sudo usermod -aG sudo motionex\n$su motionex\n```\n\n請將`motionex`換成你想要的使用者名稱，第二步是給予該user root權限。\n\n## 2.安裝必要套件\n\n利用Ubuntu標準動作apt-get安裝必須要用的套件，內容繁多這邊就直接列表。\n\n```cmd\n$sudo apt-get update\n$sudo apt-get install build-essential libssl-dev libyaml-dev libreadline-dev openssl curl git-core zlib1g-dev bison libxml2-dev libxslt1-dev libcurl4-openssl-dev libsqlite3-dev sqlite3 mysql-common mysql-client libmysqlclient-dev mysql-server python-software-properties\n```\n\n沒有意外的話會下載及安裝許多套件，詢問是否安裝時按`Y`即可。另外安裝mysql時他會向我們詢問密碼，同樣輸入即可。\n\n## 3.安裝nginx\n\n一般來說也可以用apt-get安裝，但可能會安裝到過期的版本，這邊是用Railscast上另外新增repo的安裝方式。\n\n```cmd\n$sudo add-apt-repository ppa:nginx/stable\n$sudo apt-get -y update\n$sudo apt-get -y install nginx\n```\n\n如果安裝完成正確無誤，可執行：\n\n```cmd\n$sudo service nginx start\n```\n\n並打開瀏覽器，輸入主機的ip位置，就會出現Welcome to nginx的頁面。\n\n## 4.安裝node.js\n\n如同我們一般在Rails教學上所學到的，要執行Ruby，也要先安裝Node.js\n\n```cmd\n$sudo add-apt-repository ppa:chris-lea/node.js\n$sudo apt-get -y update\n$apt-get -y install nodejs\n```\n\n安裝完成以後輸入：\n\n```cmd\n$node -v\n```\n\n只要有出現版本號，就代表安裝成功。\n\n## 5.安裝rbenv\n\n許多教學為了避免安裝過多其他套件，導致離題，因此都是直接從Ruby官網提供的版本，利用make指令來安裝Ruby。但這未來會有一個比較麻煩的問題是如果要更新Ruby會比較麻煩。這邊安裝rbenv，要切換版本比較方便，且安裝過程也不麻煩。執行Railscast建議的rbenv-installer：\n\n```cmd\n$curl https://raw.githubusercontent.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash\n```\n\n正確的指令請參考[rbenv-installer官方repo](https://github.com/fesplugas/rbenv-installer)。如果指令有改，請以repo當中的為主。安裝完成以後請繼續執行：\n\n```cmd\n$nano ~/.bashrc\n```\n\n在這個檔案中，我們要在最前面加上一段rbenv指定要加上的code：\n\n```\nexport RBENV_ROOT=\"${HOME}/.rbenv\"\nif [ -d \"${RBENV_ROOT}\" ]; then\n  export PATH=\"${RBENV_ROOT}/bin:${PATH}\"\n  eval \"$(rbenv init -)\"\nfi\n```\n\n加上以後，按`ctrl + x`離開，並按大寫`Y`儲存，再按一下`Enter`確定儲存離開。這邊用的是nano編輯器，你也可以用自己喜歡的編輯器貼上code。接著執行：\n\n```cmd\n$source ~/.bashrc\n$rbenv --version\n```\n\n正確的話會出現版本號，代表安裝成功。接著安裝Ruby版本2.2.0：\n\n```cmd\n$rbenv bootstrap-ubuntu-12-04\n$rbenv install 2.2.0\n$rbenv rehash\n$rbenv global 2.2.0\n$ruby -v\n```\n\n正確無誤的話會看到Ruby版本顯示出來。\n\n另外，[ihower有說明直接安裝Ruby的方法](https://ihower.tw/rails4/deployment.html)，若不想安裝rbenv，也可參考他的內容，但本人一直安裝失敗，這可能跟人品有關。\n\n## 6.安裝passenger\n\n雖然Ruby自己有提供passenger的gem，但passenger需要sudo權限，必須要在sudo底下再安裝一個ruby，比較麻煩，權限也很容易混淆，因此我們改用apt-get來安裝。\n\n```cmd\n$sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7\n$sudo nano /etc/apt/sources.list.d/passenger.list\n```\n\n打開檔案以後，加入以下這行：\n```cmd\ndeb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main\n```\n\n接著用同樣方式離開nano編輯器，使用`ls`檢查該檔案的所屬人是誰，如果是你新開的帳號而非root，則我們要將該檔案的所有者改為root：\n\n```cmd\n$sudo chown root:root /etc/apt/sources.list.d/passenger.list\n$sudo chmod 600 /etc/apt/sources.list.d/passenger.list\n```\n\n接著從nginx外掛當中安裝passenger：\n\n```cmd\n$sudo apt-get update\n$sudo apt-get install nginx-extras passenger\n```\n\n## 7.確認Ruby路徑是否正確\n\n安裝完成以後，有可能會將Ruby的連結打亂，因此檢查一下Ruby的路徑：\n\n```cmd\n$which ruby\n```\n\n正確的結果：`/home/motionex/.rbenv/shims/ruby`\n錯誤的結果：`/usr/bin/ruby`\n`motionex`這個user名稱是我們在步驟1新增的，你電腦上顯示的會是你新增的名稱。\n如果很不幸的路徑錯了，那也可以用重建link的方式來修改：\n\n```cmd\n$sudo rm /usr/bin/ruby\n$sudo ln -s /home/motionex/.rbenv/shims/ruby /usr/bin/ruby\n```\n\n再一次提醒：`motionex`是我的使用者名稱，你顯示的會是你設定的使用者名稱。\n\n## 8.將passenger掛到nginx上\n\n打開nginx文件。\n\n```cmd\n$sudo nano /etc/nginx/nginx.conf\n```\n\n找到以下兩行：\n\n```\n# passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;\n# passenger_ruby /usr/bin/ruby;\n```\n\n將以上兩行的開頭`#`符號移除，並確認`passenger_ruby`所指向的ruby執行路徑是否正確，如果你不確定的話，可以再執行一次`which ruby`確認。\n\n## 9.將原本的伺服器port關閉\n\n這個步驟要做的事情是將原本我們在瀏覽器打開的`welcome to nginx`頁面關閉。在terminal中輸入：\n\n```cmd\n$sudo nano /etc/nginx/sites-available/default\n```\n\n找到以下兩行：\n\n```\nlisten 80 default_server;\nlisten [::]:80 default_server ipv6only=on;\n```\n\n將這兩行的前面加上`#`符號，註解掉，儲存以後伺服器就不會接收從預設的80 port進來的http request，再打開一次瀏覽器，應該會出現「無法顯示網頁」。\n\n## 10.建立我們要佈署的rails資料夾\n\n接下來我們要用同樣方式寫一個設定檔案，用來取代原本的設定檔。輸入：\n\n```cmd\n$sudo nano /etc/nginx/sites-available/rails\n```\n\n這個指令當中的`rails`可以是任何名字，只要記得即可。打開以後在裡面填入：\n\n```\nserver {\n  listen 80 default_server;\n  server_name www.mydomain.com;\n  passenger_enabled on;\n  passenger_app_env development;\n  root /var/www/rails/current/public;\n}\n```\n\n這邊有兩件事情需要注意：\n\n1. `server_name` 的地方，如果你沒有申請域名(例如www.domain.com)，這行可以省略。\n\n2. `root` 代表你的code放在哪，記得務必指向你rails資料夾當中的public資料夾。這邊的資料夾結構說明：\n\n\n> /var/www 是server預設的資料夾\n\n> /rails 是我們剛才的所設定的資料夾名稱，建議這邊的名稱和前面的資料夾名稱相同\n\n> /current 是capistrano佈署時所產生的資料夾，如果你沒打算用capistrano佈署，可以不用管這層的資料夾\n\n> /public 是rails當中的public資料夾，nginx這邊的設定必須指向一個public資料夾\n\n## 11.將網站設定啟用\n\n將剛剛的設定檔，設定一個link到nginx啟用網站的資料夾：\n\n```cmd\n$sudo ln -s /etc/nginx/sites-available/rails /etc/nginx/sites-enabled/rails\n$sudo nginx -s reload\n```\n\n重啟之後，這邊的設定就算完成了，接著要設定本機的rails app。\n\n## 12.本機安裝capistrano\n\n這邊回到本機，假設已經有一個準備好要佈署的專案(空專案也行)，安裝 gem capistrano：\n\n```ruby\ngroup :development do\n  gem 'capistrano-rails'\n  gem 'capistrano-passenger'\nend\n\n# 並加上稍後會使用的資料庫gem\ngem 'mysql2'\n```\n\n並且\n\n```cmd\n$bundle\n```\n\n完成之後，在專案的根目錄底下產生capistrano設定檔：\n\n```cmd\n$cap install\n```\n\n會產生一些設定檔。\n\n\n\n>注意：capistrano可能因為版本的更新而造成指令不同，請在[官方repo頁面](https://github.com/capistrano/capistrano)確認正確的指令。\n\n>\n\n## 13.設定capistrano\n\n接著進行設定，進入`config/deploy.rb`，以下兩行原本就存在，請改成你想要的設定：\n\n```ruby\nset :application, \"rails\"\nset :repo_url, \"git@bitbucket.org:motionex/rails.git\"\n```\n\n使用capistrano會搭配使用git，如果你的專案是不開放的，建議放到[Bitbucket](https://bitbucket.org/)，就不會變成public專案。否則放在github即可。\n\n回到設定檔中，以下是原本註解掉或不存在的設定，請刪除註解或補上：\n\n```ruby\nset :linked_files, fetch(:linked_files, []).push('config/database.yml', 'config/secrets.yml')\nset :linked_dirs, fetch(:linked_dirs, []).push('log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')\n\nrole :web, %w{motionex@111.222.333.444}\n```\n\n`motionex`及後方的ip請換成自己的設定及VPS ip。\n\n```cmd\ncap production deploy:check\n```\n\ncapistrano會開始幫你檢查及調整VPS上的設定，可能會需要你輸入密碼。\n\n首先會碰到的問題是你可能需要將本機的ssh key加到github或bitbucket上，才有可能進行佈署。\n[Bitbucket ssh文件說明](https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git)\n[Github ssh文件說明](https://help.github.com/articles/generating-ssh-keys/)\n\n如果你接下來看到一個錯誤訊息：\n\n```cmd\nmkdir:\ncannot create directory '/var/www/rails'\n: Permission denied\n```\n\n\n\n恭喜你，前面的部份都過關了，接下來請進入下一個步驟來解決這個問題。\n\n## 14.設定database.yml及secrets.yml\n\n這段有點囉嗦，如果你真的很不在乎安全性，那可以跳過這段。但基本上把db密碼和網站的hash直接存放到git是很怪的事情，容易受到有心人的攻擊，所以我們要直接在VPS上建立設定檔，而不從本機佈署上去。\n\n\n\n>如果你的`config/database.yml`及`config/secrets.yml`兩個已經push上去到repo過了，請加到`.gitignore`中，並且用`git rm --cache`指令來從repo當中刪除。\n\n>\n\n前一個步驟最後所產生的錯誤，是因為`/var/www`底下需要有sudo權限才能編修檔案。我們需要先在VPS上把幾個必須的結構建立起來，capistrano才能幫我們完成剩下的工作。\n\n請在回到VPS上，如果你的連線已經不見了，可重新用你的新帳號ssh連線回去，記得不要用root帳號。接著輸入：\n\n```cmd\n$cd /var/www\n$sudo mkdir rails\n$sudo chown motionex:motionex rails\n```\n\n最後一個指令是修改我們新開的資料夾權限為自己可以修改，以免佈署時權限不足，記得將`motionex`改為自己的使用者帳號。\n\n\n\n>只要有權限問題，記得用`ls -l`指令檢查權限，並用`chown`指令修改權限。\n\n>\n\n接著：\n\n```cmd\n$mkdir rails/shared\n$mkdir rails/shared/config\n$touch rails/shared/config/database.yml\n$touch rails/shared/config/secrets.yml\n```\n\n打開你在本機的config/secrets.yml檔案，整個複製起來，並且回到VPS上我們剛剛建立的secrets.yml檔案當中，整個貼上。\n\n而database.yml比較麻煩一點，因為我們要使用的是mysql資料庫，因此請在剛剛建立的database.yml當中寫入以下內容：\n\n```ruby\ndefault: &default\n  adapter: mysql2\n  encoding: utf8\n  username: root\n  password: my_password\n  host: 127.0.0.1\n  port: 3306\n\ndevelopment:\n  <<: *default\n  database: motionex\n\ntest:\n  <<: *default\n  database: motionex_test\n\nproduction:\n  <<: *default\n  database: motionex_production\n```\n\n其中的`my_password`請設定為你剛剛安裝mysql時所設定的密碼，而三個資料庫名稱，也可以隨意取。\n\n以上這個步驟是要把我們繞過git的檔案手動增加上伺服器上。\n\n兩個檔案都增加完成以後，再回到本機執行：\n\n```cmd\n$cap production deploy:check\n```\n\n正確無誤的話會看到完成檢查的訊息，此時可以正式執行：\n\n```cmd\n$cap production deploy\n```\n\n就會快樂的看到他把檔案丟上去了。\n\n## 15.Rails設定\n\n接下來的步驟大家就應該都很熟悉了，請連線到VPS並進入rails資料夾：\n\n```cmd\n$cd /var/www/rails/current\n$gem install bundler\n$bundle\n$rake db:create\n$rake db:migrate\n$sudo service nginx restart\n```\n\n這時再打開瀏覽器，就會看到熟悉的rails首頁啦！\n\n\n\n>問題：如果你是佈署空專案的話，會出現404頁面，請加上一個首頁，用以確認佈署成功\n\n>問題：如果有遇到db無法create的問題，請確定'mysql'和'mysql2'兩個gem都有安裝在VPS上，執行`$gem install 'mysql'`即可\n\n>問題：如果重開機以後瀏覽器顯示`Incomplete response received from application`，代表secrets的hash有問題，可用以下步驟解決：\n\n>1. 執行`$rake secret`\n\n>2. 複製產生的一長串hash\n\n>3. 到`/var/www/rails/current/config/secrets.yml`檔案當中，將原本production底下的secret_key_base換成新的hash即可。\n\n>\n\n如果有任何可以再精簡的地方或改善的地方，歡迎指正！\n\n## 參考資料\n\n[ihower Ruby on Rails實戰聖經](https://ihower.tw/rails4/deployment.html)\n\n[Digital Ocean官方教學](https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-passenger-and-nginx-on-ubuntu-14-04)\n\n[Railscast](http://railscasts.com/episodes/335-deploying-to-a-vps)\n\n## 圖片來源\n\nCC授權：[WikiMedia](http://en.wikipedia.org/wiki/Global_Positioning_System#/media/File:GPS_Satellite_NASA_art-iif.jpg)", slug: "20150421-deploy-rails-to-vps", category_id: 7, author_id: nil, display_date: "2015-04-21", is_public: true, video_embed: nil},
  {title: "文字溶解特效製作(第一部分)", content: "介紹特效工廠中《文字溶解》的特效。第一部分使用Ramp、CC Particle World、Lens Flare等效果製作背景。第二部分使用mask和Trapcode Particular效果搭配製作文字溶解和粒子。第三部分利用Time Remapping製作動力停滯效果，看起來就像駭客任務裡頭那樣~希望大家也來玩玩看喔~", slug: "ae-text-dissolve-1", category_id: 3, author_id: nil, display_date: "2010-11-29", is_public: true, video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/ErsMQ0eBhMY?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "文字溶解特效製作(第二部分)", content: "介紹特效工廠中《文字溶解》的特效。第一部分使用Ramp、CC Particle World、Lens Flare等效果製作背景。第二部分使用mask和Trapcode Particular效果搭配製作文字溶解和粒子。第三部分利用Time Remapping製作動力停滯效果，看起來就像駭客任務裡頭那樣~希望大家也來玩玩看喔~", slug: "ae-text-dissolve-2", category_id: 3, author_id: nil, display_date: "2010-11-29", is_public: true, video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/8ZoeghXSWdA?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "文字溶解特效製作(第三部分)", content: "介紹特效工廠中《文字溶解》的特效。第一部分使用Ramp、CC Particle World、Lens Flare等效果製作背景。第二部分使用mask和Trapcode Particular效果搭配製作文字溶解和粒子。第三部分利用Time Remapping製作動力停滯效果，看起來就像駭客任務裡頭那樣~希望大家也來玩玩看喔~", slug: "ae-text-dissolve-3", category_id: 3, author_id: nil, display_date: "2010-11-29", is_public: true, video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/eXtUMr7RKm0?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "製作3D文字(第一部分)", content: "介紹在AE當中製作簡易3D文字和攝影機移動的方法。第一部分使用文字圖層複製重疊的方法製造3D文字的視覺效果，並且製作背景、攝影機的移動路徑。第二部分製作第二層文字，並用攝影機移動製作成簡單的動畫。本篇算是相當基礎，新手可以參考看看喔！", slug: "ae-3d-text-1", category_id: 3, author_id: nil, display_date: "2010-12-08", is_public: true, video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/hz2BCxiJoCo?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "製作3D文字(第二部分)", content: "介紹在AE當中製作簡易3D文字和攝影機移動的方法。第一部分使用文字圖層複製重疊的方法製造3D文字的視覺效果，並且製作背景、攝影機的移動路徑。第二部分製作第二層文字，並用攝影機移動製作成簡單的動畫。本篇算是相當基礎，新手可以參考看看喔！", slug: "ae-3d-text-2", category_id: 3, author_id: nil, display_date: "2010-12-08", is_public: true, video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/SZEhco9mgs4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "開槍效果製作", content: "模擬開槍效果，第一使用Freeze Frame及Tracker Controls(追蹤座標)模擬開槍時機身伸縮模式。第二使用控制碼做出火花。第三則是使用Trapcode Particular(CC Particle World亦可)產生煙硝。四，使用Tracker及控制碼做出開槍瞬間光影。開槍時槍口前的空氣波動使用Displacement Map製作。大家可以試看看喔！", slug: "ae-fire", category_id: 3, author_id: nil, display_date: "2011-03-14", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/qn67ejEfe1A?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "用音樂來操作視覺效果", content: "使用Radio Wave特效創造音樂發出音波的標題效果。先加入音樂檔使用Keyframe Assistant及Audio調整音樂性質。接下來使用Radio Wave、控制碼製作音波。接著用Circle做出音波核心。標題製作及出場則使用Text和Presets裡的效果。最後使用攝影機進行3D位移。想試作音樂標題的大家可參考喔！", slug: "ae-sound-animation", category_id: 3, author_id: nil, display_date: "2011-03-25", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/KdTgSRhJQdM?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "AE當中的OpenGL簡介", content: "針對工作效率的提升使用OpenGL Renderer。為了使預覽(Preview)及輸出(Render Queue)時間縮短，可使用以下幾種方式：\n\n1. Render setting裡的use OpenGL Renderer\n2. Fast Previews裡的OpenGL-interactive\n3. Preferences裡的Previews再開啟OpenGL\n4. 進入Memory&Cache更改檔案儲存位置減少C槽容量的消耗。\n\n覺得太耗時的大家可參考看看同時也檢查一下自己的顯示卡喔！(OpenGL建議於特效較多時開啟)", slug: "ae-opengl", category_id: 3, author_id: nil, display_date: "2011-04-02", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/SkqcJhQa1sE?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "畫面閃爍、蒙太奇效果製作", content: "介紹在AE當中使用圖層重疊功能(Sequence Layers)製造跑馬燈效果。先使用CC Smear 變形工具製作出意識回溯的感覺。接下來使用圖層重疊功能製造記憶跑馬燈。大家可以參考看看。\n(*CC系列外掛僅限CS4以後版本才有免費提供)", slug: "ae-montage", category_id: 3, author_id: nil, display_date: "2011-04-26", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/kEY014Zsnyc?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "AE中的2.5D空間 ", content: "介紹3D與2.5D的差別，同時解釋AE裡的2.5D。針對常用之效果Particular及Optical Flares裡的設定Obscuration Layer及Foreground Layers建立3D圖層關係。", slug: "ae-25d", category_id: 3, author_id: nil, display_date: "2011-05-14", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/EwfRHEqBpgU?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "華麗標題製作", content: "使用Lens Flare和染色效果製作華麗莊嚴的標題！使用Lens Flare做出多個光點閃光效果。而接下來使用Hue/Saturation將光點染色產生不同光澤。同時可利用控制碼(Wiggle)讓光點產生閃爍效果。最後使用文字外框製作外框。有需要做標題的各位可參考看看囉！", slug: "ae-beautiful-title", category_id: 3, author_id: nil, display_date: "2011-06-19", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/HZyCInGfkJI?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "Sure Target 各式效果搭配(第一部分)", content: "本教學分兩部分：\n\n第一部分提供三種標題製作方法\n\n第二部分使用Sure Target外掛，並加上背景製作\n\nMotion Express的AE教學第九篇，著重在標題的變化和製作。第一部分使用Ramp做出背景、Grid製作地板(Floor)再使用Camera定位。接下來使用Text製作標題並選擇Presets的效果。可利用Directional Blur製作速度感效果；CC Particle World及Carves製作子彈碰撞之火花效果；CC Split做出物體彈性感之效果。最後利用CC Rain和Cell Pattern創造雨點的感覺及重點醒目提示效果。第二部分使用Sure Target2外掛製作出標題移動及鎖定目標。對Sure Target2有興趣的各位可試看看囉!", slug: "ae-sure-target-1", category_id: 3, author_id: nil, display_date: "2011-07-24", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/l2f0uuTw9U0?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "Sure Target 各式效果搭配(第二部分)", content: "本教學分兩部分：\n\n第一部分提供三種標題製作方法\n\n第二部分使用Sure Target外掛，並加上背景製作\n\nMotion Express的AE教學第九篇，著重在標題的變化和製作。第一部分使用Ramp做出背景、Grid製作地板(Floor)再使用Camera定位。接下來使用Text製作標題並選擇Presets的效果。可利用Directional Blur製作速度感效果；CC Particle World及Carves製作子彈碰撞之火花效果；CC Split做出物體彈性感之效果。最後利用CC Rain和Cell Pattern創造雨點的感覺及重點醒目提示效果。第二部分使用Sure Target2外掛製作出標題移動及鎖定目標。對Sure Target2有興趣的各位可試看看囉!", slug: "ae-sure-target-2", category_id: 3, author_id: nil, display_date: "2011-07-23", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/rqPpYaZh28o?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "控制影片時間", content: "介紹AE當中時間的控制。主要介紹四個功能：Time Remapping、Time Stretch、Freeze Frame、Time-Reverse Layer。分別可以讓一個圖層或是影片素材改變時間比例、延展、縮短、停格、倒退播放等等，其中以Time Remapping運用最為靈活，甚至包含了另外三個功能。另外，如果放慢影片，會造成素材的慢動作不順暢，這時可以使用AE內建的Frame Blend模式，製造台灣鄉土劇常用的慢速播放，或是常在好萊烏電影常看到的慢動作效果。本教學中都有介紹，一起來看看吧！", slug: "ae-time-control", category_id: 3, author_id: nil, display_date: "2011-08-20", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/rdPgt427YtE?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "利用AE修片、改善色彩", content: "介紹如何修改影片的色彩、色調，針對初學者設計。假如各位有過經驗看到影片卻不知如何讓畫面色彩、明亮變得更好看，那這個教學就非看不可了。最簡單改善畫面色彩的方法是在Effects裡頭使用Brightness and Contrast和Photo Filter兩個特效，調幾項數值，效果一蹴可幾。若要再提升，便是使用Curves、Hue/Saturation、Color Balance等三種效果來改善畫面。只需要一點時間，效果一樣顯而易見！", slug: "ae-better-color", category_id: 3, author_id: nil, display_date: "2011-08-25", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/kSnuML5oqT8?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "文字模組特效入門", content: "介紹如何在AE裡頭套用文字模組特效(presets)來讓文字比較生動。先前在第九個教學裡頭已經有使用過文字模組特效，但當時並沒有詳細講解，於是這次加上一點個人經驗分享，讓大家知道一下要如何套用文字模組特效。內容包括在Bridge當中預覽文字效果，還有套用效果以後要如何增加變化，讓文字變得更豐富！", slug: "ae-text-presets", category_id: 3, author_id: nil, display_date: "2011-11-23", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/iytMVr17XAQ?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "焊接效果製作", content: "想要製作具有焊接效果的標題嗎？本教學先使用Pen Tool和Stroke製作寫字效果，並使用Lens Flare和CC Particle組合製作焊接效果，加上一些細部雕琢。對於標題製作有興趣的朋友千萬別錯過！", slug: "ae-wielding", category_id: 3, author_id: nil, display_date: "2012-11-24", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/mEPuge1X_Ww?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "製作AE的presets", content: "", slug: "ae-making-presets", category_id: 3, author_id: nil, display_date: "2013-07-20", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/-TWqE0-VLfI?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "鬼影幢幢標題製作", content: "", slug: "ae-ghost-title", category_id: 3, author_id: nil, display_date: "2013-07-20", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/m8b9-75IqCU?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"},
  {title: "彈跳效果製作", content: "本教學利用expression製作彈跳效果的預設模組，往後在需要使用彈跳效果的動畫時可直接套用。教學分為兩個部分，第一個部分直接說明模組使用方式，如果有興趣了解製作過程的人可參考第二部分教學，說明此模組如何製作。本教學是編譯Creative Cow的教學製作而成。", slug: "ae-bouncing-effect", category_id: 3, author_id: nil, display_date: "2013-09-10", is_public: true, video_embed: "<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/RxqWRRf7HC4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>"}
])
Screencast.create!([
  {title: "介面講解", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/mQqGJLIAoGs?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "Motion Express基礎教學篇第一篇，主要為After Effects介面講解，簡單幾分鐘帶過這套軟體的使用介面。主要講解素材視窗、工作視窗、時間軸等等~以及最基本的匯入素材~有了基礎概念以後再進行下一步！", training_id: "1", slug: "interface", display_date: "2010-12-26", image_embed: "", author_id: nil, is_public: true, training_order: 1, category_id: 3},
  {title: "濾鏡說明", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/QzdmU0yZG9k?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要介紹遮罩、濾鏡。兩種功能皆可深可淺，本教學介紹的是最容易上手的部分，效果簡單。另外也介紹工作區圖層的數值，例如Rotatio­n、Scale、Anchor Point等等，可以像是平面編輯一樣調整，希望大家看了能夠更了解AE這套軟體的運作方式~", training_id: "1", slug: "ae-filter", display_date: "2010-12-26", image_embed: "", author_id: nil, is_public: true, training_order: 2, category_id: 3},
  {title: "動畫基礎之關鍵影格 ", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/wqDE4cYbTeA?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要介紹After Effects製作動畫時最關鍵的技巧「關鍵影格」(keyframe)，它可以在特定時間上固定我們想要的屬性。在設置關鍵影格的同時，等於是在告訴系統我們要操作的東西有哪些。我們可以在Animation中進行關鍵影格設定及移動。同時效果裡也可使用關鍵影格進行變化。希望大家在做動畫時能派上用場囉!", training_id: "1", slug: "ae-keyframes", display_date: "2010-12-30", image_embed: "", author_id: nil, is_public: true, training_order: 3, category_id: 3},
  {title: "控制碼(上)", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/KBpUf-e6xs4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要介紹After Effects控制碼(Expression)的編寫與使用。控制碼就像寫程式一樣，我們可以以一連串的控制碼來呈現某個數值，並利用它節省調整設定的時間。第一部分使用X(本體)、Value(最後呈現數值)、index(圖層編號)及第二部分wiggle(閃爍效果)等控制碼來呈現動畫效果。有興趣寫寫程式的大家可以試著操作看看喔!", training_id: "1", slug: "ae-expression-1", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 4, category_id: 3},
  {title: "控制碼(下)", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/zj_ZAX4RSMY?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要介紹After Effects控制碼(Expression)的編寫與使用。控制碼就像寫程式一樣，我們可以以一連串的控制碼來呈現某個數值，並利用它節省調整設定的時間。第一部分使用X(本體)、Value(最後呈現數值)、index(圖層編號)及第二部分wiggle(閃爍效果)等控制碼來呈現動畫效果。有興趣寫寫程式的大家可以試著操作看看喔!", training_id: "1", slug: "ae-expression-2", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 5, category_id: 3},
  {title: "製作背景", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/zf5sOnodhk4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "簡易介紹After Effects中如何製作背景。使用Texture(素材)、Ramp(漸層)製作背景並使用Tint染色。透過Transfer Mode來選擇我們所要呈現之背景效果，並利用Color Key或Mode中的Screen製作去背效果。最後使用Glow創造發光的感覺。如果想隨時變換背景之顏色，可使用Ramp、Hue/Saturation及控制碼來製作設定。初學者可先參照並自己試看看喔!", training_id: "1", slug: "ae-layer-background", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 6, category_id: 3},
  {title: "3D空間", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/ruf9-nndY6o?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "介紹After Effects中如何製作3D空間。透過開啟介面上3D(圖方格)之選項操作xyz軸，並利用Camera製作出3D立體圖層。接下來製作光(Light)及陰影(Casts Shadows)來呈現視覺上的3D立體感。最後使用Null Object當作Camera之調控器，較方便控制調整動畫之運動模式、方向。對於製作3D特效有興趣的大家，可先參考此教學並試作看看喔!", training_id: "1", slug: "ae-3d-space", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 7, category_id: 3},
  {title: "標題製作(上)", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/45iATsCEWo4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要運用After Effects中的Text產生文字標題。第一部分使用Text及Character製作基本文字標題，再利用Effects&Presets找尋合適之文字效果，並可選擇Animate創造文字進出場模式。第二部分實際製作標題效果，使用效果Ramp(漸層)套用於文字上和使用Shatter(打散)做出文字碎裂之特效，Enable Time Remapping則可製作出前後目標交換及時間延長等效果。", training_id: "1", slug: "ae-title-1", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 8, category_id: 3},
  {title: "標題製作(下)", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/thK8qdzygsM?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "主要運用After Effects中的Text產生文字標題。第一部分使用Text及Character製作基本文字標題，再利用Effects&Presets找尋合適之文字效果，並可選擇Animate創造文字進出場模式。第二部分實際製作標題效果，使用效果Ramp(漸層)套用於文字上和使用Shatter(打散)做出文字碎裂之特效，Enable Time Remapping則可製作出前後目標交換及時間延長等效果。\n", training_id: "1", slug: "ae-title-2", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 9, category_id: 3},
  {title: "輸出影片", video_embed: "<iframe width=\"960\" height=\"720\" src=\"https://www.youtube.com/embed/-TmACz9qUyk?rel=0\" frameborder=\"0\" allowfullscreen></iframe>", content: "簡單講解After Effects如何在影片製作完成後輸出為一段可播放之影片。在影片完成後先利用work area或Trim Comp to Work Area選出所要輸出之片段或全部影片，接下來可使用Create Proxy(草稿)或Add to Render Queue將影片輸出。在Render Queue中我們可自行調整輸出之影片類型、輸出位置等。影片製作完成但還不清楚該如何輸出之各位，可利用此教學完成作品喔!", training_id: "1", slug: "ae-render", display_date: "2011-01-20", image_embed: "", author_id: nil, is_public: true, training_order: 10, category_id: 3},
  {title: "基本用法", video_embed: "<iframe src=\"//fast.wistia.net/embed/iframe/54l4tdrvj4?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"371\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>", content: "## 概要\n\n1. 如何安裝RSpec\n2. 如何用單一檔案執行RSpec\n3. describe及it用法簡介\n4. 兩個使用案例\n\n## 參考資料\n\n[http狀態代碼](http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81)\n\n## 筆記\n\n版本\n\n\n>Ruby版本： 2.1.2\n\n>RSpec版本： 3.2.0\n\n>\n\n安裝\n\n```cmd\n$ gem install rspec\n$ gem install httpclient\n```\n\n簡易數學\n\n```ruby\nrequire 'rspec'\n\ndescribe \"Math\" do\n  it 'do basic math' do\n    expect(1+1).to eq(2)\n  end\nend\n```\n\n執行\n\n```cmd\n$ rspec basic_spec.rb\n```\n\n薪水分類\n\n```ruby\nrequire 'rspec'\n\nclass Divider\n  def salary_divide(salary)\n    case salary\n    when 0..300000\n      \"年收入30萬以下\"\n    when 300000..600000\n      \"年收入30~60萬之間\"\n    when 600000..900000\n      \"年收入60~90萬之間\"\n    else \n      \"年收入90萬以上\"\n    end\n  end\nend\n\ndescribe \"salary\" do\n  it 'is categorized successfully based on input' do\n    expect(Divider.new.salary_divide(250000)).to eq(\"年收入30萬以下\")\n    expect(Divider.new.salary_divide(290000)).to eq(\"年收入30萬以下\")\n    expect(Divider.new.salary_divide(358000)).to eq(\"年收入30~60萬之間\")\n    expect(Divider.new.salary_divide(540000)).to eq(\"年收入30~60萬之間\")\n    expect(Divider.new.salary_divide(744000)).to eq(\"年收入60~90萬之間\")\n    expect(Divider.new.salary_divide(950000)).to eq(\"年收入90萬以上\")\n  end\nend\n```\n\n確認連線正常\n\n```ruby\nrequire 'rspec'\nrequire 'httpclient'\n\ndescribe \"connections\" do\n  it 'are stable' do\n    expect(HTTPClient.new.get(\"http://rspec.info/\").status).to eq 200\n    expect(HTTPClient.new.get(\"http://rspec.info/\").body).to include(\"Behaviour Driven Development in Ruby with RSpec\")\n    expect(HTTPClient.new.get(\"https://evernote.com/intl/zh-tw/\").status).to eq 200\n    expect(HTTPClient.new.get(\"https://www.linode.com/\").status).to eq 200\n  end\nend\n```", training_id: "2", slug: "rspec-basic-use", display_date: "2015-04-09", image_embed: "", author_id: nil, is_public: true, training_order: 1, category_id: 3},
  {title: "安裝RSpec至Rails", video_embed: "<iframe src=\"//fast.wistia.net/embed/iframe/q0dn20std0?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"360\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>", content: "產生新專案\n\n```cmd\n$rails new demo-app\n```\n\n`Gemfile`\n\n```ruby\ngroup :development, :test do\n  gem 'rspec-rails'\nend\n```\n\n```cmd\n$bundle install\n$rails generate rspec:install\n$rails generate scaffold post\n$rake db:migrate\n$rspec\n```\n\n測試當中會有許多不必要的測試檔案，因此從頭來產生一次。\n\n```cmd\n$rails destroy scaffold post\n```\n\n將RSpec相關的產生器關掉。\n\n`/config/application.rb`\n\n```ruby\nconfig.generators do |g|\n  g.controller_specs false\n  g.view_specs false\n  g.helper_specs false\n  g.routing_specs false\n  g.request_specs false\nend\n```\n\n再產生一次scaffold\n\n```cmd\n$rails generate scaffold post title:string content:text\n$rake db:drop db:create db:migrate\n$rspec\n```\n\n會只剩下model測試\n\n`/spec/models/post_spec.rb`\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe Post, type: :model do\n\tit \"is accessible\" do\n\t\tpost = Post.create!\n\t\texpect(post).to eq(Post.last)\n\tend\n\n\tit \"has title and content columns\" do\n\t\tcolumns = Post.column_names\n\t\texpect(columns).to include(\"id\")\n\t\texpect(columns).to include(\"title\")\n\t\texpect(columns).to include(\"content\")\n\t\texpect(columns).not_to include(\"user_id\")\n\tend\nend\n```\n", training_id: "2", slug: "install-rspec-to-rails", display_date: "2015-05-10", image_embed: "", author_id: nil, is_public: true, training_order: 2, category_id: 6},
  {title: "撰寫controller測試", video_embed: "<iframe src=\"//fast.wistia.net/embed/iframe/89g8s0xbg9?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"400\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>", content: "新增controller測試檔案\n\n```cmd\n$mkdir spec/controllers\n$touch spec/controllers/posts_spec.rb\n```\n\n`/spec/controllers/posts_spec.rb`\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe PostsController, type: :controller do\n\tbefore(:all) do\n\t\t@post_1 = Post.create(title: \"title_1\", content: \"content_1\")\n\t\t@post_2 = Post.create(title: \"title_2\", content: \"content_2\")\n\tend\n\n\tit \"#index\" do\n\t\tget :index\n\t\texpect(response).to have_http_status(200)\n\t\texpect(response).to render_template(:index)\n\tend\n\n\tit \"#new\" do\n\t\tget :new\n\t\texpect(response).to have_http_status(200)\n\t\texpect(response).to render_template(:new)\n\tend\n\n\tit \"#edit\" do\n\t\tget :edit, id: @post_1[:id]\n\t\texpect(response).to have_http_status(200)\n\t\texpect(response).to render_template(:edit)\n\tend\n\n\tdescribe \"#create\" do\n\t\tbefore(:all) do\n\t\t\t@post_params = {title: \"title\", content: \"content\"}\n\t\tend\n\n\t\tit \"creates record\" do \n\t\t\texpect{ post :create, post: @post_params }.to change{Post.all.size}.by(1)\n\t\tend\n\n\t\tit \"redirect on success\" do\n\t\t\tpost :create, post: @post_params\n\t\t\texpect(response).not_to have_http_status(200)\n\t\t\texpect(response).to have_http_status(302)\n\t\t\texpect(response).to redirect_to(post_path(Post.last))\n\t\tend\n\n\t\tit \"render :new on fail\" do\n\t\t\tallow_any_instance_of(Post).to receive(:save).and_return(false)\n\t\t\tpost :create, post: @post_params\n\t\t\texpect(response).not_to have_http_status(302)\n\t\t\texpect(response).to render_template(:new)\n\t\tend\n\tend\n\n\tdescribe \"#update\" do\n\t\tbefore(:all) do\n\t\t\t@post_params = {title: \"title_3\", content: \"content\"}\n\t\tend\n\n\t\tit \"changes record\" do \n\t\t\tpost :update, post: @post_params, id: @post_2[:id]\n\t\t\texpect(Post.find(@post_2[:id])[:title]).to eq(\"title_3\")\n\t\tend\n\n\t\tit \"redirect on success\" do\n\t\t\tpost :update, post: @post_params, id: @post_2[:id]\n\t\t\texpect(response).not_to have_http_status(200)\n\t\t\texpect(response).to have_http_status(302)\n\t\t\texpect(response).to redirect_to(post_path(Post.find(@post_2[:id])))\n\t\tend\n\n\t\tit \"render :edit on fail\" do\n\t\t\tallow_any_instance_of(Post).to receive(:update).and_return(false)\n\t\t\tpost :update, post: @post_params, id: @post_2[:id]\n\t\t\texpect(response).not_to have_http_status(302)\n\t\t\texpect(response).to render_template(:edit)\n\t\tend\n\tend\n\n\tdescribe \"#destroy\" do\n\t\tbefore(:each) do\n\t\t\t@post_3 = @post_2 || Post.create(title: \"title_3\", content: \"content_3\")\n\t\tend\n\n\t\tit \"destroy record\" do\n\t\t\texpect{ delete :destroy, id: @post_3[:id] }.to change{Post.all.count}.by(-1)\n\t\tend \n\n\t\tit \"redirect_to index after destroy\" do\n\t\t\tdelete :destroy, id: @post_3[:id]\n\t\t\texpect(response).to have_http_status(302)\n\t\t\texpect(response).to redirect_to(posts_path)\n\t\tend\n\tend\nend\n```", training_id: "2", slug: "rspec-basic-controller", display_date: "2014-05-10", image_embed: "", author_id: nil, is_public: true, training_order: 3, category_id: 6},
  {title: "撰寫view測試", video_embed: "<iframe src=\"//fast.wistia.net/embed/iframe/ipw46hx3bg?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"360\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>", content: "建立view測試檔案\n\n```cmd\n$mkdir spec/views\n$mkdir spec/views/posts\n$touch spec/views/posts/index_spec.rb\n```\n\n`spec/views/posts/index_spec.rb`\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe \"posts/index.html.erb\", type: :view do\n\tit 'can render' do\n\t\t@post = Post.create(:title => \"Big Title\", :content => \"content\")\n\t\t@posts = Array.new(2, @post)\n\t\trender\n\t\texpect(rendered).to include(\"Title\")\n\t\texpect(rendered).to include(\"Big Title\")\n\tend\nend\n\nRSpec.describe \"posts/index.json.jbuilder\", type: :view do\n\tit \"contains data\" do\n\t\t@post = Post.create(:title => \"Big Title\", :content => \"content\")\n\t\t@posts = Array.new(2, @post)\n\t\trender\n\t\texpect(rendered).to include(\"id\")\t\n\t\texpect(rendered).to include(\"title\")\t\n\t\texpect(rendered).to include(\"content\")\n\t\texpect(rendered).to include(\"Big Title\")\n\tend\nend\n\n\nRSpec.describe \"posts/index.pdf.prawn\", type: :view do\n\tit \"contains data\" do\n\t\t@post = Post.create(:title => \"Big Title\", :content => \"content\")\n\t\t@posts = Array.new(2, @post)\n\t\tcontent = PDF::Inspector::Text.analyze(render).strings.join(\",\")\n\t\texpect(content).to include(\"Hello World\")\n\t\texpect(content).to include(\"Big Title\")\n\tend\nend\n```\n\n建立edit頁面測試\n\n```cmd\n$touch spec/views/posts/edit_spec.rb\n```\n\n`/spec/views/posts/edit_spec.rb`\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe \"posts/edit.html.erb\", type: :view do\n\tbefore(:each) do\n\t\t@post = Post.create(:title => \"Big Title\", :content => \"content\")\n\tend\n\n\tit \"render partial\" do\n\t\trender\n\t\texpect(response).to render_template(partial: \"_form\")\n\tend\n\n\tit \"has link\" do\n\t\trender\n\t\texpect(rendered).to include(\"Show\")\n\t\texpect(rendered).to include(\"Back\")\t\t\n\tend\nend\n```\n\n建立show頁面測試\n\n```cmd\n$touch spec/views/posts/show_spec.rb\n```\n\n將部分邏輯判斷整理到helper當中\n\n`/app/helpers/post_helpers.rb`\n\n```ruby\nmodule PostsHelper\n\tdef render_content\n\t\tif not @post.content.nil?\n    \t\t@post.content\n  \t\telse\n    \t\tcontent_tag(:p, \"No Content\")\n  \t\tend\n\tend\nend\n```\n\n將helper method填回show頁面的content當中。\n\n`/app/views/posts/show.html.erb`\n\n```ruby\n<%= render_content %>\n```\n\n撰寫show測試\n\n`/spec/views/posts/show_spec.rb`\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe \"posts/show.html.erb\", type: :view do\n\tit \"renders 'No Content' when @post has no content\" do\n\t\t@post = Post.create(:title => \"Big Title\", :content => nil)\n\t\trender\n\t\texpect(rendered).to include(\"No Content\")\n\tend\n\n\tit \"renders content when @post has content\" do\n\t\tallow(view).to receive(:render_content).and_return(\"Stub Content\")\n\t\t@post = Post.create(:title => \"Big Title\", :content => \"I love rails\")\n\t\trender\n\t\texpect(rendered).not_to include(\"No Content\")\n\t\texpect(rendered).not_to include(\"I love rails\")\n\t\texpect(rendered).to include(\"Stub Content\")\n\tend\nend\n```", training_id: "2", slug: "rspec-basic-view", display_date: "2015-05-10", image_embed: "", author_id: nil, is_public: true, training_order: 4, category_id: 6}
])
Tag.create!([
  {name: "RSpec", slug: "RSpec"},
  {name: "Scripting", slug: "Scripting"},
  {name: "deployment", slug: "deployment"}
])
Training.create!([
  {title: "After Effects 基礎教學", content: "After Effects是一套影片後製軟體，是幫影片加上特效、合成效果用的。一般的影片剪接軟體是將不同影片剪接在一起、裁切、配樂、配音等等，After Effects是影片製作當中的一環，使用得好，可以讓影片本身變得更出色。\n\n那After Effects可以幫影片做出甚麼效果呢？簡單來說分為以下幾種：製作標題、特效合成、修片、微調：\n\n##1.製作標題\n\n如果有使用過威力導演，一定使用過加字幕和標題的功能。After Effects不只可以加標題，還可以讓標題出現的方法千變萬化。\n舉例來說，如果毫無裝飾，影片開頭的標題就會是下圖這樣：\n\n![](https://farm9.staticflickr.com/8745/17475020981_982ebd671f_o.gif)\n\n換個角度來看，如果從頭到尾都使用這樣的方式，那未免太了無新意。如果在適當的片段，出現像下圖的標題畫面，便能夠更吸引目光：\n\n![](https://farm8.staticflickr.com/7738/17449469196_f344073163_o.gif)\n\n## 2.特效合成\n\n想要讓影片有個壯闊的場景嗎？想要發出龜派氣功嗎？這些想像中的場景，在After Effects裡通通可以完成。\n\n想像一下，今天有個人，在某個時刻大腦意識被入侵，進入另一個世界，那你會怎麼表現這個畫面呢？要讓觀眾印象深刻，勢必要設計一種腦中急遽變化的效果。若使用After Effects設計，可以設計如下：\n\n![](https://farm6.staticflickr.com/5453/17475077941_352dbb8c02_o.gif)\n\n## 3.修片&微調\n\n一般的剪接軟體例如Premiere Pro、Vegas、Edius、Final Cut Pro都已經提供非常完整的修片功能，包括調整色彩、加上邊框等等，但如果要進行細部調整，還是要使用After Effects。例如我的影片只有下半部需要調整，上半部不需要，這樣的操作在一般的剪接軟體中是非常困難的，這時若使用After Effects，編修起來會相當容易。\n\n![](https://farm9.staticflickr.com/8822/17475498015_6f12643838_o.gif)\n\n準備好進入影片後製特效的世界了嗎？直接[開始看第1個訓練影片](/trainings/ae-basic-training/screencasts/interface)吧！", video_embed: "", image_embed: "https://farm8.staticflickr.com/7707/17291351999_00504624b7_o.png", slug: "ae-basic-training", display_date: "2013-07-20", author_id: nil, is_public: true, category_id: 3, skip: false},
  {title: "RSpec-Rails (基礎篇)", content: "", video_embed: "", image_embed: "https://farm8.staticflickr.com/7758/17341053606_9b5a762298_o.jpg", slug: "rspec-rails-1", display_date: "2015-05-10", author_id: nil, is_public: true, category_id: 6, skip: true}
])
Category.create!([
  {name: "閒話家常", slug: "閒話家常"},
  {name: "專題文章", slug: "專題文章"},
  {name: "AfterEffects", slug: "AfterEffects"},
  {name: "未分類", slug: "未分類"},
  {name: "推薦內容", slug: "推薦內容"},
  {name: "Rails研究室", slug: "Rails研究室"},
  {name: "Ruby整理", slug: "Ruby整理"},
  {name: "Showcase", slug: "Showcase"},
  {name: "Vim", slug: "Vim"}
])


    Setting.create!([
      {key: "site_title", value: "特快車 | Ruby、Rails、各式技術分享", tag: "網站標題"},
      {key: "meta_title", value: "特快車：Ruby、Rails、網路、開發技術分享", tag: "META標題"},
      {key: "meta_keywords", value: "ruby,rails,rspec,hexo,blog,tutorial,教學,技術分享", tag: "META關鍵字"},
      {key: "meta_description", value: "以Ruby on Rails為中心的各式網路開發技術分享，歡迎大家多指教", tag: "META說明"},
      {key: "og_title", value: "特快車 | Ruby、Rails、各式技術分享", tag: "社群分享：標題"},
      {key: "og_url", value: "http://motion-express.com", tag: "社群分享：連結網址"},
      {key: "og_site_name", value: "特快車 | Ruby、Rails、各式技術分享", tag: "社群分享：網站名稱"},
      {key: "og_description", value: "以Ruby on Rails為中心的各式網路開發技術分享，歡迎大家多指教", tag: "社群分享：說明"},
      {key: "favicon_location", value: "/favicon.png", tag: "網站Favicon"},
      {key: "ga", value: "<script>   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-37175845-6', 'auto');   ga('send', 'pageview');  </script>", tag: "GA程式碼"}
    ])
    User.create!([
      {email: "nkj20932@hotmail.com", encrypted_password: "$2a$10$Z4tKSUiuRMBr8SCRK2Bqte8v/wuPLHyoSyUCjqf73Roe8wn9PfcLq", reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 2, current_sign_in_at: "2015-05-10 02:20:18", last_sign_in_at: "2015-05-03 05:03:33", current_sign_in_ip: "::1", last_sign_in_ip: "::1", is_admin: true, name: "adler", password: "adlerhsieh0806", password_confirmation: "adlerhsieh0806"}
    ])
